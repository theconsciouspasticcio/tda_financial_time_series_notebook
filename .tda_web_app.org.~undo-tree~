(undo-tree-save-format-version . 1)
"83bd4cdac59d154af5aea0447842f042081cd63b"
[nil nil nil nil (26440 37351 398692 6000) 0 nil]
([nil nil ((nil jupyter-stream-newline nil 5447 . 5448) (4624 . 5448) (4599 . 4630) (#(": e4c49770-1057-4c5b-a13d-33f8faebab0d
" 0 39 (ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . 4599) (4588 . 4638) (#("
" 0 1 (ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . 4588) (4587 . 4589) (nil jupyter-request nil 659 . 660) (t 26440 37214 561807 575000)) nil (26440 37351 398690 957000) 0 nil])
([nil nil ((#(" " 0 1 (jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 5381) 5385) nil (26440 37351 398686 728000) 0 nil])
([nil nil ((918 . 920) (t 26440 37351 398682 608000)) nil (26440 37561 304765 354000) 0 nil])
([nil nil ((nil jupyter-stream-newline nil 4831 . 4832) (4626 . 4832) (4601 . 4632) (#(": c1aed066-c076-44c6-957f-63f5bcdbc2a6
" 0 39 (ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . 4601) (4601 . 4640) (#(":RESULTS:
# [goto error]
: [0;31m---------------------------------------------------------------------------[0m
: [0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
: Cell [0;32mIn[44], line 12[0m
: [1;32m      9[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m
: [1;32m     11[0m [38;5;66;03m# Some gudhi imports for TDA[39;00m
: [0;32m---> 12[0m [38;5;28;01mfrom[39;00m [38;5;21;01mtda_pipeline[39;00m [38;5;28;01mimport[39;00m DataSelector, RipsPersistence, LPNorm
: [1;32m     13[0m [38;5;28;01mfrom[39;00m [38;5;21;01mgudhi[39;00m[38;5;21;01m.[39;00m[38;5;21;01mrepresentations[39;00m [38;5;28;01mimport[39;00m Landscape
: [1;32m     15[0m [38;5;66;03m# Some graphical imports for the web app[39;00m
:
: [0;31mModuleNotFoundError[0m: No module named 'tda_pipeline'
:END:
" 0 9 (font-lock-fontified t face org-drawer wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 9 10 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 10 12 (face font-lock-comment-face font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 12 13 (face font-lock-comment-face font-lock-fontified t keymap (keymap (13 . jupyter-org-goto-error) (mouse-2 . jupyter-org-goto-error)) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t jupyter-error-loc #<marker at 659 in tda_web_app.org>) 13 24 (face font-lock-comment-face font-lock-fontified t keymap (keymap (13 . jupyter-org-goto-error) (mouse-2 . jupyter-org-goto-error)) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t jupyter-error-loc #<marker at 659 in tda_web_app.org>) 24 25 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 25 27 (jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 27 34 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 34 109 (jupyter-face ((:foreground "red3")) jupyter-ansi t face ((:foreground "red3") org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 109 113 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 113 114 (jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 114 116 (jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 116 123 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 123 142 (jupyter-face ((:foreground "red3")) jupyter-ansi t face ((:foreground "red3") org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 142 146 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 146 203 (jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 203 210 (jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 210 217 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 217 232 (jupyter-face ((:foreground "green3")) jupyter-ansi t face ((:foreground "green3") org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 232 236 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 236 237 (jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 237 239 (jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 239 246 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 246 253 (jupyter-face ((ansi-color-bold (:foreground "green3"))) jupyter-ansi t face ((ansi-color-bold (:foreground "green3")) org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 253 257 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 257 258 (jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 258 271 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 271 277 (jupyter-face ((ansi-color-bold (:foreground "#008700"))) jupyter-ansi t face ((ansi-color-bold (:foreground "#008700")) org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 277 285 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 285 286 (jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 286 299 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 299 301 (jupyter-face ((ansi-color-bold (:foreground "#0000FF"))) jupyter-ansi t face ((ansi-color-bold (:foreground "#0000FF")) org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 301 309 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 309 310 (jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 310 312 (jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 312 319 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 319 326 (jupyter-face ((ansi-color-bold (:foreground "green3"))) jupyter-ansi t face ((ansi-color-bold (:foreground "green3")) org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 326 330 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 330 331 (jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 331 344 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 344 372 (jupyter-face ((ansi-color-italic (:foreground "#5F8787"))) jupyter-ansi t face ((ansi-color-italic (:foreground "#5F8787")) org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 372 380 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 380 381 (jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 381 383 (jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 383 390 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 390 397 (jupyter-face ((:foreground "green3")) jupyter-ansi t face ((:foreground "green3") org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 397 401 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 401 402 (jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 402 415 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 415 419 (jupyter-face ((ansi-color-bold (:foreground "#008700"))) jupyter-ansi t face ((ansi-color-bold (:foreground "#008700")) org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 419 427 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 427 428 (jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 428 441 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 441 453 (jupyter-face ((ansi-color-bold (:foreground "#0000FF"))) jupyter-ansi t face ((ansi-color-bold (:foreground "#0000FF")) org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 453 461 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 461 462 (jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 462 475 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 475 481 (jupyter-face ((ansi-color-bold (:foreground "#008700"))) jupyter-ansi t face ((ansi-color-bold (:foreground "#008700")) org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 481 489 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 489 528 (jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 528 530 (jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 530 537 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 537 544 (jupyter-face ((ansi-color-bold (:foreground "green3"))) jupyter-ansi t face ((ansi-color-bold (:foreground "green3")) org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 544 548 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 548 549 (jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 549 562 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 562 566 (jupyter-face ((ansi-color-bold (:foreground "#008700"))) jupyter-ansi t face ((ansi-color-bold (:foreground "#008700")) org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 566 574 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 574 575 (jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 575 588 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 588 593 (jupyter-face ((ansi-color-bold (:foreground "#0000FF"))) jupyter-ansi t face ((ansi-color-bold (:foreground "#0000FF")) org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 593 601 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 601 614 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 614 615 (jupyter-face ((ansi-color-bold (:foreground "#0000FF"))) jupyter-ansi t face ((ansi-color-bold (:foreground "#0000FF")) org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 615 623 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 623 636 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 636 651 (jupyter-face ((ansi-color-bold (:foreground "#0000FF"))) jupyter-ansi t face ((ansi-color-bold (:foreground "#0000FF")) org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 651 659 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 659 660 (jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 660 673 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 673 679 (jupyter-face ((ansi-color-bold (:foreground "#008700"))) jupyter-ansi t face ((ansi-color-bold (:foreground "#008700")) org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 679 687 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 687 698 (jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 698 700 (jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 700 707 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 707 714 (jupyter-face ((ansi-color-bold (:foreground "green3"))) jupyter-ansi t face ((ansi-color-bold (:foreground "green3")) org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 714 718 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 718 719 (jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 719 732 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 732 772 (jupyter-face ((ansi-color-italic (:foreground "#5F8787"))) jupyter-ansi t face ((ansi-color-italic (:foreground "#5F8787")) org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 772 780 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 780 781 (jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 781 782 (face (org-code) jupyter-ansi t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 782 783 (face (org-code) jupyter-ansi t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 783 785 (jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 785 792 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 792 811 (jupyter-face ((:foreground "red3")) jupyter-ansi t face ((:foreground "red3") org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 811 815 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 815 847 (jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 847 848 (jupyter-ansi t face (org-code) jupyter-stream-newline t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 848 853 (jupyter-ansi t font-lock-fontified t face org-drawer wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 853 854 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4601) (undo-tree-id45 . -789) (undo-tree-id46 . 22) (undo-tree-id47 . -831) (undo-tree-id48 . -789) (undo-tree-id49 . -789) (undo-tree-id50 . -831) (undo-tree-id51 . -831) (undo-tree-id52 . -789) (nil jupyter-request #s(jupyter-org-request "e4c49770-1057-4c5b-a13d-33f8faebab0d" "execute_request" (:code "# Some basic data science imports
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.pipeline import Pipeline
import datetime

import time
import os

# Some gudhi imports for TDA
from tda_pipeline import DataSelector, RipsPersistence, LPNorm
from gudhi.representations import Landscape

# Some graphical imports for the web app
import ipywidgets as widgets
import plotly.graph_objects as go

# Some imports for ipywidgets
from ipywidgets import DatePicker, BoundedIntText, ToggleButton, Text, HBox, VBox
from IPython.display import display

# cf. data_generation.py
df = pd.read_csv('latest.csv', index_col=0)

# min, max and default start values taken from the dataset - Python 3.7+
min_value = datetime.date.fromisoformat(df.index[0])
max_value = datetime.date.fromisoformat(df.index[-1])

last_year = max_value - datetime.timedelta(days=250)

# Widgets
start = DatePicker(description='start', value = last_year)
end   = DatePicker(description='end', value = max_value)
window = BoundedIntText(value=50, min=10, max=100, step=1, description='Windows size')

button = ToggleButton(description='Compute', icon='cogs')

def nearest_str_date(items, pivot):
    return min(items, key=lambda str_date: abs(datetime.date.fromisoformat(str_date) - pivot))

def compute_Lp_norms():
    w=int(window.value)
    start_idx = df.index.get_loc(str(nearest_str_date(df.index, start.value - datetime.timedelta(days=w))))
    end_idx = df.index.get_loc(str(nearest_str_date(df.index, end.value)))
    # Some error management
    if start_idx == end_idx:
        raise IndexError('Start date must be different from end date.')
    if end_idx < w:
        end_idx = w
    if end_idx < start_idx:
        start_idx, end_idx = end_idx, start_idx

    pipe = Pipeline(
        [
            (\"data_sel\", DataSelector(start=start_idx, end=end_idx, w=w)),
            (\"rips_pers\", RipsPersistence(max_rips_dimension=2, max_persistence_dimension=2, only_this_dim=1, n_jobs=-1)),
            (\"landscape\", Landscape(resolution=1000)),
            (\"lpnorm\", LPNorm(n_jobs=-1)),
            (\"mms\", MinMaxScaler()),
        ]
    )

    start_chrono = float(time.time())
    #os.write(1, bytes(str(start_chrono),'UTF-8') + b'\\r\\n')
    L1L2mms = pipe.fit_transform(df)
    stop_chrono = float(time.time())
    #os.write(1, bytes(str(stop_chrono),'UTF-8') + b'\\r\\n')
    os.write(1, bytes(str(stop_chrono - start_chrono),'UTF-8') + b' sec. \\r\\n')
    
    l1l2df = pd.DataFrame({'date': df[start_idx+w:end_idx].index, 'L1': L1L2mms.transpose()[0], 'L2': L1L2mms.transpose()[1]})
    # Calculate the variance for the L norms
    j = 0

    for i in l1l2df.index:
        if j < w:
            k = 0
        else:
            k = j - w
        l1l2df.loc[i, 'L1_variance'] = np.var(l1l2df.iloc[k:j].L1)
        l1l2df.loc[i, 'L2_variance'] = np.var(l1l2df.iloc[k:j].L2)
        j += 1
        
    return l1l2df

def compute(args):
    l1l2df = compute_Lp_norms()
    fig.data[0]['x'] = l1l2df['date']
    fig.data[0]['y'] = l1l2df['L1']
    fig.data[1]['x'] = l1l2df['date']
    fig.data[1]['y'] = l1l2df['L2']
    fig.data[2]['x'] = l1l2df['date']
    fig.data[2]['y'] = l1l2df['L1_variance']
    fig.data[3]['x'] = l1l2df['date']
    fig.data[3]['y'] = l1l2df['L2_variance']
    
button.observe(compute, 'value')

# Layout
left_box = HBox([start, end, window, button])

fig = go.FigureWidget()

l1l2df = compute_Lp_norms()
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1'], mode='lines', name='L1')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2'], mode='lines', name='L2')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1_variance'], mode='lines', name='L1_variance')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2_variance'], mode='lines', name='L2_variance')
fig.update_xaxes(dtick=\"M1\", tickformat=\"%b\\n%Y\")
fig.layout.title.text = 'Lp norms'

display(left_box)
fig" :silent :json-false :store_history t :user_expressions #s(hash-table) :allow_stdin t :stop_on_error :json-false) #s(jupyter-org-client jupyter--clients (#<finalizer>) "idle" 48 (:status "ok" :protocol_version "5.3" :implementation "ipython" :implementation_version "8.29.0" :language_info (:name python :version "3.12.3" :mimetype "text/x-python" :codemirror_mode (:name "ipython" :version 3) :pygments_lexer "ipython3" :nbconvert_exporter "python" :file_extension ".py") :banner "Python 3.12.3 (main, Nov  6 2024, 18:32:19) [GCC 13.2.0]
Type 'copyright', 'credits' or 'license' for more information
IPython 8.29.0 -- An enhanced Interactive Python. Type '?' for help.
" :help_links [(:text "Python Reference" :url "https://docs.python.org/3.12") (:text "IPython Reference" :url "https://ipython.org/documentation.html") (:text "NumPy Reference" :url "https://docs.scipy.org/doc/numpy/reference/") (:text "SciPy Reference" :url "https://docs.scipy.org/doc/scipy/reference/") (:text "Matplotlib Reference" :url "https://matplotlib.org/contents.html") (:text "SymPy Reference" :url "http://docs.sympy.org/latest/index.html") (:text "pandas Reference" :url "https://pandas.pydata.org/pandas-docs/stable/")]) #s(hash-table test equal) (#[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [#[257 "\211:\203y \211\242\211\303\267\210\202w \243\304!\207\243\211:\205v \211\242\243\211:\205t \211\242\243\211:\205r \211\242\243\211:\205p \211\242\243\211?\205n \302\242\203H \305\306!\210\307\3101Z \211\300
	%0\207\210\300\301\242 \240\210\211\300
	%\262\266\202\266\202\266\202\266\202\207\311\207\211\312\267\202\233 \302\242\203\210 \305\313!\210\314\300\242!?\205\234 \300\301\242 \240\207\315\300\242!\207\311\207" [(#s(websocket open (:id "6bf9469b-83c6-4b8d-8e54-385f791b796f" :session #s(jupyter-session nil "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" nil)) #[257 "\300\301\240\207" [(nil) nil] 3 "

(fn WS)"] #[514 "\303!
>\204 \304\305\306D\"\210\211\307H\211\310>\2036 \311\303!
>\204( \304\305\306D\"\210\312H!\313\300\242\314\315B!\"\207\313\301\314\316\303!
>\204K \304\305\306D\"\210\307HD!\"\207" [(#7) #[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [jupyter-content (subscribers) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"] cl-struct-websocket-frame-tags type-of signal wrong-type-argument websocket-frame 1 (binary text) jupyter-read-plist-from-string 2 jupyter-run-with-state jupyter-publish message error] 11 "

(fn WS FRAME)"] #[257 "\300\242\203	 \301\302!\207\300\303\240\207" [(nil) error "Kernel connection could not be established" t] 3 "

(fn WS)"] websocket-default-error-handler nil nil nil "ws://localhost:8888/api/kernels/6bf9469b-83c6-4b8d-8e54-385f791b796f/channels?session_id=f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" nil nil #<process websocket to ws://localhost:8888/api/kernels/6bf9469b-83c6-4b8d-8e54-385f791b796f/channels?session_id=f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0> nil nil "wlYv8zPJwfSVI4dSA1dXwtQQaB4=" nil)) (#[0 "\305\304\303\306\307\304!\310\311\312\300\"\313\311\314\300\"\315\311\316\301\302#&
\207" [(nil) (#7) #[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [jupyter-content (subscribers) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"] "6bf9469b-83c6-4b8d-8e54-385f791b796f" #s(jupyter-server "http://localhost:8888" "ws://localhost:8888" t (:default "python3" :kernelspecs (#s(jupyter-kernelspec "python3" (:argv ["python" "-m" "ipykernel_launcher" "-f" "{connection_file}"] :env nil :display_name "Python 3 (ipykernel)" :language "python" :interrupt_mode "signal" :metadata (:debugger t)) nil)))) jupyter-api-kernel-websocket :custom-header-alist jupyter-api-auth-headers :on-open make-closure #[257 "\300\301\240\207" [V0 nil] 3 "

(fn WS)"] :on-close #[257 "\300\242\203	 \301\302!\207\300\303\240\207" [V0 error "Kernel connection could not be established" t] 3 "

(fn WS)"] :on-message #[514 "\303!
>\204 \304\305\306D\"\210\211\307H\211\310>\2036 \311\303!
>\204( \304\305\306D\"\210\312H!\313\300\242\314\315B!\"\207\313\301\314\316\303!
>\204K \304\305\306D\"\210\307HD!\"\207" [V0 V1 cl-struct-websocket-frame-tags type-of signal wrong-type-argument websocket-frame 1 (binary text) jupyter-read-plist-from-string 2 jupyter-run-with-state jupyter-publish message error] 11 "

(fn WS FRAME)"]] 14]) (nil) #s(hash-table test eq purecopy t data (message 14 send 20)) jupyter-content error "Attempting to send message to shutdown kernel" #[1285 "\301\242\242\302!>\204 \303\304\305D\"\210\211\306H\262\307\310\"\311\312\313
\314&\266\202\"\207" [cl-struct-websocket-tags websocket-send-text type-of signal wrong-type-argument websocket 2 plist-get :session jupyter-encode-raw-message :channel :msg-id :content] 18 "

(fn WS CHANNEL MSG-TYPE CONTENT MSG-ID)"] (websocket-closed) nil #s(hash-table test eq purecopy t data (start 127 stop 150)) "Can't start I/O connection to shutdown kernel" websocket-openp websocket-close] 18 "

(fn EVENT)"] (subscribers #[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [#[257 "\303\304!\211\204 \305!\207\306\301!
>\204 \307\310\311\301D\"\210\301\312H\2037 \211\313\230\203* \314C\207\300\315!\230\205C \301\"\207\300\315!\230\205C \301\"\207" ["4b09f712-ee03-45d1-be9a-996919662b66" #s(jupyter-org-request "4b09f712-ee03-45d1-be9a-996919662b66" "execute_request" (:code "# Some basic data science imports
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.pipeline import Pipeline
import datetime

import time
import os

# Some gudhi imports for TDA

import tda_pipeline
from tda_pipeline import DataSelector, RipsPersistence, LPNorm
from gudhi.representations import Landscape

# Some graphical imports for the web app
import ipywidgets as widgets
import plotly.graph_objects as go

# Some imports for ipywidgets
from ipywidgets import DatePicker, BoundedIntText, ToggleButton, Text, HBox, VBox
from IPython.display import display

# cf. data_generation.py
df = pd.read_csv('latest.csv', index_col=0)

# min, max and default start values taken from the dataset - Python 3.7+
min_value = datetime.date.fromisoformat(df.index[0])
max_value = datetime.date.fromisoformat(df.index[-1])

last_year = max_value - datetime.timedelta(days=250)

# Widgets
start = DatePicker(description='start', value = last_year)
end   = DatePicker(description='end', value = max_value)
window = BoundedIntText(value=50, min=10, max=100, step=1, description='Windows size')

button = ToggleButton(description='Compute', icon='cogs')

def nearest_str_date(items, pivot):
    return min(items, key=lambda str_date: abs(datetime.date.fromisoformat(str_date) - pivot))

def compute_Lp_norms():
    w=int(window.value)
    start_idx = df.index.get_loc(str(nearest_str_date(df.index, start.value - datetime.timedelta(days=w))))
    end_idx = df.index.get_loc(str(nearest_str_date(df.index, end.value)))
    # Some error management
    if start_idx == end_idx:
        raise IndexError('Start date must be different from end date.')
    if end_idx < w:
        end_idx = w
    if end_idx < start_idx:
        start_idx, end_idx = end_idx, start_idx

    pipe = Pipeline(
        [
            (\"data_sel\", DataSelector(start=start_idx, end=end_idx, w=w)),
            (\"rips_pers\", RipsPersistence(max_rips_dimension=2, max_persistence_dimension=2, only_this_dim=1, n_jobs=-1)),
            (\"landscape\", Landscape(resolution=1000)),
            (\"lpnorm\", LPNorm(n_jobs=-1)),
            (\"mms\", MinMaxScaler()),
        ]
    )

    start_chrono = float(time.time())
    #os.write(1, bytes(str(start_chrono),'UTF-8') + b'\\r\\n')
    L1L2mms = pipe.fit_transform(df)
    stop_chrono = float(time.time())
    #os.write(1, bytes(str(stop_chrono),'UTF-8') + b'\\r\\n')
    os.write(1, bytes(str(stop_chrono - start_chrono),'UTF-8') + b' sec. \\r\\n')
    
    l1l2df = pd.DataFrame({'date': df[start_idx+w:end_idx].index, 'L1': L1L2mms.transpose()[0], 'L2': L1L2mms.transpose()[1]})
    # Calculate the variance for the L norms
    j = 0

    for i in l1l2df.index:
        if j < w:
            k = 0
        else:
            k = j - w
        l1l2df.loc[i, 'L1_variance'] = np.var(l1l2df.iloc[k:j].L1)
        l1l2df.loc[i, 'L2_variance'] = np.var(l1l2df.iloc[k:j].L2)
        j += 1
        
    return l1l2df

def compute(args):
    l1l2df = compute_Lp_norms()
    fig.data[0]['x'] = l1l2df['date']
    fig.data[0]['y'] = l1l2df['L1']
    fig.data[1]['x'] = l1l2df['date']
    fig.data[1]['y'] = l1l2df['L2']
    fig.data[2]['x'] = l1l2df['date']
    fig.data[2]['y'] = l1l2df['L1_variance']
    fig.data[3]['x'] = l1l2df['date']
    fig.data[3]['y'] = l1l2df['L2_variance']
    
button.observe(compute, 'value')

# Layout
left_box = HBox([start, end, window, button])

fig = go.FigureWidget()

l1l2df = compute_Lp_norms()
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1'], mode='lines', name='L1')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2'], mode='lines', name='L2')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1_variance'], mode='lines', name='L1_variance')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2_variance'], mode='lines', name='L2_variance')
fig.update_xaxes(dtick=\"M1\", tickformat=\"%b\\n%Y\")
fig.layout.title.text = 'Lp norms'

display(left_box)
fig" :silent :json-false :store_history t :user_expressions #s(hash-table) :allow_stdin t :stop_on_error :json-false) #5 (26440 37591 495486 292000) t (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_530" :msg_type "execute_reply" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.530238Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_530" :msg_type "execute_reply" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata (:started "2024-11-28T15:57:11.501467Z" :dependencies_met t :engine "09acb503-cf8f-4eef-b1b4-159ead369f19" :status "error") :content (:status "error" :traceback ["[0;31m---------------------------------------------------------------------------[0m" "[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)" "Cell [0;32mIn[47], line 13[0m
[1;32m      9[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m
[1;32m     11[0m [38;5;66;03m# Some gudhi imports for TDA[39;00m
[0;32m---> 13[0m [38;5;28;01mimport[39;00m [38;5;21;01mtda_pipeline[39;00m
[1;32m     14[0m [38;5;28;01mfrom[39;00m [38;5;21;01mtda_pipeline[39;00m [38;5;28;01mimport[39;00m DataSelector, RipsPersistence, LPNorm
[1;32m     15[0m [38;5;28;01mfrom[39;00m [38;5;21;01mgudhi[39;00m[38;5;21;01m.[39;00m[38;5;21;01mrepresentations[39;00m [38;5;28;01mimport[39;00m Landscape
" "[0;31mModuleNotFoundError[0m: No module named 'tda_pipeline'"] :ename "ModuleNotFoundError" :evalue "No module named 'tda_pipeline'" :engine_info (:engine_uuid "09acb503-cf8f-4eef-b1b4-159ead369f19" :engine_id -1 :method "execute") :execution_count 47 :user_expressions nil :payload []) :buffers [] :channel "shell") ((:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_527" :msg_type "status" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.501001Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_527" :msg_type "status" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata nil :content (:execution_state "busy") :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_528" :msg_type "execute_input" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.501494Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_528" :msg_type "execute_input" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata nil :content (:code "# Some basic data science imports
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.pipeline import Pipeline
import datetime

import time
import os

# Some gudhi imports for TDA

import tda_pipeline
from tda_pipeline import DataSelector, RipsPersistence, LPNorm
from gudhi.representations import Landscape

# Some graphical imports for the web app
import ipywidgets as widgets
import plotly.graph_objects as go

# Some imports for ipywidgets
from ipywidgets import DatePicker, BoundedIntText, ToggleButton, Text, HBox, VBox
from IPython.display import display

# cf. data_generation.py
df = pd.read_csv('latest.csv', index_col=0)

# min, max and default start values taken from the dataset - Python 3.7+
min_value = datetime.date.fromisoformat(df.index[0])
max_value = datetime.date.fromisoformat(df.index[-1])

last_year = max_value - datetime.timedelta(days=250)

# Widgets
start = DatePicker(description='start', value = last_year)
end   = DatePicker(description='end', value = max_value)
window = BoundedIntText(value=50, min=10, max=100, step=1, description='Windows size')

button = ToggleButton(description='Compute', icon='cogs')

def nearest_str_date(items, pivot):
    return min(items, key=lambda str_date: abs(datetime.date.fromisoformat(str_date) - pivot))

def compute_Lp_norms():
    w=int(window.value)
    start_idx = df.index.get_loc(str(nearest_str_date(df.index, start.value - datetime.timedelta(days=w))))
    end_idx = df.index.get_loc(str(nearest_str_date(df.index, end.value)))
    # Some error management
    if start_idx == end_idx:
        raise IndexError('Start date must be different from end date.')
    if end_idx < w:
        end_idx = w
    if end_idx < start_idx:
        start_idx, end_idx = end_idx, start_idx

    pipe = Pipeline(
        [
            (\"data_sel\", DataSelector(start=start_idx, end=end_idx, w=w)),
            (\"rips_pers\", RipsPersistence(max_rips_dimension=2, max_persistence_dimension=2, only_this_dim=1, n_jobs=-1)),
            (\"landscape\", Landscape(resolution=1000)),
            (\"lpnorm\", LPNorm(n_jobs=-1)),
            (\"mms\", MinMaxScaler()),
        ]
    )

    start_chrono = float(time.time())
    #os.write(1, bytes(str(start_chrono),'UTF-8') + b'\\r\\n')
    L1L2mms = pipe.fit_transform(df)
    stop_chrono = float(time.time())
    #os.write(1, bytes(str(stop_chrono),'UTF-8') + b'\\r\\n')
    os.write(1, bytes(str(stop_chrono - start_chrono),'UTF-8') + b' sec. \\r\\n')
    
    l1l2df = pd.DataFrame({'date': df[start_idx+w:end_idx].index, 'L1': L1L2mms.transpose()[0], 'L2': L1L2mms.transpose()[1]})
    # Calculate the variance for the L norms
    j = 0

    for i in l1l2df.index:
        if j < w:
            k = 0
        else:
            k = j - w
        l1l2df.loc[i, 'L1_variance'] = np.var(l1l2df.iloc[k:j].L1)
        l1l2df.loc[i, 'L2_variance'] = np.var(l1l2df.iloc[k:j].L2)
        j += 1
        
    return l1l2df

def compute(args):
    l1l2df = compute_Lp_norms()
    fig.data[0]['x'] = l1l2df['date']
    fig.data[0]['y'] = l1l2df['L1']
    fig.data[1]['x'] = l1l2df['date']
    fig.data[1]['y'] = l1l2df['L2']
    fig.data[2]['x'] = l1l2df['date']
    fig.data[2]['y'] = l1l2df['L1_variance']
    fig.data[3]['x'] = l1l2df['date']
    fig.data[3]['y'] = l1l2df['L2_variance']
    
button.observe(compute, 'value')

# Layout
left_box = HBox([start, end, window, button])

fig = go.FigureWidget()

l1l2df = compute_Lp_norms()
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1'], mode='lines', name='L1')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2'], mode='lines', name='L2')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1_variance'], mode='lines', name='L1_variance')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2_variance'], mode='lines', name='L2_variance')
fig.update_xaxes(dtick=\"M1\", tickformat=\"%b\\n%Y\")
fig.layout.title.text = 'Lp norms'

display(left_box)
fig" :execution_count 47) :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_529" :msg_type "error" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.529306Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_529" :msg_type "error" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata nil :content (:traceback ["[0;31m---------------------------------------------------------------------------[0m" "[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)" "Cell [0;32mIn[47], line 13[0m
[1;32m      9[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m
[1;32m     11[0m [38;5;66;03m# Some gudhi imports for TDA[39;00m
[0;32m---> 13[0m [38;5;28;01mimport[39;00m [38;5;21;01mtda_pipeline[39;00m
[1;32m     14[0m [38;5;28;01mfrom[39;00m [38;5;21;01mtda_pipeline[39;00m [38;5;28;01mimport[39;00m DataSelector, RipsPersistence, LPNorm
[1;32m     15[0m [38;5;28;01mfrom[39;00m [38;5;21;01mgudhi[39;00m[38;5;21;01m.[39;00m[38;5;21;01mrepresentations[39;00m [38;5;28;01mimport[39;00m Landscape
" "[0;31mModuleNotFoundError[0m: No module named 'tda_pipeline'"] :ename "ModuleNotFoundError" :evalue "No module named 'tda_pipeline'") :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_531" :msg_type "status" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.530475Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_531" :msg_type "status" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata nil :content (:execution_state "idle") :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_530" :msg_type "execute_reply" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.530238Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_530" :msg_type "execute_reply" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata (:started "2024-11-28T15:57:11.501467Z" :dependencies_met t :engine "09acb503-cf8f-4eef-b1b4-159ead369f19" :status "error") :content (:status "error" :traceback ["[0;31m---------------------------------------------------------------------------[0m" "[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)" "Cell [0;32mIn[47], line 13[0m
[1;32m      9[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m
[1;32m     11[0m [38;5;66;03m# Some gudhi imports for TDA[39;00m
[0;32m---> 13[0m [38;5;28;01mimport[39;00m [38;5;21;01mtda_pipeline[39;00m
[1;32m     14[0m [38;5;28;01mfrom[39;00m [38;5;21;01mtda_pipeline[39;00m [38;5;28;01mimport[39;00m DataSelector, RipsPersistence, LPNorm
[1;32m     15[0m [38;5;28;01mfrom[39;00m [38;5;21;01mgudhi[39;00m[38;5;21;01m.[39;00m[38;5;21;01mrepresentations[39;00m [38;5;28;01mimport[39;00m Landscape
" "[0;31mModuleNotFoundError[0m: No module named 'tda_pipeline'"] :ename "ModuleNotFoundError" :evalue "No module named 'tda_pipeline'" :engine_info (:engine_uuid "09acb503-cf8f-4eef-b1b4-159ead369f19" :engine_id -1 :method "execute") :execution_count 47 :user_expressions nil :payload []) :buffers [] :channel "shell")) #10 nil value ((:colname-names) (:rowname-names) (:result-params "replace") (:result-type . value) (:results . "replace") (:exports . "code") (:kernel . "python3") (:session . "py") (:async . "yes") (:tangle . "no") (:hlines . "no") (:noweb . "no") (:cache . "no")) nil nil nil t nil #<marker at 659 in tda_web_app.org> t #<overlay in no buffer>) cl-struct-jupyter-request-tags #[514 "\301!>\204 \302\303\304D\"\210\305I\210\301!>\204# \302\303\304D\"\210\306\306HC\244I\210\307!\204C \310!\311\230\204C \310!\312\230\203W \301!>\204R \302\303\304D\"\210\313\314I\210\315\316BB!\207" [cl-struct-jupyter-request-tags type-of signal wrong-type-argument jupyter-request 7 8 jupyter-message-status-idle-p jupyter-message-type "kernel_info_reply" "shutdown_reply" 6 t jupyter-content :parent-request] 6 "

(fn REQ MSG)"] jupyter-message-type jupyter-content type-of signal wrong-type-argument jupyter-request 6 "status" unsubscribe jupyter-message-parent-id] 7 "

(fn MSG)"] (subscribers #[257 "\211:\203L \211\242\211\301\267\202G \243\211:\203& \211\242\243\211\204  \300!\207\302\303\"\207\302\303\"\207\243\211:\203B \211\243\211\204= \304\305\306\"\207\302\303\"\207\302\303\"\207\302\303\"\207\302\303\"\207" [#[257 "\301!\205 \302\303\"\304\300#\262\207" [#5 jupyter-message-type plist-get :channel jupyter-handle-message] 6 "

(fn MSG)"] #s(hash-table test eq purecopy t data (content 13 subscribe 43)) error "Unhandled subscriber content: %s" signal jupyter-subscribed-subscriber nil] 8 "

(fn SUB-CONTENT)"]) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"]) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"] #[257 "\211:\203L \211\242\211\301\267\202G \243\211:\203& \211\242\243\211\204  \300!\207\302\303\"\207\302\303\"\207\243\211:\203B \211\243\211\204= \304\305\306\"\207\302\303\"\207\302\303\"\207\302\303\"\207\302\303\"\207" [#[257 "\211\303\267\202\" \304\302!\207\305\302!\210\301\306\240\210\307\300\242!\205H \310\300\242!\207\311\302!\207\211:\205H \211\242\211\312=\205F \243\211:\205D \211\242\243\211?\205B \302!\266\202\262\262\207" [(#s(websocket open (:id "6bf9469b-83c6-4b8d-8e54-385f791b796f" :session #s(jupyter-session nil "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" nil)) #[257 "\300\301\240\207" [(nil) nil] 3 "

(fn WS)"] #[514 "\303!
>\204 \304\305\306D\"\210\211\307H\211\310>\2036 \311\303!
>\204( \304\305\306D\"\210\312H!\313\300\242\314\315B!\"\207\313\301\314\316\303!
>\204K \304\305\306D\"\210\307HD!\"\207" [(#[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [#[257 "\211:\203y \211\242\211\303\267\210\202w \243\304!\207\243\211:\205v \211\242\243\211:\205t \211\242\243\211:\205r \211\242\243\211:\205p \211\242\243\211?\205n \302\242\203H \305\306!\210\307\3101Z \211\300
	%0\207\210\300\301\242 \240\210\211\300
	%\262\266\202\266\202\266\202\266\202\207\311\207\211\312\267\202\233 \302\242\203\210 \305\313!\210\314\300\242!?\205\234 \300\301\242 \240\207\315\300\242!\207\311\207" [#11 (#[0 "\305\304\303\306\307\304!\310\311\312\300\"\313\311\314\300\"\315\311\316\301\302#&
\207" [(nil) #15 #[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [jupyter-content (subscribers) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"] "6bf9469b-83c6-4b8d-8e54-385f791b796f" #s(jupyter-server "http://localhost:8888" "ws://localhost:8888" t (:default "python3" :kernelspecs (#s(jupyter-kernelspec "python3" (:argv ["python" "-m" "ipykernel_launcher" "-f" "{connection_file}"] :env nil :display_name "Python 3 (ipykernel)" :language "python" :interrupt_mode "signal" :metadata (:debugger t)) nil)))) jupyter-api-kernel-websocket :custom-header-alist jupyter-api-auth-headers :on-open make-closure #[257 "\300\301\240\207" [V0 nil] 3 "

(fn WS)"] :on-close #[257 "\300\242\203	 \301\302!\207\300\303\240\207" [V0 error "Kernel connection could not be established" t] 3 "

(fn WS)"] :on-message #[514 "\303!
>\204 \304\305\306D\"\210\211\307H\211\310>\2036 \311\303!
>\204( \304\305\306D\"\210\312H!\313\300\242\314\315B!\"\207\313\301\314\316\303!
>\204K \304\305\306D\"\210\307HD!\"\207" [V0 V1 cl-struct-websocket-frame-tags type-of signal wrong-type-argument websocket-frame 1 (binary text) jupyter-read-plist-from-string 2 jupyter-run-with-state jupyter-publish message error] 11 "

(fn WS FRAME)"]] 14]) (nil) #s(hash-table test eq purecopy t data (message 14 send 20)) jupyter-content error "Attempting to send message to shutdown kernel" #[1285 "\301\242\242\302!>\204 \303\304\305D\"\210\211\306H\262\307\310\"\311\312\313
\314&\266\202\"\207" [cl-struct-websocket-tags websocket-send-text type-of signal wrong-type-argument websocket 2 plist-get :session jupyter-encode-raw-message :channel :msg-id :content] 18 "

(fn WS CHANNEL MSG-TYPE CONTENT MSG-ID)"] (websocket-closed) nil #s(hash-table test eq purecopy t data (start 127 stop 150)) "Can't start I/O connection to shutdown kernel" websocket-openp websocket-close] 18 "

(fn EVENT)"] (subscribers #[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [#[257 "\303\304!\211\204 \305!\207\306\301!
>\204 \307\310\311\301D\"\210\301\312H\2037 \211\313\230\203* \314C\207\300\315!\230\205C \301\"\207\300\315!\230\205C \301\"\207" ["4b09f712-ee03-45d1-be9a-996919662b66" #s(jupyter-org-request "4b09f712-ee03-45d1-be9a-996919662b66" "execute_request" (:code "# Some basic data science imports
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.pipeline import Pipeline
import datetime

import time
import os

# Some gudhi imports for TDA

import tda_pipeline
from tda_pipeline import DataSelector, RipsPersistence, LPNorm
from gudhi.representations import Landscape

# Some graphical imports for the web app
import ipywidgets as widgets
import plotly.graph_objects as go

# Some imports for ipywidgets
from ipywidgets import DatePicker, BoundedIntText, ToggleButton, Text, HBox, VBox
from IPython.display import display

# cf. data_generation.py
df = pd.read_csv('latest.csv', index_col=0)

# min, max and default start values taken from the dataset - Python 3.7+
min_value = datetime.date.fromisoformat(df.index[0])
max_value = datetime.date.fromisoformat(df.index[-1])

last_year = max_value - datetime.timedelta(days=250)

# Widgets
start = DatePicker(description='start', value = last_year)
end   = DatePicker(description='end', value = max_value)
window = BoundedIntText(value=50, min=10, max=100, step=1, description='Windows size')

button = ToggleButton(description='Compute', icon='cogs')

def nearest_str_date(items, pivot):
    return min(items, key=lambda str_date: abs(datetime.date.fromisoformat(str_date) - pivot))

def compute_Lp_norms():
    w=int(window.value)
    start_idx = df.index.get_loc(str(nearest_str_date(df.index, start.value - datetime.timedelta(days=w))))
    end_idx = df.index.get_loc(str(nearest_str_date(df.index, end.value)))
    # Some error management
    if start_idx == end_idx:
        raise IndexError('Start date must be different from end date.')
    if end_idx < w:
        end_idx = w
    if end_idx < start_idx:
        start_idx, end_idx = end_idx, start_idx

    pipe = Pipeline(
        [
            (\"data_sel\", DataSelector(start=start_idx, end=end_idx, w=w)),
            (\"rips_pers\", RipsPersistence(max_rips_dimension=2, max_persistence_dimension=2, only_this_dim=1, n_jobs=-1)),
            (\"landscape\", Landscape(resolution=1000)),
            (\"lpnorm\", LPNorm(n_jobs=-1)),
            (\"mms\", MinMaxScaler()),
        ]
    )

    start_chrono = float(time.time())
    #os.write(1, bytes(str(start_chrono),'UTF-8') + b'\\r\\n')
    L1L2mms = pipe.fit_transform(df)
    stop_chrono = float(time.time())
    #os.write(1, bytes(str(stop_chrono),'UTF-8') + b'\\r\\n')
    os.write(1, bytes(str(stop_chrono - start_chrono),'UTF-8') + b' sec. \\r\\n')
    
    l1l2df = pd.DataFrame({'date': df[start_idx+w:end_idx].index, 'L1': L1L2mms.transpose()[0], 'L2': L1L2mms.transpose()[1]})
    # Calculate the variance for the L norms
    j = 0

    for i in l1l2df.index:
        if j < w:
            k = 0
        else:
            k = j - w
        l1l2df.loc[i, 'L1_variance'] = np.var(l1l2df.iloc[k:j].L1)
        l1l2df.loc[i, 'L2_variance'] = np.var(l1l2df.iloc[k:j].L2)
        j += 1
        
    return l1l2df

def compute(args):
    l1l2df = compute_Lp_norms()
    fig.data[0]['x'] = l1l2df['date']
    fig.data[0]['y'] = l1l2df['L1']
    fig.data[1]['x'] = l1l2df['date']
    fig.data[1]['y'] = l1l2df['L2']
    fig.data[2]['x'] = l1l2df['date']
    fig.data[2]['y'] = l1l2df['L1_variance']
    fig.data[3]['x'] = l1l2df['date']
    fig.data[3]['y'] = l1l2df['L2_variance']
    
button.observe(compute, 'value')

# Layout
left_box = HBox([start, end, window, button])

fig = go.FigureWidget()

l1l2df = compute_Lp_norms()
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1'], mode='lines', name='L1')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2'], mode='lines', name='L2')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1_variance'], mode='lines', name='L1_variance')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2_variance'], mode='lines', name='L2_variance')
fig.update_xaxes(dtick=\"M1\", tickformat=\"%b\\n%Y\")
fig.layout.title.text = 'Lp norms'

display(left_box)
fig" :silent :json-false :store_history t :user_expressions #s(hash-table) :allow_stdin t :stop_on_error :json-false) #5 (26440 37591 495486 292000) t (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_530" :msg_type "execute_reply" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.530238Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_530" :msg_type "execute_reply" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata (:started "2024-11-28T15:57:11.501467Z" :dependencies_met t :engine "09acb503-cf8f-4eef-b1b4-159ead369f19" :status "error") :content (:status "error" :traceback ["[0;31m---------------------------------------------------------------------------[0m" "[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)" "Cell [0;32mIn[47], line 13[0m
[1;32m      9[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m
[1;32m     11[0m [38;5;66;03m# Some gudhi imports for TDA[39;00m
[0;32m---> 13[0m [38;5;28;01mimport[39;00m [38;5;21;01mtda_pipeline[39;00m
[1;32m     14[0m [38;5;28;01mfrom[39;00m [38;5;21;01mtda_pipeline[39;00m [38;5;28;01mimport[39;00m DataSelector, RipsPersistence, LPNorm
[1;32m     15[0m [38;5;28;01mfrom[39;00m [38;5;21;01mgudhi[39;00m[38;5;21;01m.[39;00m[38;5;21;01mrepresentations[39;00m [38;5;28;01mimport[39;00m Landscape
" "[0;31mModuleNotFoundError[0m: No module named 'tda_pipeline'"] :ename "ModuleNotFoundError" :evalue "No module named 'tda_pipeline'" :engine_info (:engine_uuid "09acb503-cf8f-4eef-b1b4-159ead369f19" :engine_id -1 :method "execute") :execution_count 47 :user_expressions nil :payload []) :buffers [] :channel "shell") ((:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_527" :msg_type "status" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.501001Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_527" :msg_type "status" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata nil :content (:execution_state "busy") :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_528" :msg_type "execute_input" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.501494Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_528" :msg_type "execute_input" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata nil :content (:code "# Some basic data science imports
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.pipeline import Pipeline
import datetime

import time
import os

# Some gudhi imports for TDA

import tda_pipeline
from tda_pipeline import DataSelector, RipsPersistence, LPNorm
from gudhi.representations import Landscape

# Some graphical imports for the web app
import ipywidgets as widgets
import plotly.graph_objects as go

# Some imports for ipywidgets
from ipywidgets import DatePicker, BoundedIntText, ToggleButton, Text, HBox, VBox
from IPython.display import display

# cf. data_generation.py
df = pd.read_csv('latest.csv', index_col=0)

# min, max and default start values taken from the dataset - Python 3.7+
min_value = datetime.date.fromisoformat(df.index[0])
max_value = datetime.date.fromisoformat(df.index[-1])

last_year = max_value - datetime.timedelta(days=250)

# Widgets
start = DatePicker(description='start', value = last_year)
end   = DatePicker(description='end', value = max_value)
window = BoundedIntText(value=50, min=10, max=100, step=1, description='Windows size')

button = ToggleButton(description='Compute', icon='cogs')

def nearest_str_date(items, pivot):
    return min(items, key=lambda str_date: abs(datetime.date.fromisoformat(str_date) - pivot))

def compute_Lp_norms():
    w=int(window.value)
    start_idx = df.index.get_loc(str(nearest_str_date(df.index, start.value - datetime.timedelta(days=w))))
    end_idx = df.index.get_loc(str(nearest_str_date(df.index, end.value)))
    # Some error management
    if start_idx == end_idx:
        raise IndexError('Start date must be different from end date.')
    if end_idx < w:
        end_idx = w
    if end_idx < start_idx:
        start_idx, end_idx = end_idx, start_idx

    pipe = Pipeline(
        [
            (\"data_sel\", DataSelector(start=start_idx, end=end_idx, w=w)),
            (\"rips_pers\", RipsPersistence(max_rips_dimension=2, max_persistence_dimension=2, only_this_dim=1, n_jobs=-1)),
            (\"landscape\", Landscape(resolution=1000)),
            (\"lpnorm\", LPNorm(n_jobs=-1)),
            (\"mms\", MinMaxScaler()),
        ]
    )

    start_chrono = float(time.time())
    #os.write(1, bytes(str(start_chrono),'UTF-8') + b'\\r\\n')
    L1L2mms = pipe.fit_transform(df)
    stop_chrono = float(time.time())
    #os.write(1, bytes(str(stop_chrono),'UTF-8') + b'\\r\\n')
    os.write(1, bytes(str(stop_chrono - start_chrono),'UTF-8') + b' sec. \\r\\n')
    
    l1l2df = pd.DataFrame({'date': df[start_idx+w:end_idx].index, 'L1': L1L2mms.transpose()[0], 'L2': L1L2mms.transpose()[1]})
    # Calculate the variance for the L norms
    j = 0

    for i in l1l2df.index:
        if j < w:
            k = 0
        else:
            k = j - w
        l1l2df.loc[i, 'L1_variance'] = np.var(l1l2df.iloc[k:j].L1)
        l1l2df.loc[i, 'L2_variance'] = np.var(l1l2df.iloc[k:j].L2)
        j += 1
        
    return l1l2df

def compute(args):
    l1l2df = compute_Lp_norms()
    fig.data[0]['x'] = l1l2df['date']
    fig.data[0]['y'] = l1l2df['L1']
    fig.data[1]['x'] = l1l2df['date']
    fig.data[1]['y'] = l1l2df['L2']
    fig.data[2]['x'] = l1l2df['date']
    fig.data[2]['y'] = l1l2df['L1_variance']
    fig.data[3]['x'] = l1l2df['date']
    fig.data[3]['y'] = l1l2df['L2_variance']
    
button.observe(compute, 'value')

# Layout
left_box = HBox([start, end, window, button])

fig = go.FigureWidget()

l1l2df = compute_Lp_norms()
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1'], mode='lines', name='L1')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2'], mode='lines', name='L2')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1_variance'], mode='lines', name='L1_variance')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2_variance'], mode='lines', name='L2_variance')
fig.update_xaxes(dtick=\"M1\", tickformat=\"%b\\n%Y\")
fig.layout.title.text = 'Lp norms'

display(left_box)
fig" :execution_count 47) :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_529" :msg_type "error" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.529306Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_529" :msg_type "error" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata nil :content (:traceback ["[0;31m---------------------------------------------------------------------------[0m" "[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)" "Cell [0;32mIn[47], line 13[0m
[1;32m      9[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m
[1;32m     11[0m [38;5;66;03m# Some gudhi imports for TDA[39;00m
[0;32m---> 13[0m [38;5;28;01mimport[39;00m [38;5;21;01mtda_pipeline[39;00m
[1;32m     14[0m [38;5;28;01mfrom[39;00m [38;5;21;01mtda_pipeline[39;00m [38;5;28;01mimport[39;00m DataSelector, RipsPersistence, LPNorm
[1;32m     15[0m [38;5;28;01mfrom[39;00m [38;5;21;01mgudhi[39;00m[38;5;21;01m.[39;00m[38;5;21;01mrepresentations[39;00m [38;5;28;01mimport[39;00m Landscape
" "[0;31mModuleNotFoundError[0m: No module named 'tda_pipeline'"] :ename "ModuleNotFoundError" :evalue "No module named 'tda_pipeline'") :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_531" :msg_type "status" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.530475Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_531" :msg_type "status" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata nil :content (:execution_state "idle") :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_530" :msg_type "execute_reply" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.530238Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_530" :msg_type "execute_reply" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata (:started "2024-11-28T15:57:11.501467Z" :dependencies_met t :engine "09acb503-cf8f-4eef-b1b4-159ead369f19" :status "error") :content (:status "error" :traceback ["[0;31m---------------------------------------------------------------------------[0m" "[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)" "Cell [0;32mIn[47], line 13[0m
[1;32m      9[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m
[1;32m     11[0m [38;5;66;03m# Some gudhi imports for TDA[39;00m
[0;32m---> 13[0m [38;5;28;01mimport[39;00m [38;5;21;01mtda_pipeline[39;00m
[1;32m     14[0m [38;5;28;01mfrom[39;00m [38;5;21;01mtda_pipeline[39;00m [38;5;28;01mimport[39;00m DataSelector, RipsPersistence, LPNorm
[1;32m     15[0m [38;5;28;01mfrom[39;00m [38;5;21;01mgudhi[39;00m[38;5;21;01m.[39;00m[38;5;21;01mrepresentations[39;00m [38;5;28;01mimport[39;00m Landscape
" "[0;31mModuleNotFoundError[0m: No module named 'tda_pipeline'"] :ename "ModuleNotFoundError" :evalue "No module named 'tda_pipeline'" :engine_info (:engine_uuid "09acb503-cf8f-4eef-b1b4-159ead369f19" :engine_id -1 :method "execute") :execution_count 47 :user_expressions nil :payload []) :buffers [] :channel "shell")) #19 nil value ((:colname-names) (:rowname-names) (:result-params "replace") (:result-type . value) (:results . "replace") (:exports . "code") (:kernel . "python3") (:session . "py") (:async . "yes") (:tangle . "no") (:hlines . "no") (:noweb . "no") (:cache . "no")) nil nil nil t nil #<marker at 659 in tda_web_app.org> t #<overlay in no buffer>) cl-struct-jupyter-request-tags #[514 "\301!>\204 \302\303\304D\"\210\305I\210\301!>\204# \302\303\304D\"\210\306\306HC\244I\210\307!\204C \310!\311\230\204C \310!\312\230\203W \301!>\204R \302\303\304D\"\210\313\314I\210\315\316BB!\207" [cl-struct-jupyter-request-tags type-of signal wrong-type-argument jupyter-request 7 8 jupyter-message-status-idle-p jupyter-message-type "kernel_info_reply" "shutdown_reply" 6 t jupyter-content :parent-request] 6 "

(fn REQ MSG)"] jupyter-message-type jupyter-content type-of signal wrong-type-argument jupyter-request 6 "status" unsubscribe jupyter-message-parent-id] 7 "

(fn MSG)"] (subscribers #[257 "\211:\203L \211\242\211\301\267\202G \243\211:\203& \211\242\243\211\204  \300!\207\302\303\"\207\302\303\"\207\243\211:\203B \211\243\211\204= \304\305\306\"\207\302\303\"\207\302\303\"\207\302\303\"\207\302\303\"\207" [#[257 "\301!\205 \302\303\"\304\300#\262\207" [#5 jupyter-message-type plist-get :channel jupyter-handle-message] 6 "

(fn MSG)"] #s(hash-table test eq purecopy t data (content 13 subscribe 43)) error "Unhandled subscriber content: %s" signal jupyter-subscribed-subscriber nil] 8 "

(fn SUB-CONTENT)"]) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"]) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"]) #[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [jupyter-content (subscribers) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"] cl-struct-websocket-frame-tags type-of signal wrong-type-argument websocket-frame 1 (binary text) jupyter-read-plist-from-string 2 jupyter-run-with-state jupyter-publish message error] 11 "

(fn WS FRAME)"] #[257 "\300\242\203	 \301\302!\207\300\303\240\207" [(nil) error "Kernel connection could not be established" t] 3 "

(fn WS)"] websocket-default-error-handler nil nil nil "ws://localhost:8888/api/kernels/6bf9469b-83c6-4b8d-8e54-385f791b796f/channels?session_id=f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" nil nil #<process websocket to ws://localhost:8888/api/kernels/6bf9469b-83c6-4b8d-8e54-385f791b796f/channels?session_id=f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0> nil nil "wlYv8zPJwfSVI4dSA1dXwtQQaB4=" nil)) (nil) #s(jupyter-server-kernel #s(jupyter-kernelspec "python3" (:argv ["python" "-m" "ipykernel_launcher" "-f" "{connection_file}"] :env nil :display_name "Python 3 (ipykernel)" :language "python" :interrupt_mode "signal" :metadata (:debugger t)) nil) #s(jupyter-session nil "6a8d255a-2f17-46fd-8af1-0c55b94d0c7b" nil) #s(jupyter-server "http://localhost:8888" "ws://localhost:8888" t (:default "python3" :kernelspecs (#s(jupyter-kernelspec "python3" (:argv ["python" "-m" "ipykernel_launcher" "-f" "{connection_file}"] :env nil :display_name "Python 3 (ipykernel)" :language "python" :interrupt_mode "signal" :metadata (:debugger t)) nil)))) "6bf9469b-83c6-4b8d-8e54-385f791b796f") #s(hash-table test eq purecopy t data (interrupt 6 shutdown 10 restart 30)) jupyter-interrupt jupyter-shutdown t websocket-openp websocket-close jupyter-restart action] 7 "

(fn ACTION)"] #s(hash-table test eq purecopy t data (content 13 subscribe 43)) error "Unhandled subscriber content: %s" signal jupyter-subscribed-subscriber nil] 8 "

(fn SUB-CONTENT)"]) #<buffer  *jupyter-kernel-client*> nil "null" nil #<buffer *jupyter-repl[python 3.12.3]-py*> nil nil nil) (26440 37257 485796 439000) t (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_479" :msg_type "execute_reply" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:51:37.531994Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_479" :msg_type "execute_reply" :parent_header (:msg_id "e4c49770-1057-4c5b-a13d-33f8faebab0d" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:51:37.486713Z") :metadata (:started "2024-11-28T15:51:37.492242Z" :dependencies_met t :engine "09acb503-cf8f-4eef-b1b4-159ead369f19" :status "error") :content (:status "error" :traceback ["[0;31m---------------------------------------------------------------------------[0m" "[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)" "Cell [0;32mIn[44], line 12[0m
[1;32m      9[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m
[1;32m     11[0m [38;5;66;03m# Some gudhi imports for TDA[39;00m
[0;32m---> 12[0m [38;5;28;01mfrom[39;00m [38;5;21;01mtda_pipeline[39;00m [38;5;28;01mimport[39;00m DataSelector, RipsPersistence, LPNorm
[1;32m     13[0m [38;5;28;01mfrom[39;00m [38;5;21;01mgudhi[39;00m[38;5;21;01m.[39;00m[38;5;21;01mrepresentations[39;00m [38;5;28;01mimport[39;00m Landscape
[1;32m     15[0m [38;5;66;03m# Some graphical imports for the web app[39;00m
" "[0;31mModuleNotFoundError[0m: No module named 'tda_pipeline'"] :ename "ModuleNotFoundError" :evalue "No module named 'tda_pipeline'" :engine_info (:engine_uuid "09acb503-cf8f-4eef-b1b4-159ead369f19" :engine_id -1 :method "execute") :execution_count 44 :user_expressions nil :payload []) :buffers [] :channel "shell") ((:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_476" :msg_type "status" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:51:37.491872Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_476" :msg_type "status" :parent_header (:msg_id "e4c49770-1057-4c5b-a13d-33f8faebab0d" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:51:37.486713Z") :metadata nil :content (:execution_state "busy") :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_477" :msg_type "execute_input" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:51:37.492271Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_477" :msg_type "execute_input" :parent_header (:msg_id "e4c49770-1057-4c5b-a13d-33f8faebab0d" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:51:37.486713Z") :metadata nil :content (:code "# Some basic data science imports
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.pipeline import Pipeline
import datetime

import time
import os

# Some gudhi imports for TDA
from tda_pipeline import DataSelector, RipsPersistence, LPNorm
from gudhi.representations import Landscape

# Some graphical imports for the web app
import ipywidgets as widgets
import plotly.graph_objects as go

# Some imports for ipywidgets
from ipywidgets import DatePicker, BoundedIntText, ToggleButton, Text, HBox, VBox
from IPython.display import display

# cf. data_generation.py
df = pd.read_csv('latest.csv', index_col=0)

# min, max and default start values taken from the dataset - Python 3.7+
min_value = datetime.date.fromisoformat(df.index[0])
max_value = datetime.date.fromisoformat(df.index[-1])

last_year = max_value - datetime.timedelta(days=250)

# Widgets
start = DatePicker(description='start', value = last_year)
end   = DatePicker(description='end', value = max_value)
window = BoundedIntText(value=50, min=10, max=100, step=1, description='Windows size')

button = ToggleButton(description='Compute', icon='cogs')

def nearest_str_date(items, pivot):
    return min(items, key=lambda str_date: abs(datetime.date.fromisoformat(str_date) - pivot))

def compute_Lp_norms():
    w=int(window.value)
    start_idx = df.index.get_loc(str(nearest_str_date(df.index, start.value - datetime.timedelta(days=w))))
    end_idx = df.index.get_loc(str(nearest_str_date(df.index, end.value)))
    # Some error management
    if start_idx == end_idx:
        raise IndexError('Start date must be different from end date.')
    if end_idx < w:
        end_idx = w
    if end_idx < start_idx:
        start_idx, end_idx = end_idx, start_idx

    pipe = Pipeline(
        [
            (\"data_sel\", DataSelector(start=start_idx, end=end_idx, w=w)),
            (\"rips_pers\", RipsPersistence(max_rips_dimension=2, max_persistence_dimension=2, only_this_dim=1, n_jobs=-1)),
            (\"landscape\", Landscape(resolution=1000)),
            (\"lpnorm\", LPNorm(n_jobs=-1)),
            (\"mms\", MinMaxScaler()),
        ]
    )

    start_chrono = float(time.time())
    #os.write(1, bytes(str(start_chrono),'UTF-8') + b'\\r\\n')
    L1L2mms = pipe.fit_transform(df)
    stop_chrono = float(time.time())
    #os.write(1, bytes(str(stop_chrono),'UTF-8') + b'\\r\\n')
    os.write(1, bytes(str(stop_chrono - start_chrono),'UTF-8') + b' sec. \\r\\n')
    
    l1l2df = pd.DataFrame({'date': df[start_idx+w:end_idx].index, 'L1': L1L2mms.transpose()[0], 'L2': L1L2mms.transpose()[1]})
    # Calculate the variance for the L norms
    j = 0

    for i in l1l2df.index:
        if j < w:
            k = 0
        else:
            k = j - w
        l1l2df.loc[i, 'L1_variance'] = np.var(l1l2df.iloc[k:j].L1)
        l1l2df.loc[i, 'L2_variance'] = np.var(l1l2df.iloc[k:j].L2)
        j += 1
        
    return l1l2df

def compute(args):
    l1l2df = compute_Lp_norms()
    fig.data[0]['x'] = l1l2df['date']
    fig.data[0]['y'] = l1l2df['L1']
    fig.data[1]['x'] = l1l2df['date']
    fig.data[1]['y'] = l1l2df['L2']
    fig.data[2]['x'] = l1l2df['date']
    fig.data[2]['y'] = l1l2df['L1_variance']
    fig.data[3]['x'] = l1l2df['date']
    fig.data[3]['y'] = l1l2df['L2_variance']
    
button.observe(compute, 'value')

# Layout
left_box = HBox([start, end, window, button])

fig = go.FigureWidget()

l1l2df = compute_Lp_norms()
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1'], mode='lines', name='L1')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2'], mode='lines', name='L2')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1_variance'], mode='lines', name='L1_variance')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2_variance'], mode='lines', name='L2_variance')
fig.update_xaxes(dtick=\"M1\", tickformat=\"%b\\n%Y\")
fig.layout.title.text = 'Lp norms'

display(left_box)
fig" :execution_count 44) :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_478" :msg_type "error" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:51:37.530999Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_478" :msg_type "error" :parent_header (:msg_id "e4c49770-1057-4c5b-a13d-33f8faebab0d" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:51:37.486713Z") :metadata nil :content (:traceback ["[0;31m---------------------------------------------------------------------------[0m" "[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)" "Cell [0;32mIn[44], line 12[0m
[1;32m      9[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m
[1;32m     11[0m [38;5;66;03m# Some gudhi imports for TDA[39;00m
[0;32m---> 12[0m [38;5;28;01mfrom[39;00m [38;5;21;01mtda_pipeline[39;00m [38;5;28;01mimport[39;00m DataSelector, RipsPersistence, LPNorm
[1;32m     13[0m [38;5;28;01mfrom[39;00m [38;5;21;01mgudhi[39;00m[38;5;21;01m.[39;00m[38;5;21;01mrepresentations[39;00m [38;5;28;01mimport[39;00m Landscape
[1;32m     15[0m [38;5;66;03m# Some graphical imports for the web app[39;00m
" "[0;31mModuleNotFoundError[0m: No module named 'tda_pipeline'"] :ename "ModuleNotFoundError" :evalue "No module named 'tda_pipeline'") :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_480" :msg_type "status" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:51:37.532388Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_480" :msg_type "status" :parent_header (:msg_id "e4c49770-1057-4c5b-a13d-33f8faebab0d" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:51:37.486713Z") :metadata nil :content (:execution_state "idle") :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_479" :msg_type "execute_reply" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:51:37.531994Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_479" :msg_type "execute_reply" :parent_header (:msg_id "e4c49770-1057-4c5b-a13d-33f8faebab0d" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:51:37.486713Z") :metadata (:started "2024-11-28T15:51:37.492242Z" :dependencies_met t :engine "09acb503-cf8f-4eef-b1b4-159ead369f19" :status "error") :content (:status "error" :traceback ["[0;31m---------------------------------------------------------------------------[0m" "[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)" "Cell [0;32mIn[44], line 12[0m
[1;32m      9[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m
[1;32m     11[0m [38;5;66;03m# Some gudhi imports for TDA[39;00m
[0;32m---> 12[0m [38;5;28;01mfrom[39;00m [38;5;21;01mtda_pipeline[39;00m [38;5;28;01mimport[39;00m DataSelector, RipsPersistence, LPNorm
[1;32m     13[0m [38;5;28;01mfrom[39;00m [38;5;21;01mgudhi[39;00m[38;5;21;01m.[39;00m[38;5;21;01mrepresentations[39;00m [38;5;28;01mimport[39;00m Landscape
[1;32m     15[0m [38;5;66;03m# Some graphical imports for the web app[39;00m
" "[0;31mModuleNotFoundError[0m: No module named 'tda_pipeline'"] :ename "ModuleNotFoundError" :evalue "No module named 'tda_pipeline'" :engine_info (:engine_uuid "09acb503-cf8f-4eef-b1b4-159ead369f19" :engine_id -1 :method "execute") :execution_count 44 :user_expressions nil :payload []) :buffers [] :channel "shell")) #[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [#[257 "\303\304!\211\204 \305!\207\306\301!
>\204 \307\310\311\301D\"\210\301\312H\2037 \211\313\230\203* \314C\207\300\315!\230\205C \301\"\207\300\315!\230\205C \301\"\207" ["e4c49770-1057-4c5b-a13d-33f8faebab0d" #4 cl-struct-jupyter-request-tags #[514 "\301!>\204 \302\303\304D\"\210\305I\210\301!>\204# \302\303\304D\"\210\306\306HC\244I\210\307!\204C \310!\311\230\204C \310!\312\230\203W \301!>\204R \302\303\304D\"\210\313\314I\210\315\316BB!\207" [cl-struct-jupyter-request-tags type-of signal wrong-type-argument jupyter-request 7 8 jupyter-message-status-idle-p jupyter-message-type "kernel_info_reply" "shutdown_reply" 6 t jupyter-content :parent-request] 6 "

(fn REQ MSG)"] jupyter-message-type jupyter-content type-of signal wrong-type-argument jupyter-request 6 "status" unsubscribe jupyter-message-parent-id] 7 "

(fn MSG)"] (subscribers #[257 "\211:\203L \211\242\211\301\267\202G \243\211:\203& \211\242\243\211\204  \300!\207\302\303\"\207\302\303\"\207\243\211:\203B \211\243\211\204= \304\305\306\"\207\302\303\"\207\302\303\"\207\302\303\"\207\302\303\"\207" [#[257 "\301!\205 \302\303\"\304\300#\262\207" [#s(jupyter-org-client jupyter--clients (#<finalizer>) "idle" 48 (:status "ok" :protocol_version "5.3" :implementation "ipython" :implementation_version "8.29.0" :language_info (:name python :version "3.12.3" :mimetype "text/x-python" :codemirror_mode (:name "ipython" :version 3) :pygments_lexer "ipython3" :nbconvert_exporter "python" :file_extension ".py") :banner "Python 3.12.3 (main, Nov  6 2024, 18:32:19) [GCC 13.2.0]
Type 'copyright', 'credits' or 'license' for more information
IPython 8.29.0 -- An enhanced Interactive Python. Type '?' for help.
" :help_links [(:text "Python Reference" :url "https://docs.python.org/3.12") (:text "IPython Reference" :url "https://ipython.org/documentation.html") (:text "NumPy Reference" :url "https://docs.scipy.org/doc/numpy/reference/") (:text "SciPy Reference" :url "https://docs.scipy.org/doc/scipy/reference/") (:text "Matplotlib Reference" :url "https://matplotlib.org/contents.html") (:text "SymPy Reference" :url "http://docs.sympy.org/latest/index.html") (:text "pandas Reference" :url "https://pandas.pydata.org/pandas-docs/stable/")]) #s(hash-table test equal) (#[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [#[257 "\211:\203y \211\242\211\303\267\210\202w \243\304!\207\243\211:\205v \211\242\243\211:\205t \211\242\243\211:\205r \211\242\243\211:\205p \211\242\243\211?\205n \302\242\203H \305\306!\210\307\3101Z \211\300
	%0\207\210\300\301\242 \240\210\211\300
	%\262\266\202\266\202\266\202\266\202\207\311\207\211\312\267\202\233 \302\242\203\210 \305\313!\210\314\300\242!?\205\234 \300\301\242 \240\207\315\300\242!\207\311\207" [(#s(websocket open (:id "6bf9469b-83c6-4b8d-8e54-385f791b796f" :session #s(jupyter-session nil "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" nil)) #[257 "\300\301\240\207" [(nil) nil] 3 "

(fn WS)"] #[514 "\303!
>\204 \304\305\306D\"\210\211\307H\211\310>\2036 \311\303!
>\204( \304\305\306D\"\210\312H!\313\300\242\314\315B!\"\207\313\301\314\316\303!
>\204K \304\305\306D\"\210\307HD!\"\207" [(#14) #[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [jupyter-content (subscribers) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"] cl-struct-websocket-frame-tags type-of signal wrong-type-argument websocket-frame 1 (binary text) jupyter-read-plist-from-string 2 jupyter-run-with-state jupyter-publish message error] 11 "

(fn WS FRAME)"] #[257 "\300\242\203	 \301\302!\207\300\303\240\207" [(nil) error "Kernel connection could not be established" t] 3 "

(fn WS)"] websocket-default-error-handler nil nil nil "ws://localhost:8888/api/kernels/6bf9469b-83c6-4b8d-8e54-385f791b796f/channels?session_id=f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" nil nil #<process websocket to ws://localhost:8888/api/kernels/6bf9469b-83c6-4b8d-8e54-385f791b796f/channels?session_id=f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0> nil nil "wlYv8zPJwfSVI4dSA1dXwtQQaB4=" nil)) (#[0 "\305\304\303\306\307\304!\310\311\312\300\"\313\311\314\300\"\315\311\316\301\302#&
\207" [(nil) (#14) #[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [jupyter-content (subscribers) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"] "6bf9469b-83c6-4b8d-8e54-385f791b796f" #s(jupyter-server "http://localhost:8888" "ws://localhost:8888" t (:default "python3" :kernelspecs (#s(jupyter-kernelspec "python3" (:argv ["python" "-m" "ipykernel_launcher" "-f" "{connection_file}"] :env nil :display_name "Python 3 (ipykernel)" :language "python" :interrupt_mode "signal" :metadata (:debugger t)) nil)))) jupyter-api-kernel-websocket :custom-header-alist jupyter-api-auth-headers :on-open make-closure #[257 "\300\301\240\207" [V0 nil] 3 "

(fn WS)"] :on-close #[257 "\300\242\203	 \301\302!\207\300\303\240\207" [V0 error "Kernel connection could not be established" t] 3 "

(fn WS)"] :on-message #[514 "\303!
>\204 \304\305\306D\"\210\211\307H\211\310>\2036 \311\303!
>\204( \304\305\306D\"\210\312H!\313\300\242\314\315B!\"\207\313\301\314\316\303!
>\204K \304\305\306D\"\210\307HD!\"\207" [V0 V1 cl-struct-websocket-frame-tags type-of signal wrong-type-argument websocket-frame 1 (binary text) jupyter-read-plist-from-string 2 jupyter-run-with-state jupyter-publish message error] 11 "

(fn WS FRAME)"]] 14]) (nil) #s(hash-table test eq purecopy t data (message 14 send 20)) jupyter-content error "Attempting to send message to shutdown kernel" #[1285 "\301\242\242\302!>\204 \303\304\305D\"\210\211\306H\262\307\310\"\311\312\313
\314&\266\202\"\207" [cl-struct-websocket-tags websocket-send-text type-of signal wrong-type-argument websocket 2 plist-get :session jupyter-encode-raw-message :channel :msg-id :content] 18 "

(fn WS CHANNEL MSG-TYPE CONTENT MSG-ID)"] (websocket-closed) nil #s(hash-table test eq purecopy t data (start 127 stop 150)) "Can't start I/O connection to shutdown kernel" websocket-openp websocket-close] 18 "

(fn EVENT)"] (subscribers #[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [#[257 "\303\304!\211\204 \305!\207\306\301!
>\204 \307\310\311\301D\"\210\301\312H\2037 \211\313\230\203* \314C\207\300\315!\230\205C \301\"\207\300\315!\230\205C \301\"\207" ["4b09f712-ee03-45d1-be9a-996919662b66" #s(jupyter-org-request "4b09f712-ee03-45d1-be9a-996919662b66" "execute_request" (:code "# Some basic data science imports
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.pipeline import Pipeline
import datetime

import time
import os

# Some gudhi imports for TDA

import tda_pipeline
from tda_pipeline import DataSelector, RipsPersistence, LPNorm
from gudhi.representations import Landscape

# Some graphical imports for the web app
import ipywidgets as widgets
import plotly.graph_objects as go

# Some imports for ipywidgets
from ipywidgets import DatePicker, BoundedIntText, ToggleButton, Text, HBox, VBox
from IPython.display import display

# cf. data_generation.py
df = pd.read_csv('latest.csv', index_col=0)

# min, max and default start values taken from the dataset - Python 3.7+
min_value = datetime.date.fromisoformat(df.index[0])
max_value = datetime.date.fromisoformat(df.index[-1])

last_year = max_value - datetime.timedelta(days=250)

# Widgets
start = DatePicker(description='start', value = last_year)
end   = DatePicker(description='end', value = max_value)
window = BoundedIntText(value=50, min=10, max=100, step=1, description='Windows size')

button = ToggleButton(description='Compute', icon='cogs')

def nearest_str_date(items, pivot):
    return min(items, key=lambda str_date: abs(datetime.date.fromisoformat(str_date) - pivot))

def compute_Lp_norms():
    w=int(window.value)
    start_idx = df.index.get_loc(str(nearest_str_date(df.index, start.value - datetime.timedelta(days=w))))
    end_idx = df.index.get_loc(str(nearest_str_date(df.index, end.value)))
    # Some error management
    if start_idx == end_idx:
        raise IndexError('Start date must be different from end date.')
    if end_idx < w:
        end_idx = w
    if end_idx < start_idx:
        start_idx, end_idx = end_idx, start_idx

    pipe = Pipeline(
        [
            (\"data_sel\", DataSelector(start=start_idx, end=end_idx, w=w)),
            (\"rips_pers\", RipsPersistence(max_rips_dimension=2, max_persistence_dimension=2, only_this_dim=1, n_jobs=-1)),
            (\"landscape\", Landscape(resolution=1000)),
            (\"lpnorm\", LPNorm(n_jobs=-1)),
            (\"mms\", MinMaxScaler()),
        ]
    )

    start_chrono = float(time.time())
    #os.write(1, bytes(str(start_chrono),'UTF-8') + b'\\r\\n')
    L1L2mms = pipe.fit_transform(df)
    stop_chrono = float(time.time())
    #os.write(1, bytes(str(stop_chrono),'UTF-8') + b'\\r\\n')
    os.write(1, bytes(str(stop_chrono - start_chrono),'UTF-8') + b' sec. \\r\\n')
    
    l1l2df = pd.DataFrame({'date': df[start_idx+w:end_idx].index, 'L1': L1L2mms.transpose()[0], 'L2': L1L2mms.transpose()[1]})
    # Calculate the variance for the L norms
    j = 0

    for i in l1l2df.index:
        if j < w:
            k = 0
        else:
            k = j - w
        l1l2df.loc[i, 'L1_variance'] = np.var(l1l2df.iloc[k:j].L1)
        l1l2df.loc[i, 'L2_variance'] = np.var(l1l2df.iloc[k:j].L2)
        j += 1
        
    return l1l2df

def compute(args):
    l1l2df = compute_Lp_norms()
    fig.data[0]['x'] = l1l2df['date']
    fig.data[0]['y'] = l1l2df['L1']
    fig.data[1]['x'] = l1l2df['date']
    fig.data[1]['y'] = l1l2df['L2']
    fig.data[2]['x'] = l1l2df['date']
    fig.data[2]['y'] = l1l2df['L1_variance']
    fig.data[3]['x'] = l1l2df['date']
    fig.data[3]['y'] = l1l2df['L2_variance']
    
button.observe(compute, 'value')

# Layout
left_box = HBox([start, end, window, button])

fig = go.FigureWidget()

l1l2df = compute_Lp_norms()
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1'], mode='lines', name='L1')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2'], mode='lines', name='L2')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1_variance'], mode='lines', name='L1_variance')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2_variance'], mode='lines', name='L2_variance')
fig.update_xaxes(dtick=\"M1\", tickformat=\"%b\\n%Y\")
fig.layout.title.text = 'Lp norms'

display(left_box)
fig" :silent :json-false :store_history t :user_expressions #s(hash-table) :allow_stdin t :stop_on_error :json-false) #12 (26440 37591 495486 292000) t (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_530" :msg_type "execute_reply" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.530238Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_530" :msg_type "execute_reply" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata (:started "2024-11-28T15:57:11.501467Z" :dependencies_met t :engine "09acb503-cf8f-4eef-b1b4-159ead369f19" :status "error") :content (:status "error" :traceback ["[0;31m---------------------------------------------------------------------------[0m" "[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)" "Cell [0;32mIn[47], line 13[0m
[1;32m      9[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m
[1;32m     11[0m [38;5;66;03m# Some gudhi imports for TDA[39;00m
[0;32m---> 13[0m [38;5;28;01mimport[39;00m [38;5;21;01mtda_pipeline[39;00m
[1;32m     14[0m [38;5;28;01mfrom[39;00m [38;5;21;01mtda_pipeline[39;00m [38;5;28;01mimport[39;00m DataSelector, RipsPersistence, LPNorm
[1;32m     15[0m [38;5;28;01mfrom[39;00m [38;5;21;01mgudhi[39;00m[38;5;21;01m.[39;00m[38;5;21;01mrepresentations[39;00m [38;5;28;01mimport[39;00m Landscape
" "[0;31mModuleNotFoundError[0m: No module named 'tda_pipeline'"] :ename "ModuleNotFoundError" :evalue "No module named 'tda_pipeline'" :engine_info (:engine_uuid "09acb503-cf8f-4eef-b1b4-159ead369f19" :engine_id -1 :method "execute") :execution_count 47 :user_expressions nil :payload []) :buffers [] :channel "shell") ((:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_527" :msg_type "status" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.501001Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_527" :msg_type "status" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata nil :content (:execution_state "busy") :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_528" :msg_type "execute_input" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.501494Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_528" :msg_type "execute_input" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata nil :content (:code "# Some basic data science imports
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.pipeline import Pipeline
import datetime

import time
import os

# Some gudhi imports for TDA

import tda_pipeline
from tda_pipeline import DataSelector, RipsPersistence, LPNorm
from gudhi.representations import Landscape

# Some graphical imports for the web app
import ipywidgets as widgets
import plotly.graph_objects as go

# Some imports for ipywidgets
from ipywidgets import DatePicker, BoundedIntText, ToggleButton, Text, HBox, VBox
from IPython.display import display

# cf. data_generation.py
df = pd.read_csv('latest.csv', index_col=0)

# min, max and default start values taken from the dataset - Python 3.7+
min_value = datetime.date.fromisoformat(df.index[0])
max_value = datetime.date.fromisoformat(df.index[-1])

last_year = max_value - datetime.timedelta(days=250)

# Widgets
start = DatePicker(description='start', value = last_year)
end   = DatePicker(description='end', value = max_value)
window = BoundedIntText(value=50, min=10, max=100, step=1, description='Windows size')

button = ToggleButton(description='Compute', icon='cogs')

def nearest_str_date(items, pivot):
    return min(items, key=lambda str_date: abs(datetime.date.fromisoformat(str_date) - pivot))

def compute_Lp_norms():
    w=int(window.value)
    start_idx = df.index.get_loc(str(nearest_str_date(df.index, start.value - datetime.timedelta(days=w))))
    end_idx = df.index.get_loc(str(nearest_str_date(df.index, end.value)))
    # Some error management
    if start_idx == end_idx:
        raise IndexError('Start date must be different from end date.')
    if end_idx < w:
        end_idx = w
    if end_idx < start_idx:
        start_idx, end_idx = end_idx, start_idx

    pipe = Pipeline(
        [
            (\"data_sel\", DataSelector(start=start_idx, end=end_idx, w=w)),
            (\"rips_pers\", RipsPersistence(max_rips_dimension=2, max_persistence_dimension=2, only_this_dim=1, n_jobs=-1)),
            (\"landscape\", Landscape(resolution=1000)),
            (\"lpnorm\", LPNorm(n_jobs=-1)),
            (\"mms\", MinMaxScaler()),
        ]
    )

    start_chrono = float(time.time())
    #os.write(1, bytes(str(start_chrono),'UTF-8') + b'\\r\\n')
    L1L2mms = pipe.fit_transform(df)
    stop_chrono = float(time.time())
    #os.write(1, bytes(str(stop_chrono),'UTF-8') + b'\\r\\n')
    os.write(1, bytes(str(stop_chrono - start_chrono),'UTF-8') + b' sec. \\r\\n')
    
    l1l2df = pd.DataFrame({'date': df[start_idx+w:end_idx].index, 'L1': L1L2mms.transpose()[0], 'L2': L1L2mms.transpose()[1]})
    # Calculate the variance for the L norms
    j = 0

    for i in l1l2df.index:
        if j < w:
            k = 0
        else:
            k = j - w
        l1l2df.loc[i, 'L1_variance'] = np.var(l1l2df.iloc[k:j].L1)
        l1l2df.loc[i, 'L2_variance'] = np.var(l1l2df.iloc[k:j].L2)
        j += 1
        
    return l1l2df

def compute(args):
    l1l2df = compute_Lp_norms()
    fig.data[0]['x'] = l1l2df['date']
    fig.data[0]['y'] = l1l2df['L1']
    fig.data[1]['x'] = l1l2df['date']
    fig.data[1]['y'] = l1l2df['L2']
    fig.data[2]['x'] = l1l2df['date']
    fig.data[2]['y'] = l1l2df['L1_variance']
    fig.data[3]['x'] = l1l2df['date']
    fig.data[3]['y'] = l1l2df['L2_variance']
    
button.observe(compute, 'value')

# Layout
left_box = HBox([start, end, window, button])

fig = go.FigureWidget()

l1l2df = compute_Lp_norms()
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1'], mode='lines', name='L1')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2'], mode='lines', name='L2')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1_variance'], mode='lines', name='L1_variance')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2_variance'], mode='lines', name='L2_variance')
fig.update_xaxes(dtick=\"M1\", tickformat=\"%b\\n%Y\")
fig.layout.title.text = 'Lp norms'

display(left_box)
fig" :execution_count 47) :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_529" :msg_type "error" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.529306Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_529" :msg_type "error" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata nil :content (:traceback ["[0;31m---------------------------------------------------------------------------[0m" "[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)" "Cell [0;32mIn[47], line 13[0m
[1;32m      9[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m
[1;32m     11[0m [38;5;66;03m# Some gudhi imports for TDA[39;00m
[0;32m---> 13[0m [38;5;28;01mimport[39;00m [38;5;21;01mtda_pipeline[39;00m
[1;32m     14[0m [38;5;28;01mfrom[39;00m [38;5;21;01mtda_pipeline[39;00m [38;5;28;01mimport[39;00m DataSelector, RipsPersistence, LPNorm
[1;32m     15[0m [38;5;28;01mfrom[39;00m [38;5;21;01mgudhi[39;00m[38;5;21;01m.[39;00m[38;5;21;01mrepresentations[39;00m [38;5;28;01mimport[39;00m Landscape
" "[0;31mModuleNotFoundError[0m: No module named 'tda_pipeline'"] :ename "ModuleNotFoundError" :evalue "No module named 'tda_pipeline'") :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_531" :msg_type "status" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.530475Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_531" :msg_type "status" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata nil :content (:execution_state "idle") :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_530" :msg_type "execute_reply" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.530238Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_530" :msg_type "execute_reply" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata (:started "2024-11-28T15:57:11.501467Z" :dependencies_met t :engine "09acb503-cf8f-4eef-b1b4-159ead369f19" :status "error") :content (:status "error" :traceback ["[0;31m---------------------------------------------------------------------------[0m" "[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)" "Cell [0;32mIn[47], line 13[0m
[1;32m      9[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m
[1;32m     11[0m [38;5;66;03m# Some gudhi imports for TDA[39;00m
[0;32m---> 13[0m [38;5;28;01mimport[39;00m [38;5;21;01mtda_pipeline[39;00m
[1;32m     14[0m [38;5;28;01mfrom[39;00m [38;5;21;01mtda_pipeline[39;00m [38;5;28;01mimport[39;00m DataSelector, RipsPersistence, LPNorm
[1;32m     15[0m [38;5;28;01mfrom[39;00m [38;5;21;01mgudhi[39;00m[38;5;21;01m.[39;00m[38;5;21;01mrepresentations[39;00m [38;5;28;01mimport[39;00m Landscape
" "[0;31mModuleNotFoundError[0m: No module named 'tda_pipeline'"] :ename "ModuleNotFoundError" :evalue "No module named 'tda_pipeline'" :engine_info (:engine_uuid "09acb503-cf8f-4eef-b1b4-159ead369f19" :engine_id -1 :method "execute") :execution_count 47 :user_expressions nil :payload []) :buffers [] :channel "shell")) #17 nil value ((:colname-names) (:rowname-names) (:result-params "replace") (:result-type . value) (:results . "replace") (:exports . "code") (:kernel . "python3") (:session . "py") (:async . "yes") (:tangle . "no") (:hlines . "no") (:noweb . "no") (:cache . "no")) nil nil nil t nil #<marker at 659 in tda_web_app.org> t #<overlay in no buffer>) cl-struct-jupyter-request-tags #[514 "\301!>\204 \302\303\304D\"\210\305I\210\301!>\204# \302\303\304D\"\210\306\306HC\244I\210\307!\204C \310!\311\230\204C \310!\312\230\203W \301!>\204R \302\303\304D\"\210\313\314I\210\315\316BB!\207" [cl-struct-jupyter-request-tags type-of signal wrong-type-argument jupyter-request 7 8 jupyter-message-status-idle-p jupyter-message-type "kernel_info_reply" "shutdown_reply" 6 t jupyter-content :parent-request] 6 "

(fn REQ MSG)"] jupyter-message-type jupyter-content type-of signal wrong-type-argument jupyter-request 6 "status" unsubscribe jupyter-message-parent-id] 7 "

(fn MSG)"] (subscribers #[257 "\211:\203L \211\242\211\301\267\202G \243\211:\203& \211\242\243\211\204  \300!\207\302\303\"\207\302\303\"\207\243\211:\203B \211\243\211\204= \304\305\306\"\207\302\303\"\207\302\303\"\207\302\303\"\207\302\303\"\207" [#[257 "\301!\205 \302\303\"\304\300#\262\207" [#12 jupyter-message-type plist-get :channel jupyter-handle-message] 6 "

(fn MSG)"] #s(hash-table test eq purecopy t data (content 13 subscribe 43)) error "Unhandled subscriber content: %s" signal jupyter-subscribed-subscriber nil] 8 "

(fn SUB-CONTENT)"]) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"]) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"] #[257 "\211:\203L \211\242\211\301\267\202G \243\211:\203& \211\242\243\211\204  \300!\207\302\303\"\207\302\303\"\207\243\211:\203B \211\243\211\204= \304\305\306\"\207\302\303\"\207\302\303\"\207\302\303\"\207\302\303\"\207" [#[257 "\211\303\267\202\" \304\302!\207\305\302!\210\301\306\240\210\307\300\242!\205H \310\300\242!\207\311\302!\207\211:\205H \211\242\211\312=\205F \243\211:\205D \211\242\243\211?\205B \302!\266\202\262\262\207" [(#s(websocket open (:id "6bf9469b-83c6-4b8d-8e54-385f791b796f" :session #s(jupyter-session nil "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" nil)) #[257 "\300\301\240\207" [(nil) nil] 3 "

(fn WS)"] #[514 "\303!
>\204 \304\305\306D\"\210\211\307H\211\310>\2036 \311\303!
>\204( \304\305\306D\"\210\312H!\313\300\242\314\315B!\"\207\313\301\314\316\303!
>\204K \304\305\306D\"\210\307HD!\"\207" [(#[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [#[257 "\211:\203y \211\242\211\303\267\210\202w \243\304!\207\243\211:\205v \211\242\243\211:\205t \211\242\243\211:\205r \211\242\243\211:\205p \211\242\243\211?\205n \302\242\203H \305\306!\210\307\3101Z \211\300
	%0\207\210\300\301\242 \240\210\211\300
	%\262\266\202\266\202\266\202\266\202\207\311\207\211\312\267\202\233 \302\242\203\210 \305\313!\210\314\300\242!?\205\234 \300\301\242 \240\207\315\300\242!\207\311\207" [#18 (#[0 "\305\304\303\306\307\304!\310\311\312\300\"\313\311\314\300\"\315\311\316\301\302#&
\207" [(nil) #22 #[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [jupyter-content (subscribers) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"] "6bf9469b-83c6-4b8d-8e54-385f791b796f" #s(jupyter-server "http://localhost:8888" "ws://localhost:8888" t (:default "python3" :kernelspecs (#s(jupyter-kernelspec "python3" (:argv ["python" "-m" "ipykernel_launcher" "-f" "{connection_file}"] :env nil :display_name "Python 3 (ipykernel)" :language "python" :interrupt_mode "signal" :metadata (:debugger t)) nil)))) jupyter-api-kernel-websocket :custom-header-alist jupyter-api-auth-headers :on-open make-closure #[257 "\300\301\240\207" [V0 nil] 3 "

(fn WS)"] :on-close #[257 "\300\242\203	 \301\302!\207\300\303\240\207" [V0 error "Kernel connection could not be established" t] 3 "

(fn WS)"] :on-message #[514 "\303!
>\204 \304\305\306D\"\210\211\307H\211\310>\2036 \311\303!
>\204( \304\305\306D\"\210\312H!\313\300\242\314\315B!\"\207\313\301\314\316\303!
>\204K \304\305\306D\"\210\307HD!\"\207" [V0 V1 cl-struct-websocket-frame-tags type-of signal wrong-type-argument websocket-frame 1 (binary text) jupyter-read-plist-from-string 2 jupyter-run-with-state jupyter-publish message error] 11 "

(fn WS FRAME)"]] 14]) (nil) #s(hash-table test eq purecopy t data (message 14 send 20)) jupyter-content error "Attempting to send message to shutdown kernel" #[1285 "\301\242\242\302!>\204 \303\304\305D\"\210\211\306H\262\307\310\"\311\312\313
\314&\266\202\"\207" [cl-struct-websocket-tags websocket-send-text type-of signal wrong-type-argument websocket 2 plist-get :session jupyter-encode-raw-message :channel :msg-id :content] 18 "

(fn WS CHANNEL MSG-TYPE CONTENT MSG-ID)"] (websocket-closed) nil #s(hash-table test eq purecopy t data (start 127 stop 150)) "Can't start I/O connection to shutdown kernel" websocket-openp websocket-close] 18 "

(fn EVENT)"] (subscribers #[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [#[257 "\303\304!\211\204 \305!\207\306\301!
>\204 \307\310\311\301D\"\210\301\312H\2037 \211\313\230\203* \314C\207\300\315!\230\205C \301\"\207\300\315!\230\205C \301\"\207" ["4b09f712-ee03-45d1-be9a-996919662b66" #s(jupyter-org-request "4b09f712-ee03-45d1-be9a-996919662b66" "execute_request" (:code "# Some basic data science imports
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.pipeline import Pipeline
import datetime

import time
import os

# Some gudhi imports for TDA

import tda_pipeline
from tda_pipeline import DataSelector, RipsPersistence, LPNorm
from gudhi.representations import Landscape

# Some graphical imports for the web app
import ipywidgets as widgets
import plotly.graph_objects as go

# Some imports for ipywidgets
from ipywidgets import DatePicker, BoundedIntText, ToggleButton, Text, HBox, VBox
from IPython.display import display

# cf. data_generation.py
df = pd.read_csv('latest.csv', index_col=0)

# min, max and default start values taken from the dataset - Python 3.7+
min_value = datetime.date.fromisoformat(df.index[0])
max_value = datetime.date.fromisoformat(df.index[-1])

last_year = max_value - datetime.timedelta(days=250)

# Widgets
start = DatePicker(description='start', value = last_year)
end   = DatePicker(description='end', value = max_value)
window = BoundedIntText(value=50, min=10, max=100, step=1, description='Windows size')

button = ToggleButton(description='Compute', icon='cogs')

def nearest_str_date(items, pivot):
    return min(items, key=lambda str_date: abs(datetime.date.fromisoformat(str_date) - pivot))

def compute_Lp_norms():
    w=int(window.value)
    start_idx = df.index.get_loc(str(nearest_str_date(df.index, start.value - datetime.timedelta(days=w))))
    end_idx = df.index.get_loc(str(nearest_str_date(df.index, end.value)))
    # Some error management
    if start_idx == end_idx:
        raise IndexError('Start date must be different from end date.')
    if end_idx < w:
        end_idx = w
    if end_idx < start_idx:
        start_idx, end_idx = end_idx, start_idx

    pipe = Pipeline(
        [
            (\"data_sel\", DataSelector(start=start_idx, end=end_idx, w=w)),
            (\"rips_pers\", RipsPersistence(max_rips_dimension=2, max_persistence_dimension=2, only_this_dim=1, n_jobs=-1)),
            (\"landscape\", Landscape(resolution=1000)),
            (\"lpnorm\", LPNorm(n_jobs=-1)),
            (\"mms\", MinMaxScaler()),
        ]
    )

    start_chrono = float(time.time())
    #os.write(1, bytes(str(start_chrono),'UTF-8') + b'\\r\\n')
    L1L2mms = pipe.fit_transform(df)
    stop_chrono = float(time.time())
    #os.write(1, bytes(str(stop_chrono),'UTF-8') + b'\\r\\n')
    os.write(1, bytes(str(stop_chrono - start_chrono),'UTF-8') + b' sec. \\r\\n')
    
    l1l2df = pd.DataFrame({'date': df[start_idx+w:end_idx].index, 'L1': L1L2mms.transpose()[0], 'L2': L1L2mms.transpose()[1]})
    # Calculate the variance for the L norms
    j = 0

    for i in l1l2df.index:
        if j < w:
            k = 0
        else:
            k = j - w
        l1l2df.loc[i, 'L1_variance'] = np.var(l1l2df.iloc[k:j].L1)
        l1l2df.loc[i, 'L2_variance'] = np.var(l1l2df.iloc[k:j].L2)
        j += 1
        
    return l1l2df

def compute(args):
    l1l2df = compute_Lp_norms()
    fig.data[0]['x'] = l1l2df['date']
    fig.data[0]['y'] = l1l2df['L1']
    fig.data[1]['x'] = l1l2df['date']
    fig.data[1]['y'] = l1l2df['L2']
    fig.data[2]['x'] = l1l2df['date']
    fig.data[2]['y'] = l1l2df['L1_variance']
    fig.data[3]['x'] = l1l2df['date']
    fig.data[3]['y'] = l1l2df['L2_variance']
    
button.observe(compute, 'value')

# Layout
left_box = HBox([start, end, window, button])

fig = go.FigureWidget()

l1l2df = compute_Lp_norms()
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1'], mode='lines', name='L1')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2'], mode='lines', name='L2')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1_variance'], mode='lines', name='L1_variance')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2_variance'], mode='lines', name='L2_variance')
fig.update_xaxes(dtick=\"M1\", tickformat=\"%b\\n%Y\")
fig.layout.title.text = 'Lp norms'

display(left_box)
fig" :silent :json-false :store_history t :user_expressions #s(hash-table) :allow_stdin t :stop_on_error :json-false) #12 (26440 37591 495486 292000) t (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_530" :msg_type "execute_reply" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.530238Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_530" :msg_type "execute_reply" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata (:started "2024-11-28T15:57:11.501467Z" :dependencies_met t :engine "09acb503-cf8f-4eef-b1b4-159ead369f19" :status "error") :content (:status "error" :traceback ["[0;31m---------------------------------------------------------------------------[0m" "[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)" "Cell [0;32mIn[47], line 13[0m
[1;32m      9[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m
[1;32m     11[0m [38;5;66;03m# Some gudhi imports for TDA[39;00m
[0;32m---> 13[0m [38;5;28;01mimport[39;00m [38;5;21;01mtda_pipeline[39;00m
[1;32m     14[0m [38;5;28;01mfrom[39;00m [38;5;21;01mtda_pipeline[39;00m [38;5;28;01mimport[39;00m DataSelector, RipsPersistence, LPNorm
[1;32m     15[0m [38;5;28;01mfrom[39;00m [38;5;21;01mgudhi[39;00m[38;5;21;01m.[39;00m[38;5;21;01mrepresentations[39;00m [38;5;28;01mimport[39;00m Landscape
" "[0;31mModuleNotFoundError[0m: No module named 'tda_pipeline'"] :ename "ModuleNotFoundError" :evalue "No module named 'tda_pipeline'" :engine_info (:engine_uuid "09acb503-cf8f-4eef-b1b4-159ead369f19" :engine_id -1 :method "execute") :execution_count 47 :user_expressions nil :payload []) :buffers [] :channel "shell") ((:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_527" :msg_type "status" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.501001Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_527" :msg_type "status" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata nil :content (:execution_state "busy") :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_528" :msg_type "execute_input" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.501494Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_528" :msg_type "execute_input" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata nil :content (:code "# Some basic data science imports
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.pipeline import Pipeline
import datetime

import time
import os

# Some gudhi imports for TDA

import tda_pipeline
from tda_pipeline import DataSelector, RipsPersistence, LPNorm
from gudhi.representations import Landscape

# Some graphical imports for the web app
import ipywidgets as widgets
import plotly.graph_objects as go

# Some imports for ipywidgets
from ipywidgets import DatePicker, BoundedIntText, ToggleButton, Text, HBox, VBox
from IPython.display import display

# cf. data_generation.py
df = pd.read_csv('latest.csv', index_col=0)

# min, max and default start values taken from the dataset - Python 3.7+
min_value = datetime.date.fromisoformat(df.index[0])
max_value = datetime.date.fromisoformat(df.index[-1])

last_year = max_value - datetime.timedelta(days=250)

# Widgets
start = DatePicker(description='start', value = last_year)
end   = DatePicker(description='end', value = max_value)
window = BoundedIntText(value=50, min=10, max=100, step=1, description='Windows size')

button = ToggleButton(description='Compute', icon='cogs')

def nearest_str_date(items, pivot):
    return min(items, key=lambda str_date: abs(datetime.date.fromisoformat(str_date) - pivot))

def compute_Lp_norms():
    w=int(window.value)
    start_idx = df.index.get_loc(str(nearest_str_date(df.index, start.value - datetime.timedelta(days=w))))
    end_idx = df.index.get_loc(str(nearest_str_date(df.index, end.value)))
    # Some error management
    if start_idx == end_idx:
        raise IndexError('Start date must be different from end date.')
    if end_idx < w:
        end_idx = w
    if end_idx < start_idx:
        start_idx, end_idx = end_idx, start_idx

    pipe = Pipeline(
        [
            (\"data_sel\", DataSelector(start=start_idx, end=end_idx, w=w)),
            (\"rips_pers\", RipsPersistence(max_rips_dimension=2, max_persistence_dimension=2, only_this_dim=1, n_jobs=-1)),
            (\"landscape\", Landscape(resolution=1000)),
            (\"lpnorm\", LPNorm(n_jobs=-1)),
            (\"mms\", MinMaxScaler()),
        ]
    )

    start_chrono = float(time.time())
    #os.write(1, bytes(str(start_chrono),'UTF-8') + b'\\r\\n')
    L1L2mms = pipe.fit_transform(df)
    stop_chrono = float(time.time())
    #os.write(1, bytes(str(stop_chrono),'UTF-8') + b'\\r\\n')
    os.write(1, bytes(str(stop_chrono - start_chrono),'UTF-8') + b' sec. \\r\\n')
    
    l1l2df = pd.DataFrame({'date': df[start_idx+w:end_idx].index, 'L1': L1L2mms.transpose()[0], 'L2': L1L2mms.transpose()[1]})
    # Calculate the variance for the L norms
    j = 0

    for i in l1l2df.index:
        if j < w:
            k = 0
        else:
            k = j - w
        l1l2df.loc[i, 'L1_variance'] = np.var(l1l2df.iloc[k:j].L1)
        l1l2df.loc[i, 'L2_variance'] = np.var(l1l2df.iloc[k:j].L2)
        j += 1
        
    return l1l2df

def compute(args):
    l1l2df = compute_Lp_norms()
    fig.data[0]['x'] = l1l2df['date']
    fig.data[0]['y'] = l1l2df['L1']
    fig.data[1]['x'] = l1l2df['date']
    fig.data[1]['y'] = l1l2df['L2']
    fig.data[2]['x'] = l1l2df['date']
    fig.data[2]['y'] = l1l2df['L1_variance']
    fig.data[3]['x'] = l1l2df['date']
    fig.data[3]['y'] = l1l2df['L2_variance']
    
button.observe(compute, 'value')

# Layout
left_box = HBox([start, end, window, button])

fig = go.FigureWidget()

l1l2df = compute_Lp_norms()
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1'], mode='lines', name='L1')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2'], mode='lines', name='L2')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1_variance'], mode='lines', name='L1_variance')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2_variance'], mode='lines', name='L2_variance')
fig.update_xaxes(dtick=\"M1\", tickformat=\"%b\\n%Y\")
fig.layout.title.text = 'Lp norms'

display(left_box)
fig" :execution_count 47) :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_529" :msg_type "error" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.529306Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_529" :msg_type "error" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata nil :content (:traceback ["[0;31m---------------------------------------------------------------------------[0m" "[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)" "Cell [0;32mIn[47], line 13[0m
[1;32m      9[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m
[1;32m     11[0m [38;5;66;03m# Some gudhi imports for TDA[39;00m
[0;32m---> 13[0m [38;5;28;01mimport[39;00m [38;5;21;01mtda_pipeline[39;00m
[1;32m     14[0m [38;5;28;01mfrom[39;00m [38;5;21;01mtda_pipeline[39;00m [38;5;28;01mimport[39;00m DataSelector, RipsPersistence, LPNorm
[1;32m     15[0m [38;5;28;01mfrom[39;00m [38;5;21;01mgudhi[39;00m[38;5;21;01m.[39;00m[38;5;21;01mrepresentations[39;00m [38;5;28;01mimport[39;00m Landscape
" "[0;31mModuleNotFoundError[0m: No module named 'tda_pipeline'"] :ename "ModuleNotFoundError" :evalue "No module named 'tda_pipeline'") :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_531" :msg_type "status" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.530475Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_531" :msg_type "status" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata nil :content (:execution_state "idle") :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_530" :msg_type "execute_reply" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.530238Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_530" :msg_type "execute_reply" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata (:started "2024-11-28T15:57:11.501467Z" :dependencies_met t :engine "09acb503-cf8f-4eef-b1b4-159ead369f19" :status "error") :content (:status "error" :traceback ["[0;31m---------------------------------------------------------------------------[0m" "[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)" "Cell [0;32mIn[47], line 13[0m
[1;32m      9[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m
[1;32m     11[0m [38;5;66;03m# Some gudhi imports for TDA[39;00m
[0;32m---> 13[0m [38;5;28;01mimport[39;00m [38;5;21;01mtda_pipeline[39;00m
[1;32m     14[0m [38;5;28;01mfrom[39;00m [38;5;21;01mtda_pipeline[39;00m [38;5;28;01mimport[39;00m DataSelector, RipsPersistence, LPNorm
[1;32m     15[0m [38;5;28;01mfrom[39;00m [38;5;21;01mgudhi[39;00m[38;5;21;01m.[39;00m[38;5;21;01mrepresentations[39;00m [38;5;28;01mimport[39;00m Landscape
" "[0;31mModuleNotFoundError[0m: No module named 'tda_pipeline'"] :ename "ModuleNotFoundError" :evalue "No module named 'tda_pipeline'" :engine_info (:engine_uuid "09acb503-cf8f-4eef-b1b4-159ead369f19" :engine_id -1 :method "execute") :execution_count 47 :user_expressions nil :payload []) :buffers [] :channel "shell")) #26 nil value ((:colname-names) (:rowname-names) (:result-params "replace") (:result-type . value) (:results . "replace") (:exports . "code") (:kernel . "python3") (:session . "py") (:async . "yes") (:tangle . "no") (:hlines . "no") (:noweb . "no") (:cache . "no")) nil nil nil t nil #<marker at 659 in tda_web_app.org> t #<overlay in no buffer>) cl-struct-jupyter-request-tags #[514 "\301!>\204 \302\303\304D\"\210\305I\210\301!>\204# \302\303\304D\"\210\306\306HC\244I\210\307!\204C \310!\311\230\204C \310!\312\230\203W \301!>\204R \302\303\304D\"\210\313\314I\210\315\316BB!\207" [cl-struct-jupyter-request-tags type-of signal wrong-type-argument jupyter-request 7 8 jupyter-message-status-idle-p jupyter-message-type "kernel_info_reply" "shutdown_reply" 6 t jupyter-content :parent-request] 6 "

(fn REQ MSG)"] jupyter-message-type jupyter-content type-of signal wrong-type-argument jupyter-request 6 "status" unsubscribe jupyter-message-parent-id] 7 "

(fn MSG)"] (subscribers #[257 "\211:\203L \211\242\211\301\267\202G \243\211:\203& \211\242\243\211\204  \300!\207\302\303\"\207\302\303\"\207\243\211:\203B \211\243\211\204= \304\305\306\"\207\302\303\"\207\302\303\"\207\302\303\"\207\302\303\"\207" [#[257 "\301!\205 \302\303\"\304\300#\262\207" [#12 jupyter-message-type plist-get :channel jupyter-handle-message] 6 "

(fn MSG)"] #s(hash-table test eq purecopy t data (content 13 subscribe 43)) error "Unhandled subscriber content: %s" signal jupyter-subscribed-subscriber nil] 8 "

(fn SUB-CONTENT)"]) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"]) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"]) #[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [jupyter-content (subscribers) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"] cl-struct-websocket-frame-tags type-of signal wrong-type-argument websocket-frame 1 (binary text) jupyter-read-plist-from-string 2 jupyter-run-with-state jupyter-publish message error] 11 "

(fn WS FRAME)"] #[257 "\300\242\203	 \301\302!\207\300\303\240\207" [(nil) error "Kernel connection could not be established" t] 3 "

(fn WS)"] websocket-default-error-handler nil nil nil "ws://localhost:8888/api/kernels/6bf9469b-83c6-4b8d-8e54-385f791b796f/channels?session_id=f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" nil nil #<process websocket to ws://localhost:8888/api/kernels/6bf9469b-83c6-4b8d-8e54-385f791b796f/channels?session_id=f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0> nil nil "wlYv8zPJwfSVI4dSA1dXwtQQaB4=" nil)) (nil) #s(jupyter-server-kernel #s(jupyter-kernelspec "python3" (:argv ["python" "-m" "ipykernel_launcher" "-f" "{connection_file}"] :env nil :display_name "Python 3 (ipykernel)" :language "python" :interrupt_mode "signal" :metadata (:debugger t)) nil) #s(jupyter-session nil "6a8d255a-2f17-46fd-8af1-0c55b94d0c7b" nil) #s(jupyter-server "http://localhost:8888" "ws://localhost:8888" t (:default "python3" :kernelspecs (#s(jupyter-kernelspec "python3" (:argv ["python" "-m" "ipykernel_launcher" "-f" "{connection_file}"] :env nil :display_name "Python 3 (ipykernel)" :language "python" :interrupt_mode "signal" :metadata (:debugger t)) nil)))) "6bf9469b-83c6-4b8d-8e54-385f791b796f") #s(hash-table test eq purecopy t data (interrupt 6 shutdown 10 restart 30)) jupyter-interrupt jupyter-shutdown t websocket-openp websocket-close jupyter-restart action] 7 "

(fn ACTION)"] #s(hash-table test eq purecopy t data (content 13 subscribe 43)) error "Unhandled subscriber content: %s" signal jupyter-subscribed-subscriber nil] 8 "

(fn SUB-CONTENT)"]) #<buffer  *jupyter-kernel-client*> nil "null" nil #<buffer *jupyter-repl[python 3.12.3]-py*> nil nil nil) jupyter-message-type plist-get :channel jupyter-handle-message] 6 "

(fn MSG)"] #s(hash-table test eq purecopy t data (content 13 subscribe 43)) error "Unhandled subscriber content: %s" signal jupyter-subscribed-subscriber nil] 8 "

(fn SUB-CONTENT)"]) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"] nil value ((:colname-names) (:rowname-names) (:result-params "replace") (:result-type . value) (:results . "replace") (:exports . "code") (:kernel . "python3") (:session . "py") (:async . "yes") (:tangle . "no") (:hlines . "no") (:noweb . "no") (:cache . "no")) nil nil nil t nil #<marker at 659 in tda_web_app.org> t #<overlay in no buffer>) 659 . 660)) nil (26440 37561 304764 475000) 0 nil])
([nil nil ((#("/" 0 1 (face (font-lock-operator-face org-block) font-lock-multiline t ws-butler-chg delete wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) src-block t font-lock-fontified t fontified t)) . 918) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (#("." 0 1 (face (org-block) font-lock-multiline t ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) src-block t font-lock-fontified t fontified t)) . 918) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1)) nil (26440 37561 304760 246000) 0 nil])
([nil nil ((934 . 939) (#("r" 0 1 (face (org-block) font-lock-multiline t help-echo "Duplicates detected" ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) src-block t font-lock-fontified t fontified t)) . -934) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (#("l" 0 1 (face (org-block) font-lock-multiline t help-echo "Duplicates detected" ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) src-block t font-lock-fontified t fontified t)) . -935) (undo-tree-id2 . -1) (undo-tree-id3 . -1) 936 (931 . 936) (930 . 931) (#(")" 0 1 (face (org-block) font-lock-multiline t help-echo "Duplicates detected" ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) src-block t font-lock-fontified t fontified t)) . -930) (undo-tree-id4 . -1) (undo-tree-id5 . -1) 931 (927 . 931) (920 . 927) (#("m" 0 1 (face (org-block) font-lock-multiline t help-echo "Duplicates detected" ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) src-block t font-lock-fontified t fontified t)) . -920) (undo-tree-id6 . -1) (undo-tree-id7 . -1) 921 (918 . 921) (#("t" 0 1 (face (org-block) font-lock-multiline t help-echo "Duplicates detected" ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) src-block t font-lock-fontified t fontified t)) . -918) (undo-tree-id8 . -1) (undo-tree-id9 . -1) 919 (913 . 919) (913 . 914)) nil (26440 37561 304715 109000) 0 nil])
([nil nil ((nil jupyter-stream-newline nil 5518 . 5519) (4651 . 5519) (4626 . 4657) (#(": 7a53c0b4-a4ec-41a5-aef0-b482f478ac66
" 0 39 (ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . 4626) (4626 . 4665) (#(":RESULTS:
# [goto error]
: [0;36m  Cell [0;32mIn[45], line 12[0;36m[0m
: [0;31m    from ./tda_pipeline import DataSelector, RipsPersistence, LPNorm[0m
: [0m          ^[0m
: [0;31mSyntaxError[0m[0;31m:[0m invalid syntax
:END:
" 0 9 (font-lock-fontified t face org-drawer wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 9 10 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 10 12 (face font-lock-comment-face font-lock-fontified t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 12 13 (face font-lock-comment-face font-lock-fontified t keymap (keymap (13 . jupyter-org-goto-error) (mouse-2 . jupyter-org-goto-error)) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t jupyter-error-loc #<marker at 659 in tda_web_app.org>) 13 24 (face font-lock-comment-face font-lock-fontified t keymap (keymap (13 . jupyter-org-goto-error) (mouse-2 . jupyter-org-goto-error)) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t jupyter-error-loc #<marker at 659 in tda_web_app.org>) 24 25 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 25 27 (jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 27 34 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 34 41 (jupyter-face ((:foreground "cyan3")) jupyter-ansi t face ((:foreground "cyan3") org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 41 48 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 48 63 (jupyter-face ((:foreground "green3")) jupyter-ansi t face ((:foreground "green3") org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 63 70 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 70 74 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 74 75 (jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 75 77 (jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 77 84 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 84 152 (jupyter-face ((:foreground "red3")) jupyter-ansi t face ((:foreground "red3") org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 152 156 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 156 157 (jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 157 159 (jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 159 163 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 163 174 (jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 174 178 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 178 179 (jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 179 181 (jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 181 188 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 188 199 (jupyter-face ((:foreground "red3")) jupyter-ansi t face ((:foreground "red3") org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 199 203 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 203 210 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 210 211 (jupyter-face ((:foreground "red3")) jupyter-ansi t face ((:foreground "red3") org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 211 215 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 215 230 (jupyter-ansi t face (org-code) wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 230 231 (jupyter-ansi t face (org-code) jupyter-stream-newline t wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 231 236 (jupyter-ansi t font-lock-fontified t face org-drawer wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 236 237 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4626) (nil jupyter-request #s(jupyter-org-request "c1aed066-c076-44c6-957f-63f5bcdbc2a6" "execute_request" (:code "# Some basic data science imports
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.pipeline import Pipeline
import datetime

import time
import os

# Some gudhi imports for TDA
from ./tda_pipeline import DataSelector, RipsPersistence, LPNorm
from gudhi.representations import Landscape

# Some graphical imports for the web app
import ipywidgets as widgets
import plotly.graph_objects as go

# Some imports for ipywidgets
from ipywidgets import DatePicker, BoundedIntText, ToggleButton, Text, HBox, VBox
from IPython.display import display

# cf. data_generation.py
df = pd.read_csv('latest.csv', index_col=0)

# min, max and default start values taken from the dataset - Python 3.7+
min_value = datetime.date.fromisoformat(df.index[0])
max_value = datetime.date.fromisoformat(df.index[-1])

last_year = max_value - datetime.timedelta(days=250)

# Widgets
start = DatePicker(description='start', value = last_year)
end   = DatePicker(description='end', value = max_value)
window = BoundedIntText(value=50, min=10, max=100, step=1, description='Windows size')

button = ToggleButton(description='Compute', icon='cogs')

def nearest_str_date(items, pivot):
    return min(items, key=lambda str_date: abs(datetime.date.fromisoformat(str_date) - pivot))

def compute_Lp_norms():
    w=int(window.value)
    start_idx = df.index.get_loc(str(nearest_str_date(df.index, start.value - datetime.timedelta(days=w))))
    end_idx = df.index.get_loc(str(nearest_str_date(df.index, end.value)))
    # Some error management
    if start_idx == end_idx:
        raise IndexError('Start date must be different from end date.')
    if end_idx < w:
        end_idx = w
    if end_idx < start_idx:
        start_idx, end_idx = end_idx, start_idx

    pipe = Pipeline(
        [
            (\"data_sel\", DataSelector(start=start_idx, end=end_idx, w=w)),
            (\"rips_pers\", RipsPersistence(max_rips_dimension=2, max_persistence_dimension=2, only_this_dim=1, n_jobs=-1)),
            (\"landscape\", Landscape(resolution=1000)),
            (\"lpnorm\", LPNorm(n_jobs=-1)),
            (\"mms\", MinMaxScaler()),
        ]
    )

    start_chrono = float(time.time())
    #os.write(1, bytes(str(start_chrono),'UTF-8') + b'\\r\\n')
    L1L2mms = pipe.fit_transform(df)
    stop_chrono = float(time.time())
    #os.write(1, bytes(str(stop_chrono),'UTF-8') + b'\\r\\n')
    os.write(1, bytes(str(stop_chrono - start_chrono),'UTF-8') + b' sec. \\r\\n')
    
    l1l2df = pd.DataFrame({'date': df[start_idx+w:end_idx].index, 'L1': L1L2mms.transpose()[0], 'L2': L1L2mms.transpose()[1]})
    # Calculate the variance for the L norms
    j = 0

    for i in l1l2df.index:
        if j < w:
            k = 0
        else:
            k = j - w
        l1l2df.loc[i, 'L1_variance'] = np.var(l1l2df.iloc[k:j].L1)
        l1l2df.loc[i, 'L2_variance'] = np.var(l1l2df.iloc[k:j].L2)
        j += 1
        
    return l1l2df

def compute(args):
    l1l2df = compute_Lp_norms()
    fig.data[0]['x'] = l1l2df['date']
    fig.data[0]['y'] = l1l2df['L1']
    fig.data[1]['x'] = l1l2df['date']
    fig.data[1]['y'] = l1l2df['L2']
    fig.data[2]['x'] = l1l2df['date']
    fig.data[2]['y'] = l1l2df['L1_variance']
    fig.data[3]['x'] = l1l2df['date']
    fig.data[3]['y'] = l1l2df['L2_variance']
    
button.observe(compute, 'value')

# Layout
left_box = HBox([start, end, window, button])

fig = go.FigureWidget()

l1l2df = compute_Lp_norms()
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1'], mode='lines', name='L1')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2'], mode='lines', name='L2')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1_variance'], mode='lines', name='L1_variance')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2_variance'], mode='lines', name='L2_variance')
fig.update_xaxes(dtick=\"M1\", tickformat=\"%b\\n%Y\")
fig.layout.title.text = 'Lp norms'

display(left_box)
fig" :silent :json-false :store_history t :user_expressions #s(hash-table) :allow_stdin t :stop_on_error :json-false) #s(jupyter-org-client jupyter--clients (#<finalizer>) "idle" 48 (:status "ok" :protocol_version "5.3" :implementation "ipython" :implementation_version "8.29.0" :language_info (:name python :version "3.12.3" :mimetype "text/x-python" :codemirror_mode (:name "ipython" :version 3) :pygments_lexer "ipython3" :nbconvert_exporter "python" :file_extension ".py") :banner "Python 3.12.3 (main, Nov  6 2024, 18:32:19) [GCC 13.2.0]
Type 'copyright', 'credits' or 'license' for more information
IPython 8.29.0 -- An enhanced Interactive Python. Type '?' for help.
" :help_links [(:text "Python Reference" :url "https://docs.python.org/3.12") (:text "IPython Reference" :url "https://ipython.org/documentation.html") (:text "NumPy Reference" :url "https://docs.scipy.org/doc/numpy/reference/") (:text "SciPy Reference" :url "https://docs.scipy.org/doc/scipy/reference/") (:text "Matplotlib Reference" :url "https://matplotlib.org/contents.html") (:text "SymPy Reference" :url "http://docs.sympy.org/latest/index.html") (:text "pandas Reference" :url "https://pandas.pydata.org/pandas-docs/stable/")]) #s(hash-table test equal) (#[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [#[257 "\211:\203y \211\242\211\303\267\210\202w \243\304!\207\243\211:\205v \211\242\243\211:\205t \211\242\243\211:\205r \211\242\243\211:\205p \211\242\243\211?\205n \302\242\203H \305\306!\210\307\3101Z \211\300
	%0\207\210\300\301\242 \240\210\211\300
	%\262\266\202\266\202\266\202\266\202\207\311\207\211\312\267\202\233 \302\242\203\210 \305\313!\210\314\300\242!?\205\234 \300\301\242 \240\207\315\300\242!\207\311\207" [(#s(websocket open (:id "6bf9469b-83c6-4b8d-8e54-385f791b796f" :session #s(jupyter-session nil "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" nil)) #[257 "\300\301\240\207" [(nil) nil] 3 "

(fn WS)"] #[514 "\303!
>\204 \304\305\306D\"\210\211\307H\211\310>\2036 \311\303!
>\204( \304\305\306D\"\210\312H!\313\300\242\314\315B!\"\207\313\301\314\316\303!
>\204K \304\305\306D\"\210\307HD!\"\207" [(#7) #[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [jupyter-content (subscribers) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"] cl-struct-websocket-frame-tags type-of signal wrong-type-argument websocket-frame 1 (binary text) jupyter-read-plist-from-string 2 jupyter-run-with-state jupyter-publish message error] 11 "

(fn WS FRAME)"] #[257 "\300\242\203	 \301\302!\207\300\303\240\207" [(nil) error "Kernel connection could not be established" t] 3 "

(fn WS)"] websocket-default-error-handler nil nil nil "ws://localhost:8888/api/kernels/6bf9469b-83c6-4b8d-8e54-385f791b796f/channels?session_id=f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" nil nil #<process websocket to ws://localhost:8888/api/kernels/6bf9469b-83c6-4b8d-8e54-385f791b796f/channels?session_id=f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0> nil nil "wlYv8zPJwfSVI4dSA1dXwtQQaB4=" nil)) (#[0 "\305\304\303\306\307\304!\310\311\312\300\"\313\311\314\300\"\315\311\316\301\302#&
\207" [(nil) (#7) #[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [jupyter-content (subscribers) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"] "6bf9469b-83c6-4b8d-8e54-385f791b796f" #s(jupyter-server "http://localhost:8888" "ws://localhost:8888" t (:default "python3" :kernelspecs (#s(jupyter-kernelspec "python3" (:argv ["python" "-m" "ipykernel_launcher" "-f" "{connection_file}"] :env nil :display_name "Python 3 (ipykernel)" :language "python" :interrupt_mode "signal" :metadata (:debugger t)) nil)))) jupyter-api-kernel-websocket :custom-header-alist jupyter-api-auth-headers :on-open make-closure #[257 "\300\301\240\207" [V0 nil] 3 "

(fn WS)"] :on-close #[257 "\300\242\203	 \301\302!\207\300\303\240\207" [V0 error "Kernel connection could not be established" t] 3 "

(fn WS)"] :on-message #[514 "\303!
>\204 \304\305\306D\"\210\211\307H\211\310>\2036 \311\303!
>\204( \304\305\306D\"\210\312H!\313\300\242\314\315B!\"\207\313\301\314\316\303!
>\204K \304\305\306D\"\210\307HD!\"\207" [V0 V1 cl-struct-websocket-frame-tags type-of signal wrong-type-argument websocket-frame 1 (binary text) jupyter-read-plist-from-string 2 jupyter-run-with-state jupyter-publish message error] 11 "

(fn WS FRAME)"]] 14]) (nil) #s(hash-table test eq purecopy t data (message 14 send 20)) jupyter-content error "Attempting to send message to shutdown kernel" #[1285 "\301\242\242\302!>\204 \303\304\305D\"\210\211\306H\262\307\310\"\311\312\313
\314&\266\202\"\207" [cl-struct-websocket-tags websocket-send-text type-of signal wrong-type-argument websocket 2 plist-get :session jupyter-encode-raw-message :channel :msg-id :content] 18 "

(fn WS CHANNEL MSG-TYPE CONTENT MSG-ID)"] (websocket-closed) nil #s(hash-table test eq purecopy t data (start 127 stop 150)) "Can't start I/O connection to shutdown kernel" websocket-openp websocket-close] 18 "

(fn EVENT)"] (subscribers #[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [#[257 "\303\304!\211\204 \305!\207\306\301!
>\204 \307\310\311\301D\"\210\301\312H\2037 \211\313\230\203* \314C\207\300\315!\230\205C \301\"\207\300\315!\230\205C \301\"\207" ["4b09f712-ee03-45d1-be9a-996919662b66" #s(jupyter-org-request "4b09f712-ee03-45d1-be9a-996919662b66" "execute_request" (:code "# Some basic data science imports
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.pipeline import Pipeline
import datetime

import time
import os

# Some gudhi imports for TDA

import tda_pipeline
from tda_pipeline import DataSelector, RipsPersistence, LPNorm
from gudhi.representations import Landscape

# Some graphical imports for the web app
import ipywidgets as widgets
import plotly.graph_objects as go

# Some imports for ipywidgets
from ipywidgets import DatePicker, BoundedIntText, ToggleButton, Text, HBox, VBox
from IPython.display import display

# cf. data_generation.py
df = pd.read_csv('latest.csv', index_col=0)

# min, max and default start values taken from the dataset - Python 3.7+
min_value = datetime.date.fromisoformat(df.index[0])
max_value = datetime.date.fromisoformat(df.index[-1])

last_year = max_value - datetime.timedelta(days=250)

# Widgets
start = DatePicker(description='start', value = last_year)
end   = DatePicker(description='end', value = max_value)
window = BoundedIntText(value=50, min=10, max=100, step=1, description='Windows size')

button = ToggleButton(description='Compute', icon='cogs')

def nearest_str_date(items, pivot):
    return min(items, key=lambda str_date: abs(datetime.date.fromisoformat(str_date) - pivot))

def compute_Lp_norms():
    w=int(window.value)
    start_idx = df.index.get_loc(str(nearest_str_date(df.index, start.value - datetime.timedelta(days=w))))
    end_idx = df.index.get_loc(str(nearest_str_date(df.index, end.value)))
    # Some error management
    if start_idx == end_idx:
        raise IndexError('Start date must be different from end date.')
    if end_idx < w:
        end_idx = w
    if end_idx < start_idx:
        start_idx, end_idx = end_idx, start_idx

    pipe = Pipeline(
        [
            (\"data_sel\", DataSelector(start=start_idx, end=end_idx, w=w)),
            (\"rips_pers\", RipsPersistence(max_rips_dimension=2, max_persistence_dimension=2, only_this_dim=1, n_jobs=-1)),
            (\"landscape\", Landscape(resolution=1000)),
            (\"lpnorm\", LPNorm(n_jobs=-1)),
            (\"mms\", MinMaxScaler()),
        ]
    )

    start_chrono = float(time.time())
    #os.write(1, bytes(str(start_chrono),'UTF-8') + b'\\r\\n')
    L1L2mms = pipe.fit_transform(df)
    stop_chrono = float(time.time())
    #os.write(1, bytes(str(stop_chrono),'UTF-8') + b'\\r\\n')
    os.write(1, bytes(str(stop_chrono - start_chrono),'UTF-8') + b' sec. \\r\\n')
    
    l1l2df = pd.DataFrame({'date': df[start_idx+w:end_idx].index, 'L1': L1L2mms.transpose()[0], 'L2': L1L2mms.transpose()[1]})
    # Calculate the variance for the L norms
    j = 0

    for i in l1l2df.index:
        if j < w:
            k = 0
        else:
            k = j - w
        l1l2df.loc[i, 'L1_variance'] = np.var(l1l2df.iloc[k:j].L1)
        l1l2df.loc[i, 'L2_variance'] = np.var(l1l2df.iloc[k:j].L2)
        j += 1
        
    return l1l2df

def compute(args):
    l1l2df = compute_Lp_norms()
    fig.data[0]['x'] = l1l2df['date']
    fig.data[0]['y'] = l1l2df['L1']
    fig.data[1]['x'] = l1l2df['date']
    fig.data[1]['y'] = l1l2df['L2']
    fig.data[2]['x'] = l1l2df['date']
    fig.data[2]['y'] = l1l2df['L1_variance']
    fig.data[3]['x'] = l1l2df['date']
    fig.data[3]['y'] = l1l2df['L2_variance']
    
button.observe(compute, 'value')

# Layout
left_box = HBox([start, end, window, button])

fig = go.FigureWidget()

l1l2df = compute_Lp_norms()
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1'], mode='lines', name='L1')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2'], mode='lines', name='L2')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1_variance'], mode='lines', name='L1_variance')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2_variance'], mode='lines', name='L2_variance')
fig.update_xaxes(dtick=\"M1\", tickformat=\"%b\\n%Y\")
fig.layout.title.text = 'Lp norms'

display(left_box)
fig" :silent :json-false :store_history t :user_expressions #s(hash-table) :allow_stdin t :stop_on_error :json-false) #5 (26440 37591 495486 292000) t (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_530" :msg_type "execute_reply" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.530238Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_530" :msg_type "execute_reply" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata (:started "2024-11-28T15:57:11.501467Z" :dependencies_met t :engine "09acb503-cf8f-4eef-b1b4-159ead369f19" :status "error") :content (:status "error" :traceback ["[0;31m---------------------------------------------------------------------------[0m" "[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)" "Cell [0;32mIn[47], line 13[0m
[1;32m      9[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m
[1;32m     11[0m [38;5;66;03m# Some gudhi imports for TDA[39;00m
[0;32m---> 13[0m [38;5;28;01mimport[39;00m [38;5;21;01mtda_pipeline[39;00m
[1;32m     14[0m [38;5;28;01mfrom[39;00m [38;5;21;01mtda_pipeline[39;00m [38;5;28;01mimport[39;00m DataSelector, RipsPersistence, LPNorm
[1;32m     15[0m [38;5;28;01mfrom[39;00m [38;5;21;01mgudhi[39;00m[38;5;21;01m.[39;00m[38;5;21;01mrepresentations[39;00m [38;5;28;01mimport[39;00m Landscape
" "[0;31mModuleNotFoundError[0m: No module named 'tda_pipeline'"] :ename "ModuleNotFoundError" :evalue "No module named 'tda_pipeline'" :engine_info (:engine_uuid "09acb503-cf8f-4eef-b1b4-159ead369f19" :engine_id -1 :method "execute") :execution_count 47 :user_expressions nil :payload []) :buffers [] :channel "shell") ((:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_527" :msg_type "status" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.501001Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_527" :msg_type "status" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata nil :content (:execution_state "busy") :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_528" :msg_type "execute_input" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.501494Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_528" :msg_type "execute_input" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata nil :content (:code "# Some basic data science imports
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.pipeline import Pipeline
import datetime

import time
import os

# Some gudhi imports for TDA

import tda_pipeline
from tda_pipeline import DataSelector, RipsPersistence, LPNorm
from gudhi.representations import Landscape

# Some graphical imports for the web app
import ipywidgets as widgets
import plotly.graph_objects as go

# Some imports for ipywidgets
from ipywidgets import DatePicker, BoundedIntText, ToggleButton, Text, HBox, VBox
from IPython.display import display

# cf. data_generation.py
df = pd.read_csv('latest.csv', index_col=0)

# min, max and default start values taken from the dataset - Python 3.7+
min_value = datetime.date.fromisoformat(df.index[0])
max_value = datetime.date.fromisoformat(df.index[-1])

last_year = max_value - datetime.timedelta(days=250)

# Widgets
start = DatePicker(description='start', value = last_year)
end   = DatePicker(description='end', value = max_value)
window = BoundedIntText(value=50, min=10, max=100, step=1, description='Windows size')

button = ToggleButton(description='Compute', icon='cogs')

def nearest_str_date(items, pivot):
    return min(items, key=lambda str_date: abs(datetime.date.fromisoformat(str_date) - pivot))

def compute_Lp_norms():
    w=int(window.value)
    start_idx = df.index.get_loc(str(nearest_str_date(df.index, start.value - datetime.timedelta(days=w))))
    end_idx = df.index.get_loc(str(nearest_str_date(df.index, end.value)))
    # Some error management
    if start_idx == end_idx:
        raise IndexError('Start date must be different from end date.')
    if end_idx < w:
        end_idx = w
    if end_idx < start_idx:
        start_idx, end_idx = end_idx, start_idx

    pipe = Pipeline(
        [
            (\"data_sel\", DataSelector(start=start_idx, end=end_idx, w=w)),
            (\"rips_pers\", RipsPersistence(max_rips_dimension=2, max_persistence_dimension=2, only_this_dim=1, n_jobs=-1)),
            (\"landscape\", Landscape(resolution=1000)),
            (\"lpnorm\", LPNorm(n_jobs=-1)),
            (\"mms\", MinMaxScaler()),
        ]
    )

    start_chrono = float(time.time())
    #os.write(1, bytes(str(start_chrono),'UTF-8') + b'\\r\\n')
    L1L2mms = pipe.fit_transform(df)
    stop_chrono = float(time.time())
    #os.write(1, bytes(str(stop_chrono),'UTF-8') + b'\\r\\n')
    os.write(1, bytes(str(stop_chrono - start_chrono),'UTF-8') + b' sec. \\r\\n')
    
    l1l2df = pd.DataFrame({'date': df[start_idx+w:end_idx].index, 'L1': L1L2mms.transpose()[0], 'L2': L1L2mms.transpose()[1]})
    # Calculate the variance for the L norms
    j = 0

    for i in l1l2df.index:
        if j < w:
            k = 0
        else:
            k = j - w
        l1l2df.loc[i, 'L1_variance'] = np.var(l1l2df.iloc[k:j].L1)
        l1l2df.loc[i, 'L2_variance'] = np.var(l1l2df.iloc[k:j].L2)
        j += 1
        
    return l1l2df

def compute(args):
    l1l2df = compute_Lp_norms()
    fig.data[0]['x'] = l1l2df['date']
    fig.data[0]['y'] = l1l2df['L1']
    fig.data[1]['x'] = l1l2df['date']
    fig.data[1]['y'] = l1l2df['L2']
    fig.data[2]['x'] = l1l2df['date']
    fig.data[2]['y'] = l1l2df['L1_variance']
    fig.data[3]['x'] = l1l2df['date']
    fig.data[3]['y'] = l1l2df['L2_variance']
    
button.observe(compute, 'value')

# Layout
left_box = HBox([start, end, window, button])

fig = go.FigureWidget()

l1l2df = compute_Lp_norms()
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1'], mode='lines', name='L1')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2'], mode='lines', name='L2')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1_variance'], mode='lines', name='L1_variance')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2_variance'], mode='lines', name='L2_variance')
fig.update_xaxes(dtick=\"M1\", tickformat=\"%b\\n%Y\")
fig.layout.title.text = 'Lp norms'

display(left_box)
fig" :execution_count 47) :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_529" :msg_type "error" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.529306Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_529" :msg_type "error" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata nil :content (:traceback ["[0;31m---------------------------------------------------------------------------[0m" "[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)" "Cell [0;32mIn[47], line 13[0m
[1;32m      9[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m
[1;32m     11[0m [38;5;66;03m# Some gudhi imports for TDA[39;00m
[0;32m---> 13[0m [38;5;28;01mimport[39;00m [38;5;21;01mtda_pipeline[39;00m
[1;32m     14[0m [38;5;28;01mfrom[39;00m [38;5;21;01mtda_pipeline[39;00m [38;5;28;01mimport[39;00m DataSelector, RipsPersistence, LPNorm
[1;32m     15[0m [38;5;28;01mfrom[39;00m [38;5;21;01mgudhi[39;00m[38;5;21;01m.[39;00m[38;5;21;01mrepresentations[39;00m [38;5;28;01mimport[39;00m Landscape
" "[0;31mModuleNotFoundError[0m: No module named 'tda_pipeline'"] :ename "ModuleNotFoundError" :evalue "No module named 'tda_pipeline'") :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_531" :msg_type "status" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.530475Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_531" :msg_type "status" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata nil :content (:execution_state "idle") :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_530" :msg_type "execute_reply" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.530238Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_530" :msg_type "execute_reply" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata (:started "2024-11-28T15:57:11.501467Z" :dependencies_met t :engine "09acb503-cf8f-4eef-b1b4-159ead369f19" :status "error") :content (:status "error" :traceback ["[0;31m---------------------------------------------------------------------------[0m" "[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)" "Cell [0;32mIn[47], line 13[0m
[1;32m      9[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m
[1;32m     11[0m [38;5;66;03m# Some gudhi imports for TDA[39;00m
[0;32m---> 13[0m [38;5;28;01mimport[39;00m [38;5;21;01mtda_pipeline[39;00m
[1;32m     14[0m [38;5;28;01mfrom[39;00m [38;5;21;01mtda_pipeline[39;00m [38;5;28;01mimport[39;00m DataSelector, RipsPersistence, LPNorm
[1;32m     15[0m [38;5;28;01mfrom[39;00m [38;5;21;01mgudhi[39;00m[38;5;21;01m.[39;00m[38;5;21;01mrepresentations[39;00m [38;5;28;01mimport[39;00m Landscape
" "[0;31mModuleNotFoundError[0m: No module named 'tda_pipeline'"] :ename "ModuleNotFoundError" :evalue "No module named 'tda_pipeline'" :engine_info (:engine_uuid "09acb503-cf8f-4eef-b1b4-159ead369f19" :engine_id -1 :method "execute") :execution_count 47 :user_expressions nil :payload []) :buffers [] :channel "shell")) #10 nil value ((:colname-names) (:rowname-names) (:result-params "replace") (:result-type . value) (:results . "replace") (:exports . "code") (:kernel . "python3") (:session . "py") (:async . "yes") (:tangle . "no") (:hlines . "no") (:noweb . "no") (:cache . "no")) nil nil nil t nil #<marker at 659 in tda_web_app.org> t #<overlay in no buffer>) cl-struct-jupyter-request-tags #[514 "\301!>\204 \302\303\304D\"\210\305I\210\301!>\204# \302\303\304D\"\210\306\306HC\244I\210\307!\204C \310!\311\230\204C \310!\312\230\203W \301!>\204R \302\303\304D\"\210\313\314I\210\315\316BB!\207" [cl-struct-jupyter-request-tags type-of signal wrong-type-argument jupyter-request 7 8 jupyter-message-status-idle-p jupyter-message-type "kernel_info_reply" "shutdown_reply" 6 t jupyter-content :parent-request] 6 "

(fn REQ MSG)"] jupyter-message-type jupyter-content type-of signal wrong-type-argument jupyter-request 6 "status" unsubscribe jupyter-message-parent-id] 7 "

(fn MSG)"] (subscribers #[257 "\211:\203L \211\242\211\301\267\202G \243\211:\203& \211\242\243\211\204  \300!\207\302\303\"\207\302\303\"\207\243\211:\203B \211\243\211\204= \304\305\306\"\207\302\303\"\207\302\303\"\207\302\303\"\207\302\303\"\207" [#[257 "\301!\205 \302\303\"\304\300#\262\207" [#5 jupyter-message-type plist-get :channel jupyter-handle-message] 6 "

(fn MSG)"] #s(hash-table test eq purecopy t data (content 13 subscribe 43)) error "Unhandled subscriber content: %s" signal jupyter-subscribed-subscriber nil] 8 "

(fn SUB-CONTENT)"]) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"]) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"] #[257 "\211:\203L \211\242\211\301\267\202G \243\211:\203& \211\242\243\211\204  \300!\207\302\303\"\207\302\303\"\207\243\211:\203B \211\243\211\204= \304\305\306\"\207\302\303\"\207\302\303\"\207\302\303\"\207\302\303\"\207" [#[257 "\211\303\267\202\" \304\302!\207\305\302!\210\301\306\240\210\307\300\242!\205H \310\300\242!\207\311\302!\207\211:\205H \211\242\211\312=\205F \243\211:\205D \211\242\243\211?\205B \302!\266\202\262\262\207" [(#s(websocket open (:id "6bf9469b-83c6-4b8d-8e54-385f791b796f" :session #s(jupyter-session nil "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" nil)) #[257 "\300\301\240\207" [(nil) nil] 3 "

(fn WS)"] #[514 "\303!
>\204 \304\305\306D\"\210\211\307H\211\310>\2036 \311\303!
>\204( \304\305\306D\"\210\312H!\313\300\242\314\315B!\"\207\313\301\314\316\303!
>\204K \304\305\306D\"\210\307HD!\"\207" [(#[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [#[257 "\211:\203y \211\242\211\303\267\210\202w \243\304!\207\243\211:\205v \211\242\243\211:\205t \211\242\243\211:\205r \211\242\243\211:\205p \211\242\243\211?\205n \302\242\203H \305\306!\210\307\3101Z \211\300
	%0\207\210\300\301\242 \240\210\211\300
	%\262\266\202\266\202\266\202\266\202\207\311\207\211\312\267\202\233 \302\242\203\210 \305\313!\210\314\300\242!?\205\234 \300\301\242 \240\207\315\300\242!\207\311\207" [#11 (#[0 "\305\304\303\306\307\304!\310\311\312\300\"\313\311\314\300\"\315\311\316\301\302#&
\207" [(nil) #15 #[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [jupyter-content (subscribers) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"] "6bf9469b-83c6-4b8d-8e54-385f791b796f" #s(jupyter-server "http://localhost:8888" "ws://localhost:8888" t (:default "python3" :kernelspecs (#s(jupyter-kernelspec "python3" (:argv ["python" "-m" "ipykernel_launcher" "-f" "{connection_file}"] :env nil :display_name "Python 3 (ipykernel)" :language "python" :interrupt_mode "signal" :metadata (:debugger t)) nil)))) jupyter-api-kernel-websocket :custom-header-alist jupyter-api-auth-headers :on-open make-closure #[257 "\300\301\240\207" [V0 nil] 3 "

(fn WS)"] :on-close #[257 "\300\242\203	 \301\302!\207\300\303\240\207" [V0 error "Kernel connection could not be established" t] 3 "

(fn WS)"] :on-message #[514 "\303!
>\204 \304\305\306D\"\210\211\307H\211\310>\2036 \311\303!
>\204( \304\305\306D\"\210\312H!\313\300\242\314\315B!\"\207\313\301\314\316\303!
>\204K \304\305\306D\"\210\307HD!\"\207" [V0 V1 cl-struct-websocket-frame-tags type-of signal wrong-type-argument websocket-frame 1 (binary text) jupyter-read-plist-from-string 2 jupyter-run-with-state jupyter-publish message error] 11 "

(fn WS FRAME)"]] 14]) (nil) #s(hash-table test eq purecopy t data (message 14 send 20)) jupyter-content error "Attempting to send message to shutdown kernel" #[1285 "\301\242\242\302!>\204 \303\304\305D\"\210\211\306H\262\307\310\"\311\312\313
\314&\266\202\"\207" [cl-struct-websocket-tags websocket-send-text type-of signal wrong-type-argument websocket 2 plist-get :session jupyter-encode-raw-message :channel :msg-id :content] 18 "

(fn WS CHANNEL MSG-TYPE CONTENT MSG-ID)"] (websocket-closed) nil #s(hash-table test eq purecopy t data (start 127 stop 150)) "Can't start I/O connection to shutdown kernel" websocket-openp websocket-close] 18 "

(fn EVENT)"] (subscribers #[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [#[257 "\303\304!\211\204 \305!\207\306\301!
>\204 \307\310\311\301D\"\210\301\312H\2037 \211\313\230\203* \314C\207\300\315!\230\205C \301\"\207\300\315!\230\205C \301\"\207" ["4b09f712-ee03-45d1-be9a-996919662b66" #s(jupyter-org-request "4b09f712-ee03-45d1-be9a-996919662b66" "execute_request" (:code "# Some basic data science imports
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.pipeline import Pipeline
import datetime

import time
import os

# Some gudhi imports for TDA

import tda_pipeline
from tda_pipeline import DataSelector, RipsPersistence, LPNorm
from gudhi.representations import Landscape

# Some graphical imports for the web app
import ipywidgets as widgets
import plotly.graph_objects as go

# Some imports for ipywidgets
from ipywidgets import DatePicker, BoundedIntText, ToggleButton, Text, HBox, VBox
from IPython.display import display

# cf. data_generation.py
df = pd.read_csv('latest.csv', index_col=0)

# min, max and default start values taken from the dataset - Python 3.7+
min_value = datetime.date.fromisoformat(df.index[0])
max_value = datetime.date.fromisoformat(df.index[-1])

last_year = max_value - datetime.timedelta(days=250)

# Widgets
start = DatePicker(description='start', value = last_year)
end   = DatePicker(description='end', value = max_value)
window = BoundedIntText(value=50, min=10, max=100, step=1, description='Windows size')

button = ToggleButton(description='Compute', icon='cogs')

def nearest_str_date(items, pivot):
    return min(items, key=lambda str_date: abs(datetime.date.fromisoformat(str_date) - pivot))

def compute_Lp_norms():
    w=int(window.value)
    start_idx = df.index.get_loc(str(nearest_str_date(df.index, start.value - datetime.timedelta(days=w))))
    end_idx = df.index.get_loc(str(nearest_str_date(df.index, end.value)))
    # Some error management
    if start_idx == end_idx:
        raise IndexError('Start date must be different from end date.')
    if end_idx < w:
        end_idx = w
    if end_idx < start_idx:
        start_idx, end_idx = end_idx, start_idx

    pipe = Pipeline(
        [
            (\"data_sel\", DataSelector(start=start_idx, end=end_idx, w=w)),
            (\"rips_pers\", RipsPersistence(max_rips_dimension=2, max_persistence_dimension=2, only_this_dim=1, n_jobs=-1)),
            (\"landscape\", Landscape(resolution=1000)),
            (\"lpnorm\", LPNorm(n_jobs=-1)),
            (\"mms\", MinMaxScaler()),
        ]
    )

    start_chrono = float(time.time())
    #os.write(1, bytes(str(start_chrono),'UTF-8') + b'\\r\\n')
    L1L2mms = pipe.fit_transform(df)
    stop_chrono = float(time.time())
    #os.write(1, bytes(str(stop_chrono),'UTF-8') + b'\\r\\n')
    os.write(1, bytes(str(stop_chrono - start_chrono),'UTF-8') + b' sec. \\r\\n')
    
    l1l2df = pd.DataFrame({'date': df[start_idx+w:end_idx].index, 'L1': L1L2mms.transpose()[0], 'L2': L1L2mms.transpose()[1]})
    # Calculate the variance for the L norms
    j = 0

    for i in l1l2df.index:
        if j < w:
            k = 0
        else:
            k = j - w
        l1l2df.loc[i, 'L1_variance'] = np.var(l1l2df.iloc[k:j].L1)
        l1l2df.loc[i, 'L2_variance'] = np.var(l1l2df.iloc[k:j].L2)
        j += 1
        
    return l1l2df

def compute(args):
    l1l2df = compute_Lp_norms()
    fig.data[0]['x'] = l1l2df['date']
    fig.data[0]['y'] = l1l2df['L1']
    fig.data[1]['x'] = l1l2df['date']
    fig.data[1]['y'] = l1l2df['L2']
    fig.data[2]['x'] = l1l2df['date']
    fig.data[2]['y'] = l1l2df['L1_variance']
    fig.data[3]['x'] = l1l2df['date']
    fig.data[3]['y'] = l1l2df['L2_variance']
    
button.observe(compute, 'value')

# Layout
left_box = HBox([start, end, window, button])

fig = go.FigureWidget()

l1l2df = compute_Lp_norms()
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1'], mode='lines', name='L1')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2'], mode='lines', name='L2')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1_variance'], mode='lines', name='L1_variance')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2_variance'], mode='lines', name='L2_variance')
fig.update_xaxes(dtick=\"M1\", tickformat=\"%b\\n%Y\")
fig.layout.title.text = 'Lp norms'

display(left_box)
fig" :silent :json-false :store_history t :user_expressions #s(hash-table) :allow_stdin t :stop_on_error :json-false) #5 (26440 37591 495486 292000) t (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_530" :msg_type "execute_reply" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.530238Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_530" :msg_type "execute_reply" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata (:started "2024-11-28T15:57:11.501467Z" :dependencies_met t :engine "09acb503-cf8f-4eef-b1b4-159ead369f19" :status "error") :content (:status "error" :traceback ["[0;31m---------------------------------------------------------------------------[0m" "[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)" "Cell [0;32mIn[47], line 13[0m
[1;32m      9[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m
[1;32m     11[0m [38;5;66;03m# Some gudhi imports for TDA[39;00m
[0;32m---> 13[0m [38;5;28;01mimport[39;00m [38;5;21;01mtda_pipeline[39;00m
[1;32m     14[0m [38;5;28;01mfrom[39;00m [38;5;21;01mtda_pipeline[39;00m [38;5;28;01mimport[39;00m DataSelector, RipsPersistence, LPNorm
[1;32m     15[0m [38;5;28;01mfrom[39;00m [38;5;21;01mgudhi[39;00m[38;5;21;01m.[39;00m[38;5;21;01mrepresentations[39;00m [38;5;28;01mimport[39;00m Landscape
" "[0;31mModuleNotFoundError[0m: No module named 'tda_pipeline'"] :ename "ModuleNotFoundError" :evalue "No module named 'tda_pipeline'" :engine_info (:engine_uuid "09acb503-cf8f-4eef-b1b4-159ead369f19" :engine_id -1 :method "execute") :execution_count 47 :user_expressions nil :payload []) :buffers [] :channel "shell") ((:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_527" :msg_type "status" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.501001Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_527" :msg_type "status" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata nil :content (:execution_state "busy") :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_528" :msg_type "execute_input" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.501494Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_528" :msg_type "execute_input" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata nil :content (:code "# Some basic data science imports
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.pipeline import Pipeline
import datetime

import time
import os

# Some gudhi imports for TDA

import tda_pipeline
from tda_pipeline import DataSelector, RipsPersistence, LPNorm
from gudhi.representations import Landscape

# Some graphical imports for the web app
import ipywidgets as widgets
import plotly.graph_objects as go

# Some imports for ipywidgets
from ipywidgets import DatePicker, BoundedIntText, ToggleButton, Text, HBox, VBox
from IPython.display import display

# cf. data_generation.py
df = pd.read_csv('latest.csv', index_col=0)

# min, max and default start values taken from the dataset - Python 3.7+
min_value = datetime.date.fromisoformat(df.index[0])
max_value = datetime.date.fromisoformat(df.index[-1])

last_year = max_value - datetime.timedelta(days=250)

# Widgets
start = DatePicker(description='start', value = last_year)
end   = DatePicker(description='end', value = max_value)
window = BoundedIntText(value=50, min=10, max=100, step=1, description='Windows size')

button = ToggleButton(description='Compute', icon='cogs')

def nearest_str_date(items, pivot):
    return min(items, key=lambda str_date: abs(datetime.date.fromisoformat(str_date) - pivot))

def compute_Lp_norms():
    w=int(window.value)
    start_idx = df.index.get_loc(str(nearest_str_date(df.index, start.value - datetime.timedelta(days=w))))
    end_idx = df.index.get_loc(str(nearest_str_date(df.index, end.value)))
    # Some error management
    if start_idx == end_idx:
        raise IndexError('Start date must be different from end date.')
    if end_idx < w:
        end_idx = w
    if end_idx < start_idx:
        start_idx, end_idx = end_idx, start_idx

    pipe = Pipeline(
        [
            (\"data_sel\", DataSelector(start=start_idx, end=end_idx, w=w)),
            (\"rips_pers\", RipsPersistence(max_rips_dimension=2, max_persistence_dimension=2, only_this_dim=1, n_jobs=-1)),
            (\"landscape\", Landscape(resolution=1000)),
            (\"lpnorm\", LPNorm(n_jobs=-1)),
            (\"mms\", MinMaxScaler()),
        ]
    )

    start_chrono = float(time.time())
    #os.write(1, bytes(str(start_chrono),'UTF-8') + b'\\r\\n')
    L1L2mms = pipe.fit_transform(df)
    stop_chrono = float(time.time())
    #os.write(1, bytes(str(stop_chrono),'UTF-8') + b'\\r\\n')
    os.write(1, bytes(str(stop_chrono - start_chrono),'UTF-8') + b' sec. \\r\\n')
    
    l1l2df = pd.DataFrame({'date': df[start_idx+w:end_idx].index, 'L1': L1L2mms.transpose()[0], 'L2': L1L2mms.transpose()[1]})
    # Calculate the variance for the L norms
    j = 0

    for i in l1l2df.index:
        if j < w:
            k = 0
        else:
            k = j - w
        l1l2df.loc[i, 'L1_variance'] = np.var(l1l2df.iloc[k:j].L1)
        l1l2df.loc[i, 'L2_variance'] = np.var(l1l2df.iloc[k:j].L2)
        j += 1
        
    return l1l2df

def compute(args):
    l1l2df = compute_Lp_norms()
    fig.data[0]['x'] = l1l2df['date']
    fig.data[0]['y'] = l1l2df['L1']
    fig.data[1]['x'] = l1l2df['date']
    fig.data[1]['y'] = l1l2df['L2']
    fig.data[2]['x'] = l1l2df['date']
    fig.data[2]['y'] = l1l2df['L1_variance']
    fig.data[3]['x'] = l1l2df['date']
    fig.data[3]['y'] = l1l2df['L2_variance']
    
button.observe(compute, 'value')

# Layout
left_box = HBox([start, end, window, button])

fig = go.FigureWidget()

l1l2df = compute_Lp_norms()
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1'], mode='lines', name='L1')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2'], mode='lines', name='L2')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1_variance'], mode='lines', name='L1_variance')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2_variance'], mode='lines', name='L2_variance')
fig.update_xaxes(dtick=\"M1\", tickformat=\"%b\\n%Y\")
fig.layout.title.text = 'Lp norms'

display(left_box)
fig" :execution_count 47) :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_529" :msg_type "error" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.529306Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_529" :msg_type "error" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata nil :content (:traceback ["[0;31m---------------------------------------------------------------------------[0m" "[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)" "Cell [0;32mIn[47], line 13[0m
[1;32m      9[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m
[1;32m     11[0m [38;5;66;03m# Some gudhi imports for TDA[39;00m
[0;32m---> 13[0m [38;5;28;01mimport[39;00m [38;5;21;01mtda_pipeline[39;00m
[1;32m     14[0m [38;5;28;01mfrom[39;00m [38;5;21;01mtda_pipeline[39;00m [38;5;28;01mimport[39;00m DataSelector, RipsPersistence, LPNorm
[1;32m     15[0m [38;5;28;01mfrom[39;00m [38;5;21;01mgudhi[39;00m[38;5;21;01m.[39;00m[38;5;21;01mrepresentations[39;00m [38;5;28;01mimport[39;00m Landscape
" "[0;31mModuleNotFoundError[0m: No module named 'tda_pipeline'"] :ename "ModuleNotFoundError" :evalue "No module named 'tda_pipeline'") :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_531" :msg_type "status" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.530475Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_531" :msg_type "status" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata nil :content (:execution_state "idle") :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_530" :msg_type "execute_reply" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.530238Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_530" :msg_type "execute_reply" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata (:started "2024-11-28T15:57:11.501467Z" :dependencies_met t :engine "09acb503-cf8f-4eef-b1b4-159ead369f19" :status "error") :content (:status "error" :traceback ["[0;31m---------------------------------------------------------------------------[0m" "[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)" "Cell [0;32mIn[47], line 13[0m
[1;32m      9[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m
[1;32m     11[0m [38;5;66;03m# Some gudhi imports for TDA[39;00m
[0;32m---> 13[0m [38;5;28;01mimport[39;00m [38;5;21;01mtda_pipeline[39;00m
[1;32m     14[0m [38;5;28;01mfrom[39;00m [38;5;21;01mtda_pipeline[39;00m [38;5;28;01mimport[39;00m DataSelector, RipsPersistence, LPNorm
[1;32m     15[0m [38;5;28;01mfrom[39;00m [38;5;21;01mgudhi[39;00m[38;5;21;01m.[39;00m[38;5;21;01mrepresentations[39;00m [38;5;28;01mimport[39;00m Landscape
" "[0;31mModuleNotFoundError[0m: No module named 'tda_pipeline'"] :ename "ModuleNotFoundError" :evalue "No module named 'tda_pipeline'" :engine_info (:engine_uuid "09acb503-cf8f-4eef-b1b4-159ead369f19" :engine_id -1 :method "execute") :execution_count 47 :user_expressions nil :payload []) :buffers [] :channel "shell")) #19 nil value ((:colname-names) (:rowname-names) (:result-params "replace") (:result-type . value) (:results . "replace") (:exports . "code") (:kernel . "python3") (:session . "py") (:async . "yes") (:tangle . "no") (:hlines . "no") (:noweb . "no") (:cache . "no")) nil nil nil t nil #<marker at 659 in tda_web_app.org> t #<overlay in no buffer>) cl-struct-jupyter-request-tags #[514 "\301!>\204 \302\303\304D\"\210\305I\210\301!>\204# \302\303\304D\"\210\306\306HC\244I\210\307!\204C \310!\311\230\204C \310!\312\230\203W \301!>\204R \302\303\304D\"\210\313\314I\210\315\316BB!\207" [cl-struct-jupyter-request-tags type-of signal wrong-type-argument jupyter-request 7 8 jupyter-message-status-idle-p jupyter-message-type "kernel_info_reply" "shutdown_reply" 6 t jupyter-content :parent-request] 6 "

(fn REQ MSG)"] jupyter-message-type jupyter-content type-of signal wrong-type-argument jupyter-request 6 "status" unsubscribe jupyter-message-parent-id] 7 "

(fn MSG)"] (subscribers #[257 "\211:\203L \211\242\211\301\267\202G \243\211:\203& \211\242\243\211\204  \300!\207\302\303\"\207\302\303\"\207\243\211:\203B \211\243\211\204= \304\305\306\"\207\302\303\"\207\302\303\"\207\302\303\"\207\302\303\"\207" [#[257 "\301!\205 \302\303\"\304\300#\262\207" [#5 jupyter-message-type plist-get :channel jupyter-handle-message] 6 "

(fn MSG)"] #s(hash-table test eq purecopy t data (content 13 subscribe 43)) error "Unhandled subscriber content: %s" signal jupyter-subscribed-subscriber nil] 8 "

(fn SUB-CONTENT)"]) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"]) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"]) #[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [jupyter-content (subscribers) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"] cl-struct-websocket-frame-tags type-of signal wrong-type-argument websocket-frame 1 (binary text) jupyter-read-plist-from-string 2 jupyter-run-with-state jupyter-publish message error] 11 "

(fn WS FRAME)"] #[257 "\300\242\203	 \301\302!\207\300\303\240\207" [(nil) error "Kernel connection could not be established" t] 3 "

(fn WS)"] websocket-default-error-handler nil nil nil "ws://localhost:8888/api/kernels/6bf9469b-83c6-4b8d-8e54-385f791b796f/channels?session_id=f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" nil nil #<process websocket to ws://localhost:8888/api/kernels/6bf9469b-83c6-4b8d-8e54-385f791b796f/channels?session_id=f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0> nil nil "wlYv8zPJwfSVI4dSA1dXwtQQaB4=" nil)) (nil) #s(jupyter-server-kernel #s(jupyter-kernelspec "python3" (:argv ["python" "-m" "ipykernel_launcher" "-f" "{connection_file}"] :env nil :display_name "Python 3 (ipykernel)" :language "python" :interrupt_mode "signal" :metadata (:debugger t)) nil) #s(jupyter-session nil "6a8d255a-2f17-46fd-8af1-0c55b94d0c7b" nil) #s(jupyter-server "http://localhost:8888" "ws://localhost:8888" t (:default "python3" :kernelspecs (#s(jupyter-kernelspec "python3" (:argv ["python" "-m" "ipykernel_launcher" "-f" "{connection_file}"] :env nil :display_name "Python 3 (ipykernel)" :language "python" :interrupt_mode "signal" :metadata (:debugger t)) nil)))) "6bf9469b-83c6-4b8d-8e54-385f791b796f") #s(hash-table test eq purecopy t data (interrupt 6 shutdown 10 restart 30)) jupyter-interrupt jupyter-shutdown t websocket-openp websocket-close jupyter-restart action] 7 "

(fn ACTION)"] #s(hash-table test eq purecopy t data (content 13 subscribe 43)) error "Unhandled subscriber content: %s" signal jupyter-subscribed-subscriber nil] 8 "

(fn SUB-CONTENT)"]) #<buffer  *jupyter-kernel-client*> nil "null" nil #<buffer *jupyter-repl[python 3.12.3]-py*> nil nil nil) (26440 37519 845578 472000) t (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_484" :msg_type "execute_reply" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:55:59.860172Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_484" :msg_type "execute_reply" :parent_header (:msg_id "c1aed066-c076-44c6-957f-63f5bcdbc2a6" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:55:59.846815Z") :metadata (:started "2024-11-28T15:55:59.852082Z" :dependencies_met t :engine "09acb503-cf8f-4eef-b1b4-159ead369f19" :status "error") :content (:status "error" :traceback ["[0;36m  Cell [0;32mIn[45], line 12[0;36m[0m
[0;31m    from ./tda_pipeline import DataSelector, RipsPersistence, LPNorm[0m
[0m          ^[0m
[0;31mSyntaxError[0m[0;31m:[0m invalid syntax
"] :ename "SyntaxError" :evalue "invalid syntax (889736815.py, line 12)" :engine_info (:engine_uuid "09acb503-cf8f-4eef-b1b4-159ead369f19" :engine_id -1 :method "execute") :execution_count 45 :user_expressions nil :payload []) :buffers [] :channel "shell") ((:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_481" :msg_type "status" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:55:59.851141Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_481" :msg_type "status" :parent_header (:msg_id "c1aed066-c076-44c6-957f-63f5bcdbc2a6" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:55:59.846815Z") :metadata nil :content (:execution_state "busy") :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_482" :msg_type "execute_input" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:55:59.852099Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_482" :msg_type "execute_input" :parent_header (:msg_id "c1aed066-c076-44c6-957f-63f5bcdbc2a6" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:55:59.846815Z") :metadata nil :content (:code "# Some basic data science imports
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.pipeline import Pipeline
import datetime

import time
import os

# Some gudhi imports for TDA
from ./tda_pipeline import DataSelector, RipsPersistence, LPNorm
from gudhi.representations import Landscape

# Some graphical imports for the web app
import ipywidgets as widgets
import plotly.graph_objects as go

# Some imports for ipywidgets
from ipywidgets import DatePicker, BoundedIntText, ToggleButton, Text, HBox, VBox
from IPython.display import display

# cf. data_generation.py
df = pd.read_csv('latest.csv', index_col=0)

# min, max and default start values taken from the dataset - Python 3.7+
min_value = datetime.date.fromisoformat(df.index[0])
max_value = datetime.date.fromisoformat(df.index[-1])

last_year = max_value - datetime.timedelta(days=250)

# Widgets
start = DatePicker(description='start', value = last_year)
end   = DatePicker(description='end', value = max_value)
window = BoundedIntText(value=50, min=10, max=100, step=1, description='Windows size')

button = ToggleButton(description='Compute', icon='cogs')

def nearest_str_date(items, pivot):
    return min(items, key=lambda str_date: abs(datetime.date.fromisoformat(str_date) - pivot))

def compute_Lp_norms():
    w=int(window.value)
    start_idx = df.index.get_loc(str(nearest_str_date(df.index, start.value - datetime.timedelta(days=w))))
    end_idx = df.index.get_loc(str(nearest_str_date(df.index, end.value)))
    # Some error management
    if start_idx == end_idx:
        raise IndexError('Start date must be different from end date.')
    if end_idx < w:
        end_idx = w
    if end_idx < start_idx:
        start_idx, end_idx = end_idx, start_idx

    pipe = Pipeline(
        [
            (\"data_sel\", DataSelector(start=start_idx, end=end_idx, w=w)),
            (\"rips_pers\", RipsPersistence(max_rips_dimension=2, max_persistence_dimension=2, only_this_dim=1, n_jobs=-1)),
            (\"landscape\", Landscape(resolution=1000)),
            (\"lpnorm\", LPNorm(n_jobs=-1)),
            (\"mms\", MinMaxScaler()),
        ]
    )

    start_chrono = float(time.time())
    #os.write(1, bytes(str(start_chrono),'UTF-8') + b'\\r\\n')
    L1L2mms = pipe.fit_transform(df)
    stop_chrono = float(time.time())
    #os.write(1, bytes(str(stop_chrono),'UTF-8') + b'\\r\\n')
    os.write(1, bytes(str(stop_chrono - start_chrono),'UTF-8') + b' sec. \\r\\n')
    
    l1l2df = pd.DataFrame({'date': df[start_idx+w:end_idx].index, 'L1': L1L2mms.transpose()[0], 'L2': L1L2mms.transpose()[1]})
    # Calculate the variance for the L norms
    j = 0

    for i in l1l2df.index:
        if j < w:
            k = 0
        else:
            k = j - w
        l1l2df.loc[i, 'L1_variance'] = np.var(l1l2df.iloc[k:j].L1)
        l1l2df.loc[i, 'L2_variance'] = np.var(l1l2df.iloc[k:j].L2)
        j += 1
        
    return l1l2df

def compute(args):
    l1l2df = compute_Lp_norms()
    fig.data[0]['x'] = l1l2df['date']
    fig.data[0]['y'] = l1l2df['L1']
    fig.data[1]['x'] = l1l2df['date']
    fig.data[1]['y'] = l1l2df['L2']
    fig.data[2]['x'] = l1l2df['date']
    fig.data[2]['y'] = l1l2df['L1_variance']
    fig.data[3]['x'] = l1l2df['date']
    fig.data[3]['y'] = l1l2df['L2_variance']
    
button.observe(compute, 'value')

# Layout
left_box = HBox([start, end, window, button])

fig = go.FigureWidget()

l1l2df = compute_Lp_norms()
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1'], mode='lines', name='L1')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2'], mode='lines', name='L2')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1_variance'], mode='lines', name='L1_variance')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2_variance'], mode='lines', name='L2_variance')
fig.update_xaxes(dtick=\"M1\", tickformat=\"%b\\n%Y\")
fig.layout.title.text = 'Lp norms'

display(left_box)
fig" :execution_count 45) :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_483" :msg_type "error" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:55:59.858625Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_483" :msg_type "error" :parent_header (:msg_id "c1aed066-c076-44c6-957f-63f5bcdbc2a6" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:55:59.846815Z") :metadata nil :content (:traceback ["[0;36m  Cell [0;32mIn[45], line 12[0;36m[0m
[0;31m    from ./tda_pipeline import DataSelector, RipsPersistence, LPNorm[0m
[0m          ^[0m
[0;31mSyntaxError[0m[0;31m:[0m invalid syntax
"] :ename "SyntaxError" :evalue "invalid syntax (889736815.py, line 12)") :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_485" :msg_type "status" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:55:59.860733Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_485" :msg_type "status" :parent_header (:msg_id "c1aed066-c076-44c6-957f-63f5bcdbc2a6" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:55:59.846815Z") :metadata nil :content (:execution_state "idle") :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_484" :msg_type "execute_reply" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:55:59.860172Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_484" :msg_type "execute_reply" :parent_header (:msg_id "c1aed066-c076-44c6-957f-63f5bcdbc2a6" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:55:59.846815Z") :metadata (:started "2024-11-28T15:55:59.852082Z" :dependencies_met t :engine "09acb503-cf8f-4eef-b1b4-159ead369f19" :status "error") :content (:status "error" :traceback ["[0;36m  Cell [0;32mIn[45], line 12[0;36m[0m
[0;31m    from ./tda_pipeline import DataSelector, RipsPersistence, LPNorm[0m
[0m          ^[0m
[0;31mSyntaxError[0m[0;31m:[0m invalid syntax
"] :ename "SyntaxError" :evalue "invalid syntax (889736815.py, line 12)" :engine_info (:engine_uuid "09acb503-cf8f-4eef-b1b4-159ead369f19" :engine_id -1 :method "execute") :execution_count 45 :user_expressions nil :payload []) :buffers [] :channel "shell")) #[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [#[257 "\303\304!\211\204 \305!\207\306\301!
>\204 \307\310\311\301D\"\210\301\312H\2037 \211\313\230\203* \314C\207\300\315!\230\205C \301\"\207\300\315!\230\205C \301\"\207" ["c1aed066-c076-44c6-957f-63f5bcdbc2a6" #4 cl-struct-jupyter-request-tags #[514 "\301!>\204 \302\303\304D\"\210\305I\210\301!>\204# \302\303\304D\"\210\306\306HC\244I\210\307!\204C \310!\311\230\204C \310!\312\230\203W \301!>\204R \302\303\304D\"\210\313\314I\210\315\316BB!\207" [cl-struct-jupyter-request-tags type-of signal wrong-type-argument jupyter-request 7 8 jupyter-message-status-idle-p jupyter-message-type "kernel_info_reply" "shutdown_reply" 6 t jupyter-content :parent-request] 6 "

(fn REQ MSG)"] jupyter-message-type jupyter-content type-of signal wrong-type-argument jupyter-request 6 "status" unsubscribe jupyter-message-parent-id] 7 "

(fn MSG)"] (subscribers #[257 "\211:\203L \211\242\211\301\267\202G \243\211:\203& \211\242\243\211\204  \300!\207\302\303\"\207\302\303\"\207\243\211:\203B \211\243\211\204= \304\305\306\"\207\302\303\"\207\302\303\"\207\302\303\"\207\302\303\"\207" [#[257 "\301!\205 \302\303\"\304\300#\262\207" [#s(jupyter-org-client jupyter--clients (#<finalizer>) "idle" 48 (:status "ok" :protocol_version "5.3" :implementation "ipython" :implementation_version "8.29.0" :language_info (:name python :version "3.12.3" :mimetype "text/x-python" :codemirror_mode (:name "ipython" :version 3) :pygments_lexer "ipython3" :nbconvert_exporter "python" :file_extension ".py") :banner "Python 3.12.3 (main, Nov  6 2024, 18:32:19) [GCC 13.2.0]
Type 'copyright', 'credits' or 'license' for more information
IPython 8.29.0 -- An enhanced Interactive Python. Type '?' for help.
" :help_links [(:text "Python Reference" :url "https://docs.python.org/3.12") (:text "IPython Reference" :url "https://ipython.org/documentation.html") (:text "NumPy Reference" :url "https://docs.scipy.org/doc/numpy/reference/") (:text "SciPy Reference" :url "https://docs.scipy.org/doc/scipy/reference/") (:text "Matplotlib Reference" :url "https://matplotlib.org/contents.html") (:text "SymPy Reference" :url "http://docs.sympy.org/latest/index.html") (:text "pandas Reference" :url "https://pandas.pydata.org/pandas-docs/stable/")]) #s(hash-table test equal) (#[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [#[257 "\211:\203y \211\242\211\303\267\210\202w \243\304!\207\243\211:\205v \211\242\243\211:\205t \211\242\243\211:\205r \211\242\243\211:\205p \211\242\243\211?\205n \302\242\203H \305\306!\210\307\3101Z \211\300
	%0\207\210\300\301\242 \240\210\211\300
	%\262\266\202\266\202\266\202\266\202\207\311\207\211\312\267\202\233 \302\242\203\210 \305\313!\210\314\300\242!?\205\234 \300\301\242 \240\207\315\300\242!\207\311\207" [(#s(websocket open (:id "6bf9469b-83c6-4b8d-8e54-385f791b796f" :session #s(jupyter-session nil "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" nil)) #[257 "\300\301\240\207" [(nil) nil] 3 "

(fn WS)"] #[514 "\303!
>\204 \304\305\306D\"\210\211\307H\211\310>\2036 \311\303!
>\204( \304\305\306D\"\210\312H!\313\300\242\314\315B!\"\207\313\301\314\316\303!
>\204K \304\305\306D\"\210\307HD!\"\207" [(#14) #[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [jupyter-content (subscribers) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"] cl-struct-websocket-frame-tags type-of signal wrong-type-argument websocket-frame 1 (binary text) jupyter-read-plist-from-string 2 jupyter-run-with-state jupyter-publish message error] 11 "

(fn WS FRAME)"] #[257 "\300\242\203	 \301\302!\207\300\303\240\207" [(nil) error "Kernel connection could not be established" t] 3 "

(fn WS)"] websocket-default-error-handler nil nil nil "ws://localhost:8888/api/kernels/6bf9469b-83c6-4b8d-8e54-385f791b796f/channels?session_id=f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" nil nil #<process websocket to ws://localhost:8888/api/kernels/6bf9469b-83c6-4b8d-8e54-385f791b796f/channels?session_id=f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0> nil nil "wlYv8zPJwfSVI4dSA1dXwtQQaB4=" nil)) (#[0 "\305\304\303\306\307\304!\310\311\312\300\"\313\311\314\300\"\315\311\316\301\302#&
\207" [(nil) (#14) #[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [jupyter-content (subscribers) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"] "6bf9469b-83c6-4b8d-8e54-385f791b796f" #s(jupyter-server "http://localhost:8888" "ws://localhost:8888" t (:default "python3" :kernelspecs (#s(jupyter-kernelspec "python3" (:argv ["python" "-m" "ipykernel_launcher" "-f" "{connection_file}"] :env nil :display_name "Python 3 (ipykernel)" :language "python" :interrupt_mode "signal" :metadata (:debugger t)) nil)))) jupyter-api-kernel-websocket :custom-header-alist jupyter-api-auth-headers :on-open make-closure #[257 "\300\301\240\207" [V0 nil] 3 "

(fn WS)"] :on-close #[257 "\300\242\203	 \301\302!\207\300\303\240\207" [V0 error "Kernel connection could not be established" t] 3 "

(fn WS)"] :on-message #[514 "\303!
>\204 \304\305\306D\"\210\211\307H\211\310>\2036 \311\303!
>\204( \304\305\306D\"\210\312H!\313\300\242\314\315B!\"\207\313\301\314\316\303!
>\204K \304\305\306D\"\210\307HD!\"\207" [V0 V1 cl-struct-websocket-frame-tags type-of signal wrong-type-argument websocket-frame 1 (binary text) jupyter-read-plist-from-string 2 jupyter-run-with-state jupyter-publish message error] 11 "

(fn WS FRAME)"]] 14]) (nil) #s(hash-table test eq purecopy t data (message 14 send 20)) jupyter-content error "Attempting to send message to shutdown kernel" #[1285 "\301\242\242\302!>\204 \303\304\305D\"\210\211\306H\262\307\310\"\311\312\313
\314&\266\202\"\207" [cl-struct-websocket-tags websocket-send-text type-of signal wrong-type-argument websocket 2 plist-get :session jupyter-encode-raw-message :channel :msg-id :content] 18 "

(fn WS CHANNEL MSG-TYPE CONTENT MSG-ID)"] (websocket-closed) nil #s(hash-table test eq purecopy t data (start 127 stop 150)) "Can't start I/O connection to shutdown kernel" websocket-openp websocket-close] 18 "

(fn EVENT)"] (subscribers #[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [#[257 "\303\304!\211\204 \305!\207\306\301!
>\204 \307\310\311\301D\"\210\301\312H\2037 \211\313\230\203* \314C\207\300\315!\230\205C \301\"\207\300\315!\230\205C \301\"\207" ["4b09f712-ee03-45d1-be9a-996919662b66" #s(jupyter-org-request "4b09f712-ee03-45d1-be9a-996919662b66" "execute_request" (:code "# Some basic data science imports
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.pipeline import Pipeline
import datetime

import time
import os

# Some gudhi imports for TDA

import tda_pipeline
from tda_pipeline import DataSelector, RipsPersistence, LPNorm
from gudhi.representations import Landscape

# Some graphical imports for the web app
import ipywidgets as widgets
import plotly.graph_objects as go

# Some imports for ipywidgets
from ipywidgets import DatePicker, BoundedIntText, ToggleButton, Text, HBox, VBox
from IPython.display import display

# cf. data_generation.py
df = pd.read_csv('latest.csv', index_col=0)

# min, max and default start values taken from the dataset - Python 3.7+
min_value = datetime.date.fromisoformat(df.index[0])
max_value = datetime.date.fromisoformat(df.index[-1])

last_year = max_value - datetime.timedelta(days=250)

# Widgets
start = DatePicker(description='start', value = last_year)
end   = DatePicker(description='end', value = max_value)
window = BoundedIntText(value=50, min=10, max=100, step=1, description='Windows size')

button = ToggleButton(description='Compute', icon='cogs')

def nearest_str_date(items, pivot):
    return min(items, key=lambda str_date: abs(datetime.date.fromisoformat(str_date) - pivot))

def compute_Lp_norms():
    w=int(window.value)
    start_idx = df.index.get_loc(str(nearest_str_date(df.index, start.value - datetime.timedelta(days=w))))
    end_idx = df.index.get_loc(str(nearest_str_date(df.index, end.value)))
    # Some error management
    if start_idx == end_idx:
        raise IndexError('Start date must be different from end date.')
    if end_idx < w:
        end_idx = w
    if end_idx < start_idx:
        start_idx, end_idx = end_idx, start_idx

    pipe = Pipeline(
        [
            (\"data_sel\", DataSelector(start=start_idx, end=end_idx, w=w)),
            (\"rips_pers\", RipsPersistence(max_rips_dimension=2, max_persistence_dimension=2, only_this_dim=1, n_jobs=-1)),
            (\"landscape\", Landscape(resolution=1000)),
            (\"lpnorm\", LPNorm(n_jobs=-1)),
            (\"mms\", MinMaxScaler()),
        ]
    )

    start_chrono = float(time.time())
    #os.write(1, bytes(str(start_chrono),'UTF-8') + b'\\r\\n')
    L1L2mms = pipe.fit_transform(df)
    stop_chrono = float(time.time())
    #os.write(1, bytes(str(stop_chrono),'UTF-8') + b'\\r\\n')
    os.write(1, bytes(str(stop_chrono - start_chrono),'UTF-8') + b' sec. \\r\\n')
    
    l1l2df = pd.DataFrame({'date': df[start_idx+w:end_idx].index, 'L1': L1L2mms.transpose()[0], 'L2': L1L2mms.transpose()[1]})
    # Calculate the variance for the L norms
    j = 0

    for i in l1l2df.index:
        if j < w:
            k = 0
        else:
            k = j - w
        l1l2df.loc[i, 'L1_variance'] = np.var(l1l2df.iloc[k:j].L1)
        l1l2df.loc[i, 'L2_variance'] = np.var(l1l2df.iloc[k:j].L2)
        j += 1
        
    return l1l2df

def compute(args):
    l1l2df = compute_Lp_norms()
    fig.data[0]['x'] = l1l2df['date']
    fig.data[0]['y'] = l1l2df['L1']
    fig.data[1]['x'] = l1l2df['date']
    fig.data[1]['y'] = l1l2df['L2']
    fig.data[2]['x'] = l1l2df['date']
    fig.data[2]['y'] = l1l2df['L1_variance']
    fig.data[3]['x'] = l1l2df['date']
    fig.data[3]['y'] = l1l2df['L2_variance']
    
button.observe(compute, 'value')

# Layout
left_box = HBox([start, end, window, button])

fig = go.FigureWidget()

l1l2df = compute_Lp_norms()
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1'], mode='lines', name='L1')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2'], mode='lines', name='L2')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1_variance'], mode='lines', name='L1_variance')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2_variance'], mode='lines', name='L2_variance')
fig.update_xaxes(dtick=\"M1\", tickformat=\"%b\\n%Y\")
fig.layout.title.text = 'Lp norms'

display(left_box)
fig" :silent :json-false :store_history t :user_expressions #s(hash-table) :allow_stdin t :stop_on_error :json-false) #12 (26440 37591 495486 292000) t (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_530" :msg_type "execute_reply" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.530238Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_530" :msg_type "execute_reply" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata (:started "2024-11-28T15:57:11.501467Z" :dependencies_met t :engine "09acb503-cf8f-4eef-b1b4-159ead369f19" :status "error") :content (:status "error" :traceback ["[0;31m---------------------------------------------------------------------------[0m" "[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)" "Cell [0;32mIn[47], line 13[0m
[1;32m      9[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m
[1;32m     11[0m [38;5;66;03m# Some gudhi imports for TDA[39;00m
[0;32m---> 13[0m [38;5;28;01mimport[39;00m [38;5;21;01mtda_pipeline[39;00m
[1;32m     14[0m [38;5;28;01mfrom[39;00m [38;5;21;01mtda_pipeline[39;00m [38;5;28;01mimport[39;00m DataSelector, RipsPersistence, LPNorm
[1;32m     15[0m [38;5;28;01mfrom[39;00m [38;5;21;01mgudhi[39;00m[38;5;21;01m.[39;00m[38;5;21;01mrepresentations[39;00m [38;5;28;01mimport[39;00m Landscape
" "[0;31mModuleNotFoundError[0m: No module named 'tda_pipeline'"] :ename "ModuleNotFoundError" :evalue "No module named 'tda_pipeline'" :engine_info (:engine_uuid "09acb503-cf8f-4eef-b1b4-159ead369f19" :engine_id -1 :method "execute") :execution_count 47 :user_expressions nil :payload []) :buffers [] :channel "shell") ((:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_527" :msg_type "status" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.501001Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_527" :msg_type "status" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata nil :content (:execution_state "busy") :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_528" :msg_type "execute_input" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.501494Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_528" :msg_type "execute_input" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata nil :content (:code "# Some basic data science imports
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.pipeline import Pipeline
import datetime

import time
import os

# Some gudhi imports for TDA

import tda_pipeline
from tda_pipeline import DataSelector, RipsPersistence, LPNorm
from gudhi.representations import Landscape

# Some graphical imports for the web app
import ipywidgets as widgets
import plotly.graph_objects as go

# Some imports for ipywidgets
from ipywidgets import DatePicker, BoundedIntText, ToggleButton, Text, HBox, VBox
from IPython.display import display

# cf. data_generation.py
df = pd.read_csv('latest.csv', index_col=0)

# min, max and default start values taken from the dataset - Python 3.7+
min_value = datetime.date.fromisoformat(df.index[0])
max_value = datetime.date.fromisoformat(df.index[-1])

last_year = max_value - datetime.timedelta(days=250)

# Widgets
start = DatePicker(description='start', value = last_year)
end   = DatePicker(description='end', value = max_value)
window = BoundedIntText(value=50, min=10, max=100, step=1, description='Windows size')

button = ToggleButton(description='Compute', icon='cogs')

def nearest_str_date(items, pivot):
    return min(items, key=lambda str_date: abs(datetime.date.fromisoformat(str_date) - pivot))

def compute_Lp_norms():
    w=int(window.value)
    start_idx = df.index.get_loc(str(nearest_str_date(df.index, start.value - datetime.timedelta(days=w))))
    end_idx = df.index.get_loc(str(nearest_str_date(df.index, end.value)))
    # Some error management
    if start_idx == end_idx:
        raise IndexError('Start date must be different from end date.')
    if end_idx < w:
        end_idx = w
    if end_idx < start_idx:
        start_idx, end_idx = end_idx, start_idx

    pipe = Pipeline(
        [
            (\"data_sel\", DataSelector(start=start_idx, end=end_idx, w=w)),
            (\"rips_pers\", RipsPersistence(max_rips_dimension=2, max_persistence_dimension=2, only_this_dim=1, n_jobs=-1)),
            (\"landscape\", Landscape(resolution=1000)),
            (\"lpnorm\", LPNorm(n_jobs=-1)),
            (\"mms\", MinMaxScaler()),
        ]
    )

    start_chrono = float(time.time())
    #os.write(1, bytes(str(start_chrono),'UTF-8') + b'\\r\\n')
    L1L2mms = pipe.fit_transform(df)
    stop_chrono = float(time.time())
    #os.write(1, bytes(str(stop_chrono),'UTF-8') + b'\\r\\n')
    os.write(1, bytes(str(stop_chrono - start_chrono),'UTF-8') + b' sec. \\r\\n')
    
    l1l2df = pd.DataFrame({'date': df[start_idx+w:end_idx].index, 'L1': L1L2mms.transpose()[0], 'L2': L1L2mms.transpose()[1]})
    # Calculate the variance for the L norms
    j = 0

    for i in l1l2df.index:
        if j < w:
            k = 0
        else:
            k = j - w
        l1l2df.loc[i, 'L1_variance'] = np.var(l1l2df.iloc[k:j].L1)
        l1l2df.loc[i, 'L2_variance'] = np.var(l1l2df.iloc[k:j].L2)
        j += 1
        
    return l1l2df

def compute(args):
    l1l2df = compute_Lp_norms()
    fig.data[0]['x'] = l1l2df['date']
    fig.data[0]['y'] = l1l2df['L1']
    fig.data[1]['x'] = l1l2df['date']
    fig.data[1]['y'] = l1l2df['L2']
    fig.data[2]['x'] = l1l2df['date']
    fig.data[2]['y'] = l1l2df['L1_variance']
    fig.data[3]['x'] = l1l2df['date']
    fig.data[3]['y'] = l1l2df['L2_variance']
    
button.observe(compute, 'value')

# Layout
left_box = HBox([start, end, window, button])

fig = go.FigureWidget()

l1l2df = compute_Lp_norms()
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1'], mode='lines', name='L1')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2'], mode='lines', name='L2')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1_variance'], mode='lines', name='L1_variance')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2_variance'], mode='lines', name='L2_variance')
fig.update_xaxes(dtick=\"M1\", tickformat=\"%b\\n%Y\")
fig.layout.title.text = 'Lp norms'

display(left_box)
fig" :execution_count 47) :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_529" :msg_type "error" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.529306Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_529" :msg_type "error" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata nil :content (:traceback ["[0;31m---------------------------------------------------------------------------[0m" "[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)" "Cell [0;32mIn[47], line 13[0m
[1;32m      9[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m
[1;32m     11[0m [38;5;66;03m# Some gudhi imports for TDA[39;00m
[0;32m---> 13[0m [38;5;28;01mimport[39;00m [38;5;21;01mtda_pipeline[39;00m
[1;32m     14[0m [38;5;28;01mfrom[39;00m [38;5;21;01mtda_pipeline[39;00m [38;5;28;01mimport[39;00m DataSelector, RipsPersistence, LPNorm
[1;32m     15[0m [38;5;28;01mfrom[39;00m [38;5;21;01mgudhi[39;00m[38;5;21;01m.[39;00m[38;5;21;01mrepresentations[39;00m [38;5;28;01mimport[39;00m Landscape
" "[0;31mModuleNotFoundError[0m: No module named 'tda_pipeline'"] :ename "ModuleNotFoundError" :evalue "No module named 'tda_pipeline'") :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_531" :msg_type "status" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.530475Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_531" :msg_type "status" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata nil :content (:execution_state "idle") :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_530" :msg_type "execute_reply" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.530238Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_530" :msg_type "execute_reply" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata (:started "2024-11-28T15:57:11.501467Z" :dependencies_met t :engine "09acb503-cf8f-4eef-b1b4-159ead369f19" :status "error") :content (:status "error" :traceback ["[0;31m---------------------------------------------------------------------------[0m" "[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)" "Cell [0;32mIn[47], line 13[0m
[1;32m      9[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m
[1;32m     11[0m [38;5;66;03m# Some gudhi imports for TDA[39;00m
[0;32m---> 13[0m [38;5;28;01mimport[39;00m [38;5;21;01mtda_pipeline[39;00m
[1;32m     14[0m [38;5;28;01mfrom[39;00m [38;5;21;01mtda_pipeline[39;00m [38;5;28;01mimport[39;00m DataSelector, RipsPersistence, LPNorm
[1;32m     15[0m [38;5;28;01mfrom[39;00m [38;5;21;01mgudhi[39;00m[38;5;21;01m.[39;00m[38;5;21;01mrepresentations[39;00m [38;5;28;01mimport[39;00m Landscape
" "[0;31mModuleNotFoundError[0m: No module named 'tda_pipeline'"] :ename "ModuleNotFoundError" :evalue "No module named 'tda_pipeline'" :engine_info (:engine_uuid "09acb503-cf8f-4eef-b1b4-159ead369f19" :engine_id -1 :method "execute") :execution_count 47 :user_expressions nil :payload []) :buffers [] :channel "shell")) #17 nil value ((:colname-names) (:rowname-names) (:result-params "replace") (:result-type . value) (:results . "replace") (:exports . "code") (:kernel . "python3") (:session . "py") (:async . "yes") (:tangle . "no") (:hlines . "no") (:noweb . "no") (:cache . "no")) nil nil nil t nil #<marker at 659 in tda_web_app.org> t #<overlay in no buffer>) cl-struct-jupyter-request-tags #[514 "\301!>\204 \302\303\304D\"\210\305I\210\301!>\204# \302\303\304D\"\210\306\306HC\244I\210\307!\204C \310!\311\230\204C \310!\312\230\203W \301!>\204R \302\303\304D\"\210\313\314I\210\315\316BB!\207" [cl-struct-jupyter-request-tags type-of signal wrong-type-argument jupyter-request 7 8 jupyter-message-status-idle-p jupyter-message-type "kernel_info_reply" "shutdown_reply" 6 t jupyter-content :parent-request] 6 "

(fn REQ MSG)"] jupyter-message-type jupyter-content type-of signal wrong-type-argument jupyter-request 6 "status" unsubscribe jupyter-message-parent-id] 7 "

(fn MSG)"] (subscribers #[257 "\211:\203L \211\242\211\301\267\202G \243\211:\203& \211\242\243\211\204  \300!\207\302\303\"\207\302\303\"\207\243\211:\203B \211\243\211\204= \304\305\306\"\207\302\303\"\207\302\303\"\207\302\303\"\207\302\303\"\207" [#[257 "\301!\205 \302\303\"\304\300#\262\207" [#12 jupyter-message-type plist-get :channel jupyter-handle-message] 6 "

(fn MSG)"] #s(hash-table test eq purecopy t data (content 13 subscribe 43)) error "Unhandled subscriber content: %s" signal jupyter-subscribed-subscriber nil] 8 "

(fn SUB-CONTENT)"]) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"]) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"] #[257 "\211:\203L \211\242\211\301\267\202G \243\211:\203& \211\242\243\211\204  \300!\207\302\303\"\207\302\303\"\207\243\211:\203B \211\243\211\204= \304\305\306\"\207\302\303\"\207\302\303\"\207\302\303\"\207\302\303\"\207" [#[257 "\211\303\267\202\" \304\302!\207\305\302!\210\301\306\240\210\307\300\242!\205H \310\300\242!\207\311\302!\207\211:\205H \211\242\211\312=\205F \243\211:\205D \211\242\243\211?\205B \302!\266\202\262\262\207" [(#s(websocket open (:id "6bf9469b-83c6-4b8d-8e54-385f791b796f" :session #s(jupyter-session nil "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" nil)) #[257 "\300\301\240\207" [(nil) nil] 3 "

(fn WS)"] #[514 "\303!
>\204 \304\305\306D\"\210\211\307H\211\310>\2036 \311\303!
>\204( \304\305\306D\"\210\312H!\313\300\242\314\315B!\"\207\313\301\314\316\303!
>\204K \304\305\306D\"\210\307HD!\"\207" [(#[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [#[257 "\211:\203y \211\242\211\303\267\210\202w \243\304!\207\243\211:\205v \211\242\243\211:\205t \211\242\243\211:\205r \211\242\243\211:\205p \211\242\243\211?\205n \302\242\203H \305\306!\210\307\3101Z \211\300
	%0\207\210\300\301\242 \240\210\211\300
	%\262\266\202\266\202\266\202\266\202\207\311\207\211\312\267\202\233 \302\242\203\210 \305\313!\210\314\300\242!?\205\234 \300\301\242 \240\207\315\300\242!\207\311\207" [#18 (#[0 "\305\304\303\306\307\304!\310\311\312\300\"\313\311\314\300\"\315\311\316\301\302#&
\207" [(nil) #22 #[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [jupyter-content (subscribers) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"] "6bf9469b-83c6-4b8d-8e54-385f791b796f" #s(jupyter-server "http://localhost:8888" "ws://localhost:8888" t (:default "python3" :kernelspecs (#s(jupyter-kernelspec "python3" (:argv ["python" "-m" "ipykernel_launcher" "-f" "{connection_file}"] :env nil :display_name "Python 3 (ipykernel)" :language "python" :interrupt_mode "signal" :metadata (:debugger t)) nil)))) jupyter-api-kernel-websocket :custom-header-alist jupyter-api-auth-headers :on-open make-closure #[257 "\300\301\240\207" [V0 nil] 3 "

(fn WS)"] :on-close #[257 "\300\242\203	 \301\302!\207\300\303\240\207" [V0 error "Kernel connection could not be established" t] 3 "

(fn WS)"] :on-message #[514 "\303!
>\204 \304\305\306D\"\210\211\307H\211\310>\2036 \311\303!
>\204( \304\305\306D\"\210\312H!\313\300\242\314\315B!\"\207\313\301\314\316\303!
>\204K \304\305\306D\"\210\307HD!\"\207" [V0 V1 cl-struct-websocket-frame-tags type-of signal wrong-type-argument websocket-frame 1 (binary text) jupyter-read-plist-from-string 2 jupyter-run-with-state jupyter-publish message error] 11 "

(fn WS FRAME)"]] 14]) (nil) #s(hash-table test eq purecopy t data (message 14 send 20)) jupyter-content error "Attempting to send message to shutdown kernel" #[1285 "\301\242\242\302!>\204 \303\304\305D\"\210\211\306H\262\307\310\"\311\312\313
\314&\266\202\"\207" [cl-struct-websocket-tags websocket-send-text type-of signal wrong-type-argument websocket 2 plist-get :session jupyter-encode-raw-message :channel :msg-id :content] 18 "

(fn WS CHANNEL MSG-TYPE CONTENT MSG-ID)"] (websocket-closed) nil #s(hash-table test eq purecopy t data (start 127 stop 150)) "Can't start I/O connection to shutdown kernel" websocket-openp websocket-close] 18 "

(fn EVENT)"] (subscribers #[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [#[257 "\303\304!\211\204 \305!\207\306\301!
>\204 \307\310\311\301D\"\210\301\312H\2037 \211\313\230\203* \314C\207\300\315!\230\205C \301\"\207\300\315!\230\205C \301\"\207" ["4b09f712-ee03-45d1-be9a-996919662b66" #s(jupyter-org-request "4b09f712-ee03-45d1-be9a-996919662b66" "execute_request" (:code "# Some basic data science imports
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.pipeline import Pipeline
import datetime

import time
import os

# Some gudhi imports for TDA

import tda_pipeline
from tda_pipeline import DataSelector, RipsPersistence, LPNorm
from gudhi.representations import Landscape

# Some graphical imports for the web app
import ipywidgets as widgets
import plotly.graph_objects as go

# Some imports for ipywidgets
from ipywidgets import DatePicker, BoundedIntText, ToggleButton, Text, HBox, VBox
from IPython.display import display

# cf. data_generation.py
df = pd.read_csv('latest.csv', index_col=0)

# min, max and default start values taken from the dataset - Python 3.7+
min_value = datetime.date.fromisoformat(df.index[0])
max_value = datetime.date.fromisoformat(df.index[-1])

last_year = max_value - datetime.timedelta(days=250)

# Widgets
start = DatePicker(description='start', value = last_year)
end   = DatePicker(description='end', value = max_value)
window = BoundedIntText(value=50, min=10, max=100, step=1, description='Windows size')

button = ToggleButton(description='Compute', icon='cogs')

def nearest_str_date(items, pivot):
    return min(items, key=lambda str_date: abs(datetime.date.fromisoformat(str_date) - pivot))

def compute_Lp_norms():
    w=int(window.value)
    start_idx = df.index.get_loc(str(nearest_str_date(df.index, start.value - datetime.timedelta(days=w))))
    end_idx = df.index.get_loc(str(nearest_str_date(df.index, end.value)))
    # Some error management
    if start_idx == end_idx:
        raise IndexError('Start date must be different from end date.')
    if end_idx < w:
        end_idx = w
    if end_idx < start_idx:
        start_idx, end_idx = end_idx, start_idx

    pipe = Pipeline(
        [
            (\"data_sel\", DataSelector(start=start_idx, end=end_idx, w=w)),
            (\"rips_pers\", RipsPersistence(max_rips_dimension=2, max_persistence_dimension=2, only_this_dim=1, n_jobs=-1)),
            (\"landscape\", Landscape(resolution=1000)),
            (\"lpnorm\", LPNorm(n_jobs=-1)),
            (\"mms\", MinMaxScaler()),
        ]
    )

    start_chrono = float(time.time())
    #os.write(1, bytes(str(start_chrono),'UTF-8') + b'\\r\\n')
    L1L2mms = pipe.fit_transform(df)
    stop_chrono = float(time.time())
    #os.write(1, bytes(str(stop_chrono),'UTF-8') + b'\\r\\n')
    os.write(1, bytes(str(stop_chrono - start_chrono),'UTF-8') + b' sec. \\r\\n')
    
    l1l2df = pd.DataFrame({'date': df[start_idx+w:end_idx].index, 'L1': L1L2mms.transpose()[0], 'L2': L1L2mms.transpose()[1]})
    # Calculate the variance for the L norms
    j = 0

    for i in l1l2df.index:
        if j < w:
            k = 0
        else:
            k = j - w
        l1l2df.loc[i, 'L1_variance'] = np.var(l1l2df.iloc[k:j].L1)
        l1l2df.loc[i, 'L2_variance'] = np.var(l1l2df.iloc[k:j].L2)
        j += 1
        
    return l1l2df

def compute(args):
    l1l2df = compute_Lp_norms()
    fig.data[0]['x'] = l1l2df['date']
    fig.data[0]['y'] = l1l2df['L1']
    fig.data[1]['x'] = l1l2df['date']
    fig.data[1]['y'] = l1l2df['L2']
    fig.data[2]['x'] = l1l2df['date']
    fig.data[2]['y'] = l1l2df['L1_variance']
    fig.data[3]['x'] = l1l2df['date']
    fig.data[3]['y'] = l1l2df['L2_variance']
    
button.observe(compute, 'value')

# Layout
left_box = HBox([start, end, window, button])

fig = go.FigureWidget()

l1l2df = compute_Lp_norms()
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1'], mode='lines', name='L1')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2'], mode='lines', name='L2')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1_variance'], mode='lines', name='L1_variance')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2_variance'], mode='lines', name='L2_variance')
fig.update_xaxes(dtick=\"M1\", tickformat=\"%b\\n%Y\")
fig.layout.title.text = 'Lp norms'

display(left_box)
fig" :silent :json-false :store_history t :user_expressions #s(hash-table) :allow_stdin t :stop_on_error :json-false) #12 (26440 37591 495486 292000) t (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_530" :msg_type "execute_reply" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.530238Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_530" :msg_type "execute_reply" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata (:started "2024-11-28T15:57:11.501467Z" :dependencies_met t :engine "09acb503-cf8f-4eef-b1b4-159ead369f19" :status "error") :content (:status "error" :traceback ["[0;31m---------------------------------------------------------------------------[0m" "[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)" "Cell [0;32mIn[47], line 13[0m
[1;32m      9[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m
[1;32m     11[0m [38;5;66;03m# Some gudhi imports for TDA[39;00m
[0;32m---> 13[0m [38;5;28;01mimport[39;00m [38;5;21;01mtda_pipeline[39;00m
[1;32m     14[0m [38;5;28;01mfrom[39;00m [38;5;21;01mtda_pipeline[39;00m [38;5;28;01mimport[39;00m DataSelector, RipsPersistence, LPNorm
[1;32m     15[0m [38;5;28;01mfrom[39;00m [38;5;21;01mgudhi[39;00m[38;5;21;01m.[39;00m[38;5;21;01mrepresentations[39;00m [38;5;28;01mimport[39;00m Landscape
" "[0;31mModuleNotFoundError[0m: No module named 'tda_pipeline'"] :ename "ModuleNotFoundError" :evalue "No module named 'tda_pipeline'" :engine_info (:engine_uuid "09acb503-cf8f-4eef-b1b4-159ead369f19" :engine_id -1 :method "execute") :execution_count 47 :user_expressions nil :payload []) :buffers [] :channel "shell") ((:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_527" :msg_type "status" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.501001Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_527" :msg_type "status" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata nil :content (:execution_state "busy") :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_528" :msg_type "execute_input" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.501494Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_528" :msg_type "execute_input" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata nil :content (:code "# Some basic data science imports
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.pipeline import Pipeline
import datetime

import time
import os

# Some gudhi imports for TDA

import tda_pipeline
from tda_pipeline import DataSelector, RipsPersistence, LPNorm
from gudhi.representations import Landscape

# Some graphical imports for the web app
import ipywidgets as widgets
import plotly.graph_objects as go

# Some imports for ipywidgets
from ipywidgets import DatePicker, BoundedIntText, ToggleButton, Text, HBox, VBox
from IPython.display import display

# cf. data_generation.py
df = pd.read_csv('latest.csv', index_col=0)

# min, max and default start values taken from the dataset - Python 3.7+
min_value = datetime.date.fromisoformat(df.index[0])
max_value = datetime.date.fromisoformat(df.index[-1])

last_year = max_value - datetime.timedelta(days=250)

# Widgets
start = DatePicker(description='start', value = last_year)
end   = DatePicker(description='end', value = max_value)
window = BoundedIntText(value=50, min=10, max=100, step=1, description='Windows size')

button = ToggleButton(description='Compute', icon='cogs')

def nearest_str_date(items, pivot):
    return min(items, key=lambda str_date: abs(datetime.date.fromisoformat(str_date) - pivot))

def compute_Lp_norms():
    w=int(window.value)
    start_idx = df.index.get_loc(str(nearest_str_date(df.index, start.value - datetime.timedelta(days=w))))
    end_idx = df.index.get_loc(str(nearest_str_date(df.index, end.value)))
    # Some error management
    if start_idx == end_idx:
        raise IndexError('Start date must be different from end date.')
    if end_idx < w:
        end_idx = w
    if end_idx < start_idx:
        start_idx, end_idx = end_idx, start_idx

    pipe = Pipeline(
        [
            (\"data_sel\", DataSelector(start=start_idx, end=end_idx, w=w)),
            (\"rips_pers\", RipsPersistence(max_rips_dimension=2, max_persistence_dimension=2, only_this_dim=1, n_jobs=-1)),
            (\"landscape\", Landscape(resolution=1000)),
            (\"lpnorm\", LPNorm(n_jobs=-1)),
            (\"mms\", MinMaxScaler()),
        ]
    )

    start_chrono = float(time.time())
    #os.write(1, bytes(str(start_chrono),'UTF-8') + b'\\r\\n')
    L1L2mms = pipe.fit_transform(df)
    stop_chrono = float(time.time())
    #os.write(1, bytes(str(stop_chrono),'UTF-8') + b'\\r\\n')
    os.write(1, bytes(str(stop_chrono - start_chrono),'UTF-8') + b' sec. \\r\\n')
    
    l1l2df = pd.DataFrame({'date': df[start_idx+w:end_idx].index, 'L1': L1L2mms.transpose()[0], 'L2': L1L2mms.transpose()[1]})
    # Calculate the variance for the L norms
    j = 0

    for i in l1l2df.index:
        if j < w:
            k = 0
        else:
            k = j - w
        l1l2df.loc[i, 'L1_variance'] = np.var(l1l2df.iloc[k:j].L1)
        l1l2df.loc[i, 'L2_variance'] = np.var(l1l2df.iloc[k:j].L2)
        j += 1
        
    return l1l2df

def compute(args):
    l1l2df = compute_Lp_norms()
    fig.data[0]['x'] = l1l2df['date']
    fig.data[0]['y'] = l1l2df['L1']
    fig.data[1]['x'] = l1l2df['date']
    fig.data[1]['y'] = l1l2df['L2']
    fig.data[2]['x'] = l1l2df['date']
    fig.data[2]['y'] = l1l2df['L1_variance']
    fig.data[3]['x'] = l1l2df['date']
    fig.data[3]['y'] = l1l2df['L2_variance']
    
button.observe(compute, 'value')

# Layout
left_box = HBox([start, end, window, button])

fig = go.FigureWidget()

l1l2df = compute_Lp_norms()
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1'], mode='lines', name='L1')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2'], mode='lines', name='L2')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1_variance'], mode='lines', name='L1_variance')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2_variance'], mode='lines', name='L2_variance')
fig.update_xaxes(dtick=\"M1\", tickformat=\"%b\\n%Y\")
fig.layout.title.text = 'Lp norms'

display(left_box)
fig" :execution_count 47) :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_529" :msg_type "error" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.529306Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_529" :msg_type "error" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata nil :content (:traceback ["[0;31m---------------------------------------------------------------------------[0m" "[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)" "Cell [0;32mIn[47], line 13[0m
[1;32m      9[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m
[1;32m     11[0m [38;5;66;03m# Some gudhi imports for TDA[39;00m
[0;32m---> 13[0m [38;5;28;01mimport[39;00m [38;5;21;01mtda_pipeline[39;00m
[1;32m     14[0m [38;5;28;01mfrom[39;00m [38;5;21;01mtda_pipeline[39;00m [38;5;28;01mimport[39;00m DataSelector, RipsPersistence, LPNorm
[1;32m     15[0m [38;5;28;01mfrom[39;00m [38;5;21;01mgudhi[39;00m[38;5;21;01m.[39;00m[38;5;21;01mrepresentations[39;00m [38;5;28;01mimport[39;00m Landscape
" "[0;31mModuleNotFoundError[0m: No module named 'tda_pipeline'"] :ename "ModuleNotFoundError" :evalue "No module named 'tda_pipeline'") :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_531" :msg_type "status" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.530475Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_531" :msg_type "status" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata nil :content (:execution_state "idle") :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_530" :msg_type "execute_reply" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.530238Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_530" :msg_type "execute_reply" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata (:started "2024-11-28T15:57:11.501467Z" :dependencies_met t :engine "09acb503-cf8f-4eef-b1b4-159ead369f19" :status "error") :content (:status "error" :traceback ["[0;31m---------------------------------------------------------------------------[0m" "[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)" "Cell [0;32mIn[47], line 13[0m
[1;32m      9[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m
[1;32m     11[0m [38;5;66;03m# Some gudhi imports for TDA[39;00m
[0;32m---> 13[0m [38;5;28;01mimport[39;00m [38;5;21;01mtda_pipeline[39;00m
[1;32m     14[0m [38;5;28;01mfrom[39;00m [38;5;21;01mtda_pipeline[39;00m [38;5;28;01mimport[39;00m DataSelector, RipsPersistence, LPNorm
[1;32m     15[0m [38;5;28;01mfrom[39;00m [38;5;21;01mgudhi[39;00m[38;5;21;01m.[39;00m[38;5;21;01mrepresentations[39;00m [38;5;28;01mimport[39;00m Landscape
" "[0;31mModuleNotFoundError[0m: No module named 'tda_pipeline'"] :ename "ModuleNotFoundError" :evalue "No module named 'tda_pipeline'" :engine_info (:engine_uuid "09acb503-cf8f-4eef-b1b4-159ead369f19" :engine_id -1 :method "execute") :execution_count 47 :user_expressions nil :payload []) :buffers [] :channel "shell")) #26 nil value ((:colname-names) (:rowname-names) (:result-params "replace") (:result-type . value) (:results . "replace") (:exports . "code") (:kernel . "python3") (:session . "py") (:async . "yes") (:tangle . "no") (:hlines . "no") (:noweb . "no") (:cache . "no")) nil nil nil t nil #<marker at 659 in tda_web_app.org> t #<overlay in no buffer>) cl-struct-jupyter-request-tags #[514 "\301!>\204 \302\303\304D\"\210\305I\210\301!>\204# \302\303\304D\"\210\306\306HC\244I\210\307!\204C \310!\311\230\204C \310!\312\230\203W \301!>\204R \302\303\304D\"\210\313\314I\210\315\316BB!\207" [cl-struct-jupyter-request-tags type-of signal wrong-type-argument jupyter-request 7 8 jupyter-message-status-idle-p jupyter-message-type "kernel_info_reply" "shutdown_reply" 6 t jupyter-content :parent-request] 6 "

(fn REQ MSG)"] jupyter-message-type jupyter-content type-of signal wrong-type-argument jupyter-request 6 "status" unsubscribe jupyter-message-parent-id] 7 "

(fn MSG)"] (subscribers #[257 "\211:\203L \211\242\211\301\267\202G \243\211:\203& \211\242\243\211\204  \300!\207\302\303\"\207\302\303\"\207\243\211:\203B \211\243\211\204= \304\305\306\"\207\302\303\"\207\302\303\"\207\302\303\"\207\302\303\"\207" [#[257 "\301!\205 \302\303\"\304\300#\262\207" [#12 jupyter-message-type plist-get :channel jupyter-handle-message] 6 "

(fn MSG)"] #s(hash-table test eq purecopy t data (content 13 subscribe 43)) error "Unhandled subscriber content: %s" signal jupyter-subscribed-subscriber nil] 8 "

(fn SUB-CONTENT)"]) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"]) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"]) #[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [jupyter-content (subscribers) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"] cl-struct-websocket-frame-tags type-of signal wrong-type-argument websocket-frame 1 (binary text) jupyter-read-plist-from-string 2 jupyter-run-with-state jupyter-publish message error] 11 "

(fn WS FRAME)"] #[257 "\300\242\203	 \301\302!\207\300\303\240\207" [(nil) error "Kernel connection could not be established" t] 3 "

(fn WS)"] websocket-default-error-handler nil nil nil "ws://localhost:8888/api/kernels/6bf9469b-83c6-4b8d-8e54-385f791b796f/channels?session_id=f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" nil nil #<process websocket to ws://localhost:8888/api/kernels/6bf9469b-83c6-4b8d-8e54-385f791b796f/channels?session_id=f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0> nil nil "wlYv8zPJwfSVI4dSA1dXwtQQaB4=" nil)) (nil) #s(jupyter-server-kernel #s(jupyter-kernelspec "python3" (:argv ["python" "-m" "ipykernel_launcher" "-f" "{connection_file}"] :env nil :display_name "Python 3 (ipykernel)" :language "python" :interrupt_mode "signal" :metadata (:debugger t)) nil) #s(jupyter-session nil "6a8d255a-2f17-46fd-8af1-0c55b94d0c7b" nil) #s(jupyter-server "http://localhost:8888" "ws://localhost:8888" t (:default "python3" :kernelspecs (#s(jupyter-kernelspec "python3" (:argv ["python" "-m" "ipykernel_launcher" "-f" "{connection_file}"] :env nil :display_name "Python 3 (ipykernel)" :language "python" :interrupt_mode "signal" :metadata (:debugger t)) nil)))) "6bf9469b-83c6-4b8d-8e54-385f791b796f") #s(hash-table test eq purecopy t data (interrupt 6 shutdown 10 restart 30)) jupyter-interrupt jupyter-shutdown t websocket-openp websocket-close jupyter-restart action] 7 "

(fn ACTION)"] #s(hash-table test eq purecopy t data (content 13 subscribe 43)) error "Unhandled subscriber content: %s" signal jupyter-subscribed-subscriber nil] 8 "

(fn SUB-CONTENT)"]) #<buffer  *jupyter-kernel-client*> nil "null" nil #<buffer *jupyter-repl[python 3.12.3]-py*> nil nil nil) jupyter-message-type plist-get :channel jupyter-handle-message] 6 "

(fn MSG)"] #s(hash-table test eq purecopy t data (content 13 subscribe 43)) error "Unhandled subscriber content: %s" signal jupyter-subscribed-subscriber nil] 8 "

(fn SUB-CONTENT)"]) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"] nil value ((:colname-names) (:rowname-names) (:result-params "replace") (:result-type . value) (:results . "replace") (:exports . "code") (:kernel . "python3") (:session . "py") (:async . "yes") (:tangle . "no") (:hlines . "no") (:noweb . "no") (:cache . "no")) nil nil nil t nil #<marker at 659 in tda_web_app.org> t #<overlay in no buffer>) 659 . 660) (t 26440 37561 315631 273000)) nil (26440 37604 121064 373000) 0 nil])
([nil nil ((#("from . import tda_pipeline
" 0 4 (face (font-lock-keyword-face org-block) font-lock-multiline t help-echo "Duplicates detected" wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) src-block t font-lock-fontified t fontified t) 4 7 (face (org-block) font-lock-multiline t help-echo "Duplicates detected" wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) src-block t font-lock-fontified t fontified t) 7 13 (face (font-lock-keyword-face org-block) font-lock-multiline t help-echo "Duplicates detected" wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) src-block t font-lock-fontified t fontified t) 13 26 (face (org-block) font-lock-multiline t help-echo "Duplicates detected" wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) src-block t font-lock-fontified t fontified t) 26 27 (face (org-block) font-lock-multiline t help-echo "Duplicates detected" wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) src-block t font-lock-fontified t fontified t)) . 913) (undo-tree-id149 . -26) (undo-tree-id150 . -26) (undo-tree-id151 . 1) (undo-tree-id152 . -25) (undo-tree-id153 . -25) 938) nil (26440 37604 121063 256000) 0 nil])
([nil nil ((913 . 914)) nil (26440 37604 121060 361000) 0 nil])
([nil nil ((nil rear-nonsticky nil 913 . 914) (#("
" 0 1 (ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil font-lock-fontified t src-block t font-lock-multiline t face (org-block))) . -940) (913 . 941)) nil (26440 37604 121059 885000) 0 nil])
([nil nil ((#(" " 0 1 (face (org-block) font-lock-multiline t ws-butler-chg delete wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t)) . 914) (#("." 0 1 (face (org-block) font-lock-multiline t ws-butler-chg delete wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t)) . 914) (#(" " 0 1 (face (org-block) font-lock-multiline t ws-butler-chg delete wrap-prefix #("   " 0 2 (face org-indent) 2 3 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t)) . 914) (#("m" 0 1 (face (org-block) font-lock-multiline t ws-butler-chg delete wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t)) . 914) (#("o" 0 1 (face (org-block) font-lock-multiline t ws-butler-chg delete wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t)) . 914) (#("r" 0 1 (face (org-block) font-lock-multiline t ws-butler-chg delete wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t)) . 914) (#("f" 0 1 (face (font-lock-keyword-face org-block) font-lock-multiline t ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t)) . 914)) nil (26440 37604 121058 751000) 0 nil])
([nil nil ((nil jupyter-stream-newline nil 5468 . 5469) (4645 . 5469) (4620 . 4651) (#(": 4b09f712-ee03-45d1-be9a-996919662b66
" 0 39 (ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified nil)) . 4620) (4620 . 4659) (#(":RESULTS:
# [goto error]
: [0;31m---------------------------------------------------------------------------[0m
: [0;31mImportError[0m                               Traceback (most recent call last)
: Cell [0;32mIn[46], line 12[0m
: [1;32m      9[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m
: [1;32m     11[0m [38;5;66;03m# Some gudhi imports for TDA[39;00m
: [0;32m---> 12[0m [38;5;28;01mfrom[39;00m [38;5;21;01m.[39;00m [38;5;28;01mimport[39;00m tda_pipeline
: [1;32m     13[0m [38;5;28;01mfrom[39;00m [38;5;21;01mtda_pipeline[39;00m [38;5;28;01mimport[39;00m DataSelector, RipsPersistence, LPNorm
: [1;32m     14[0m [38;5;28;01mfrom[39;00m [38;5;21;01mgudhi[39;00m[38;5;21;01m.[39;00m[38;5;21;01mrepresentations[39;00m [38;5;28;01mimport[39;00m Landscape
: 
: [0;31mImportError[0m: attempted relative import with no known parent package
:END:
" 0 9 (font-lock-fontified t face org-drawer ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 9 10 (ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 10 12 (face font-lock-comment-face font-lock-fontified t ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 12 13 (face font-lock-comment-face font-lock-fontified t keymap (keymap (13 . jupyter-org-goto-error) (mouse-2 . jupyter-org-goto-error)) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t jupyter-error-loc #<marker at 659 in tda_web_app.org>) 13 24 (face font-lock-comment-face font-lock-fontified t keymap (keymap (13 . jupyter-org-goto-error) (mouse-2 . jupyter-org-goto-error)) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t jupyter-error-loc #<marker at 659 in tda_web_app.org>) 24 25 (ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 25 27 (jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 27 34 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 34 109 (jupyter-face ((:foreground "red3")) jupyter-ansi t face ((:foreground "red3") org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 109 113 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 113 114 (jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 114 116 (jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 116 123 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 123 134 (jupyter-face ((:foreground "red3")) jupyter-ansi t face ((:foreground "red3") org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 134 138 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 138 203 (jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 203 210 (jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 210 217 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 217 232 (jupyter-face ((:foreground "green3")) jupyter-ansi t face ((:foreground "green3") org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 232 236 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 236 237 (jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 237 239 (jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 239 246 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 246 253 (jupyter-face ((ansi-color-bold (:foreground "green3"))) jupyter-ansi t face ((ansi-color-bold (:foreground "green3")) org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 253 257 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 257 258 (jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 258 271 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 271 277 (jupyter-face ((ansi-color-bold (:foreground "#008700"))) jupyter-ansi t face ((ansi-color-bold (:foreground "#008700")) org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 277 285 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 285 286 (jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 286 299 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 299 301 (jupyter-face ((ansi-color-bold (:foreground "#0000FF"))) jupyter-ansi t face ((ansi-color-bold (:foreground "#0000FF")) org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 301 309 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 309 310 (jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 310 312 (jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 312 319 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 319 326 (jupyter-face ((ansi-color-bold (:foreground "green3"))) jupyter-ansi t face ((ansi-color-bold (:foreground "green3")) org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 326 330 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 330 331 (jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 331 344 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 344 372 (jupyter-face ((ansi-color-italic (:foreground "#5F8787"))) jupyter-ansi t face ((ansi-color-italic (:foreground "#5F8787")) org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 372 380 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 380 381 (jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 381 383 (jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 383 390 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 390 397 (jupyter-face ((:foreground "green3")) jupyter-ansi t face ((:foreground "green3") org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 397 401 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 401 402 (jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 402 415 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 415 419 (jupyter-face ((ansi-color-bold (:foreground "#008700"))) jupyter-ansi t face ((ansi-color-bold (:foreground "#008700")) org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 419 427 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 427 428 (jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 428 441 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 441 442 (jupyter-face ((ansi-color-bold (:foreground "#0000FF"))) jupyter-ansi t face ((ansi-color-bold (:foreground "#0000FF")) org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 442 450 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 450 451 (jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 451 464 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 464 470 (jupyter-face ((ansi-color-bold (:foreground "#008700"))) jupyter-ansi t face ((ansi-color-bold (:foreground "#008700")) org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 470 478 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 478 492 (jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 492 494 (jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 494 501 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 501 508 (jupyter-face ((ansi-color-bold (:foreground "green3"))) jupyter-ansi t face ((ansi-color-bold (:foreground "green3")) org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 508 512 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 512 513 (jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 513 526 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 526 530 (jupyter-face ((ansi-color-bold (:foreground "#008700"))) jupyter-ansi t face ((ansi-color-bold (:foreground "#008700")) org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 530 538 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 538 539 (jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 539 552 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 552 564 (jupyter-face ((ansi-color-bold (:foreground "#0000FF"))) jupyter-ansi t face ((ansi-color-bold (:foreground "#0000FF")) org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 564 572 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 572 573 (jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 573 586 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 586 592 (jupyter-face ((ansi-color-bold (:foreground "#008700"))) jupyter-ansi t face ((ansi-color-bold (:foreground "#008700")) org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 592 600 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 600 639 (jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 639 641 (jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 641 648 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 648 655 (jupyter-face ((ansi-color-bold (:foreground "green3"))) jupyter-ansi t face ((ansi-color-bold (:foreground "green3")) org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 655 659 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 659 660 (jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 660 673 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 673 677 (jupyter-face ((ansi-color-bold (:foreground "#008700"))) jupyter-ansi t face ((ansi-color-bold (:foreground "#008700")) org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 677 685 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 685 686 (jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 686 699 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 699 704 (jupyter-face ((ansi-color-bold (:foreground "#0000FF"))) jupyter-ansi t face ((ansi-color-bold (:foreground "#0000FF")) org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 704 712 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 712 725 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 725 726 (jupyter-face ((ansi-color-bold (:foreground "#0000FF"))) jupyter-ansi t face ((ansi-color-bold (:foreground "#0000FF")) org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 726 734 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 734 747 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 747 762 (jupyter-face ((ansi-color-bold (:foreground "#0000FF"))) jupyter-ansi t face ((ansi-color-bold (:foreground "#0000FF")) org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 762 770 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 770 771 (jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 771 784 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 784 790 (jupyter-face ((ansi-color-bold (:foreground "#008700"))) jupyter-ansi t face ((ansi-color-bold (:foreground "#008700")) org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 790 798 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 798 809 (jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 809 812 (jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 812 814 (jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 814 821 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 821 832 (jupyter-face ((:foreground "red3")) jupyter-ansi t face ((:foreground "red3") org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 832 836 (jupyter-invisible t invisible t jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 836 892 (jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 892 893 (jupyter-ansi t face (org-code) jupyter-stream-newline t ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 893 898 (jupyter-ansi t font-lock-fontified t face org-drawer ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t) 898 899 (ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 4620) (nil jupyter-request #s(jupyter-org-request "7a53c0b4-a4ec-41a5-aef0-b482f478ac66" "execute_request" (:code "# Some basic data science imports
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.pipeline import Pipeline
import datetime

import time
import os

# Some gudhi imports for TDA
from . import tda_pipeline
from tda_pipeline import DataSelector, RipsPersistence, LPNorm
from gudhi.representations import Landscape

# Some graphical imports for the web app
import ipywidgets as widgets
import plotly.graph_objects as go

# Some imports for ipywidgets
from ipywidgets import DatePicker, BoundedIntText, ToggleButton, Text, HBox, VBox
from IPython.display import display

# cf. data_generation.py
df = pd.read_csv('latest.csv', index_col=0)

# min, max and default start values taken from the dataset - Python 3.7+
min_value = datetime.date.fromisoformat(df.index[0])
max_value = datetime.date.fromisoformat(df.index[-1])

last_year = max_value - datetime.timedelta(days=250)

# Widgets
start = DatePicker(description='start', value = last_year)
end   = DatePicker(description='end', value = max_value)
window = BoundedIntText(value=50, min=10, max=100, step=1, description='Windows size')

button = ToggleButton(description='Compute', icon='cogs')

def nearest_str_date(items, pivot):
    return min(items, key=lambda str_date: abs(datetime.date.fromisoformat(str_date) - pivot))

def compute_Lp_norms():
    w=int(window.value)
    start_idx = df.index.get_loc(str(nearest_str_date(df.index, start.value - datetime.timedelta(days=w))))
    end_idx = df.index.get_loc(str(nearest_str_date(df.index, end.value)))
    # Some error management
    if start_idx == end_idx:
        raise IndexError('Start date must be different from end date.')
    if end_idx < w:
        end_idx = w
    if end_idx < start_idx:
        start_idx, end_idx = end_idx, start_idx

    pipe = Pipeline(
        [
            (\"data_sel\", DataSelector(start=start_idx, end=end_idx, w=w)),
            (\"rips_pers\", RipsPersistence(max_rips_dimension=2, max_persistence_dimension=2, only_this_dim=1, n_jobs=-1)),
            (\"landscape\", Landscape(resolution=1000)),
            (\"lpnorm\", LPNorm(n_jobs=-1)),
            (\"mms\", MinMaxScaler()),
        ]
    )

    start_chrono = float(time.time())
    #os.write(1, bytes(str(start_chrono),'UTF-8') + b'\\r\\n')
    L1L2mms = pipe.fit_transform(df)
    stop_chrono = float(time.time())
    #os.write(1, bytes(str(stop_chrono),'UTF-8') + b'\\r\\n')
    os.write(1, bytes(str(stop_chrono - start_chrono),'UTF-8') + b' sec. \\r\\n')
    
    l1l2df = pd.DataFrame({'date': df[start_idx+w:end_idx].index, 'L1': L1L2mms.transpose()[0], 'L2': L1L2mms.transpose()[1]})
    # Calculate the variance for the L norms
    j = 0

    for i in l1l2df.index:
        if j < w:
            k = 0
        else:
            k = j - w
        l1l2df.loc[i, 'L1_variance'] = np.var(l1l2df.iloc[k:j].L1)
        l1l2df.loc[i, 'L2_variance'] = np.var(l1l2df.iloc[k:j].L2)
        j += 1
        
    return l1l2df

def compute(args):
    l1l2df = compute_Lp_norms()
    fig.data[0]['x'] = l1l2df['date']
    fig.data[0]['y'] = l1l2df['L1']
    fig.data[1]['x'] = l1l2df['date']
    fig.data[1]['y'] = l1l2df['L2']
    fig.data[2]['x'] = l1l2df['date']
    fig.data[2]['y'] = l1l2df['L1_variance']
    fig.data[3]['x'] = l1l2df['date']
    fig.data[3]['y'] = l1l2df['L2_variance']
    
button.observe(compute, 'value')

# Layout
left_box = HBox([start, end, window, button])

fig = go.FigureWidget()

l1l2df = compute_Lp_norms()
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1'], mode='lines', name='L1')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2'], mode='lines', name='L2')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1_variance'], mode='lines', name='L1_variance')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2_variance'], mode='lines', name='L2_variance')
fig.update_xaxes(dtick=\"M1\", tickformat=\"%b\\n%Y\")
fig.layout.title.text = 'Lp norms'

display(left_box)
fig" :silent :json-false :store_history t :user_expressions #s(hash-table) :allow_stdin t :stop_on_error :json-false) #s(jupyter-org-client jupyter--clients (#<finalizer>) "idle" 48 (:status "ok" :protocol_version "5.3" :implementation "ipython" :implementation_version "8.29.0" :language_info (:name python :version "3.12.3" :mimetype "text/x-python" :codemirror_mode (:name "ipython" :version 3) :pygments_lexer "ipython3" :nbconvert_exporter "python" :file_extension ".py") :banner "Python 3.12.3 (main, Nov  6 2024, 18:32:19) [GCC 13.2.0]
Type 'copyright', 'credits' or 'license' for more information
IPython 8.29.0 -- An enhanced Interactive Python. Type '?' for help.
" :help_links [(:text "Python Reference" :url "https://docs.python.org/3.12") (:text "IPython Reference" :url "https://ipython.org/documentation.html") (:text "NumPy Reference" :url "https://docs.scipy.org/doc/numpy/reference/") (:text "SciPy Reference" :url "https://docs.scipy.org/doc/scipy/reference/") (:text "Matplotlib Reference" :url "https://matplotlib.org/contents.html") (:text "SymPy Reference" :url "http://docs.sympy.org/latest/index.html") (:text "pandas Reference" :url "https://pandas.pydata.org/pandas-docs/stable/")]) #s(hash-table test equal) (#[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [#[257 "\211:\203y \211\242\211\303\267\210\202w \243\304!\207\243\211:\205v \211\242\243\211:\205t \211\242\243\211:\205r \211\242\243\211:\205p \211\242\243\211?\205n \302\242\203H \305\306!\210\307\3101Z \211\300
	%0\207\210\300\301\242 \240\210\211\300
	%\262\266\202\266\202\266\202\266\202\207\311\207\211\312\267\202\233 \302\242\203\210 \305\313!\210\314\300\242!?\205\234 \300\301\242 \240\207\315\300\242!\207\311\207" [(#s(websocket open (:id "6bf9469b-83c6-4b8d-8e54-385f791b796f" :session #s(jupyter-session nil "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" nil)) #[257 "\300\301\240\207" [(nil) nil] 3 "

(fn WS)"] #[514 "\303!
>\204 \304\305\306D\"\210\211\307H\211\310>\2036 \311\303!
>\204( \304\305\306D\"\210\312H!\313\300\242\314\315B!\"\207\313\301\314\316\303!
>\204K \304\305\306D\"\210\307HD!\"\207" [(#7) #[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [jupyter-content (subscribers) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"] cl-struct-websocket-frame-tags type-of signal wrong-type-argument websocket-frame 1 (binary text) jupyter-read-plist-from-string 2 jupyter-run-with-state jupyter-publish message error] 11 "

(fn WS FRAME)"] #[257 "\300\242\203	 \301\302!\207\300\303\240\207" [(nil) error "Kernel connection could not be established" t] 3 "

(fn WS)"] websocket-default-error-handler nil nil nil "ws://localhost:8888/api/kernels/6bf9469b-83c6-4b8d-8e54-385f791b796f/channels?session_id=f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" nil nil #<process websocket to ws://localhost:8888/api/kernels/6bf9469b-83c6-4b8d-8e54-385f791b796f/channels?session_id=f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0> nil nil "wlYv8zPJwfSVI4dSA1dXwtQQaB4=" nil)) (#[0 "\305\304\303\306\307\304!\310\311\312\300\"\313\311\314\300\"\315\311\316\301\302#&
\207" [(nil) (#7) #[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [jupyter-content (subscribers) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"] "6bf9469b-83c6-4b8d-8e54-385f791b796f" #s(jupyter-server "http://localhost:8888" "ws://localhost:8888" t (:default "python3" :kernelspecs (#s(jupyter-kernelspec "python3" (:argv ["python" "-m" "ipykernel_launcher" "-f" "{connection_file}"] :env nil :display_name "Python 3 (ipykernel)" :language "python" :interrupt_mode "signal" :metadata (:debugger t)) nil)))) jupyter-api-kernel-websocket :custom-header-alist jupyter-api-auth-headers :on-open make-closure #[257 "\300\301\240\207" [V0 nil] 3 "

(fn WS)"] :on-close #[257 "\300\242\203	 \301\302!\207\300\303\240\207" [V0 error "Kernel connection could not be established" t] 3 "

(fn WS)"] :on-message #[514 "\303!
>\204 \304\305\306D\"\210\211\307H\211\310>\2036 \311\303!
>\204( \304\305\306D\"\210\312H!\313\300\242\314\315B!\"\207\313\301\314\316\303!
>\204K \304\305\306D\"\210\307HD!\"\207" [V0 V1 cl-struct-websocket-frame-tags type-of signal wrong-type-argument websocket-frame 1 (binary text) jupyter-read-plist-from-string 2 jupyter-run-with-state jupyter-publish message error] 11 "

(fn WS FRAME)"]] 14]) (nil) #s(hash-table test eq purecopy t data (message 14 send 20)) jupyter-content error "Attempting to send message to shutdown kernel" #[1285 "\301\242\242\302!>\204 \303\304\305D\"\210\211\306H\262\307\310\"\311\312\313
\314&\266\202\"\207" [cl-struct-websocket-tags websocket-send-text type-of signal wrong-type-argument websocket 2 plist-get :session jupyter-encode-raw-message :channel :msg-id :content] 18 "

(fn WS CHANNEL MSG-TYPE CONTENT MSG-ID)"] (websocket-closed) nil #s(hash-table test eq purecopy t data (start 127 stop 150)) "Can't start I/O connection to shutdown kernel" websocket-openp websocket-close] 18 "

(fn EVENT)"] (subscribers #[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [#[257 "\303\304!\211\204 \305!\207\306\301!
>\204 \307\310\311\301D\"\210\301\312H\2037 \211\313\230\203* \314C\207\300\315!\230\205C \301\"\207\300\315!\230\205C \301\"\207" ["4b09f712-ee03-45d1-be9a-996919662b66" #s(jupyter-org-request "4b09f712-ee03-45d1-be9a-996919662b66" "execute_request" (:code "# Some basic data science imports
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.pipeline import Pipeline
import datetime

import time
import os

# Some gudhi imports for TDA

import tda_pipeline
from tda_pipeline import DataSelector, RipsPersistence, LPNorm
from gudhi.representations import Landscape

# Some graphical imports for the web app
import ipywidgets as widgets
import plotly.graph_objects as go

# Some imports for ipywidgets
from ipywidgets import DatePicker, BoundedIntText, ToggleButton, Text, HBox, VBox
from IPython.display import display

# cf. data_generation.py
df = pd.read_csv('latest.csv', index_col=0)

# min, max and default start values taken from the dataset - Python 3.7+
min_value = datetime.date.fromisoformat(df.index[0])
max_value = datetime.date.fromisoformat(df.index[-1])

last_year = max_value - datetime.timedelta(days=250)

# Widgets
start = DatePicker(description='start', value = last_year)
end   = DatePicker(description='end', value = max_value)
window = BoundedIntText(value=50, min=10, max=100, step=1, description='Windows size')

button = ToggleButton(description='Compute', icon='cogs')

def nearest_str_date(items, pivot):
    return min(items, key=lambda str_date: abs(datetime.date.fromisoformat(str_date) - pivot))

def compute_Lp_norms():
    w=int(window.value)
    start_idx = df.index.get_loc(str(nearest_str_date(df.index, start.value - datetime.timedelta(days=w))))
    end_idx = df.index.get_loc(str(nearest_str_date(df.index, end.value)))
    # Some error management
    if start_idx == end_idx:
        raise IndexError('Start date must be different from end date.')
    if end_idx < w:
        end_idx = w
    if end_idx < start_idx:
        start_idx, end_idx = end_idx, start_idx

    pipe = Pipeline(
        [
            (\"data_sel\", DataSelector(start=start_idx, end=end_idx, w=w)),
            (\"rips_pers\", RipsPersistence(max_rips_dimension=2, max_persistence_dimension=2, only_this_dim=1, n_jobs=-1)),
            (\"landscape\", Landscape(resolution=1000)),
            (\"lpnorm\", LPNorm(n_jobs=-1)),
            (\"mms\", MinMaxScaler()),
        ]
    )

    start_chrono = float(time.time())
    #os.write(1, bytes(str(start_chrono),'UTF-8') + b'\\r\\n')
    L1L2mms = pipe.fit_transform(df)
    stop_chrono = float(time.time())
    #os.write(1, bytes(str(stop_chrono),'UTF-8') + b'\\r\\n')
    os.write(1, bytes(str(stop_chrono - start_chrono),'UTF-8') + b' sec. \\r\\n')
    
    l1l2df = pd.DataFrame({'date': df[start_idx+w:end_idx].index, 'L1': L1L2mms.transpose()[0], 'L2': L1L2mms.transpose()[1]})
    # Calculate the variance for the L norms
    j = 0

    for i in l1l2df.index:
        if j < w:
            k = 0
        else:
            k = j - w
        l1l2df.loc[i, 'L1_variance'] = np.var(l1l2df.iloc[k:j].L1)
        l1l2df.loc[i, 'L2_variance'] = np.var(l1l2df.iloc[k:j].L2)
        j += 1
        
    return l1l2df

def compute(args):
    l1l2df = compute_Lp_norms()
    fig.data[0]['x'] = l1l2df['date']
    fig.data[0]['y'] = l1l2df['L1']
    fig.data[1]['x'] = l1l2df['date']
    fig.data[1]['y'] = l1l2df['L2']
    fig.data[2]['x'] = l1l2df['date']
    fig.data[2]['y'] = l1l2df['L1_variance']
    fig.data[3]['x'] = l1l2df['date']
    fig.data[3]['y'] = l1l2df['L2_variance']
    
button.observe(compute, 'value')

# Layout
left_box = HBox([start, end, window, button])

fig = go.FigureWidget()

l1l2df = compute_Lp_norms()
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1'], mode='lines', name='L1')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2'], mode='lines', name='L2')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1_variance'], mode='lines', name='L1_variance')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2_variance'], mode='lines', name='L2_variance')
fig.update_xaxes(dtick=\"M1\", tickformat=\"%b\\n%Y\")
fig.layout.title.text = 'Lp norms'

display(left_box)
fig" :silent :json-false :store_history t :user_expressions #s(hash-table) :allow_stdin t :stop_on_error :json-false) #5 (26440 37591 495486 292000) t (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_530" :msg_type "execute_reply" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.530238Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_530" :msg_type "execute_reply" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata (:started "2024-11-28T15:57:11.501467Z" :dependencies_met t :engine "09acb503-cf8f-4eef-b1b4-159ead369f19" :status "error") :content (:status "error" :traceback ["[0;31m---------------------------------------------------------------------------[0m" "[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)" "Cell [0;32mIn[47], line 13[0m
[1;32m      9[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m
[1;32m     11[0m [38;5;66;03m# Some gudhi imports for TDA[39;00m
[0;32m---> 13[0m [38;5;28;01mimport[39;00m [38;5;21;01mtda_pipeline[39;00m
[1;32m     14[0m [38;5;28;01mfrom[39;00m [38;5;21;01mtda_pipeline[39;00m [38;5;28;01mimport[39;00m DataSelector, RipsPersistence, LPNorm
[1;32m     15[0m [38;5;28;01mfrom[39;00m [38;5;21;01mgudhi[39;00m[38;5;21;01m.[39;00m[38;5;21;01mrepresentations[39;00m [38;5;28;01mimport[39;00m Landscape
" "[0;31mModuleNotFoundError[0m: No module named 'tda_pipeline'"] :ename "ModuleNotFoundError" :evalue "No module named 'tda_pipeline'" :engine_info (:engine_uuid "09acb503-cf8f-4eef-b1b4-159ead369f19" :engine_id -1 :method "execute") :execution_count 47 :user_expressions nil :payload []) :buffers [] :channel "shell") ((:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_527" :msg_type "status" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.501001Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_527" :msg_type "status" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata nil :content (:execution_state "busy") :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_528" :msg_type "execute_input" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.501494Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_528" :msg_type "execute_input" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata nil :content (:code "# Some basic data science imports
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.pipeline import Pipeline
import datetime

import time
import os

# Some gudhi imports for TDA

import tda_pipeline
from tda_pipeline import DataSelector, RipsPersistence, LPNorm
from gudhi.representations import Landscape

# Some graphical imports for the web app
import ipywidgets as widgets
import plotly.graph_objects as go

# Some imports for ipywidgets
from ipywidgets import DatePicker, BoundedIntText, ToggleButton, Text, HBox, VBox
from IPython.display import display

# cf. data_generation.py
df = pd.read_csv('latest.csv', index_col=0)

# min, max and default start values taken from the dataset - Python 3.7+
min_value = datetime.date.fromisoformat(df.index[0])
max_value = datetime.date.fromisoformat(df.index[-1])

last_year = max_value - datetime.timedelta(days=250)

# Widgets
start = DatePicker(description='start', value = last_year)
end   = DatePicker(description='end', value = max_value)
window = BoundedIntText(value=50, min=10, max=100, step=1, description='Windows size')

button = ToggleButton(description='Compute', icon='cogs')

def nearest_str_date(items, pivot):
    return min(items, key=lambda str_date: abs(datetime.date.fromisoformat(str_date) - pivot))

def compute_Lp_norms():
    w=int(window.value)
    start_idx = df.index.get_loc(str(nearest_str_date(df.index, start.value - datetime.timedelta(days=w))))
    end_idx = df.index.get_loc(str(nearest_str_date(df.index, end.value)))
    # Some error management
    if start_idx == end_idx:
        raise IndexError('Start date must be different from end date.')
    if end_idx < w:
        end_idx = w
    if end_idx < start_idx:
        start_idx, end_idx = end_idx, start_idx

    pipe = Pipeline(
        [
            (\"data_sel\", DataSelector(start=start_idx, end=end_idx, w=w)),
            (\"rips_pers\", RipsPersistence(max_rips_dimension=2, max_persistence_dimension=2, only_this_dim=1, n_jobs=-1)),
            (\"landscape\", Landscape(resolution=1000)),
            (\"lpnorm\", LPNorm(n_jobs=-1)),
            (\"mms\", MinMaxScaler()),
        ]
    )

    start_chrono = float(time.time())
    #os.write(1, bytes(str(start_chrono),'UTF-8') + b'\\r\\n')
    L1L2mms = pipe.fit_transform(df)
    stop_chrono = float(time.time())
    #os.write(1, bytes(str(stop_chrono),'UTF-8') + b'\\r\\n')
    os.write(1, bytes(str(stop_chrono - start_chrono),'UTF-8') + b' sec. \\r\\n')
    
    l1l2df = pd.DataFrame({'date': df[start_idx+w:end_idx].index, 'L1': L1L2mms.transpose()[0], 'L2': L1L2mms.transpose()[1]})
    # Calculate the variance for the L norms
    j = 0

    for i in l1l2df.index:
        if j < w:
            k = 0
        else:
            k = j - w
        l1l2df.loc[i, 'L1_variance'] = np.var(l1l2df.iloc[k:j].L1)
        l1l2df.loc[i, 'L2_variance'] = np.var(l1l2df.iloc[k:j].L2)
        j += 1
        
    return l1l2df

def compute(args):
    l1l2df = compute_Lp_norms()
    fig.data[0]['x'] = l1l2df['date']
    fig.data[0]['y'] = l1l2df['L1']
    fig.data[1]['x'] = l1l2df['date']
    fig.data[1]['y'] = l1l2df['L2']
    fig.data[2]['x'] = l1l2df['date']
    fig.data[2]['y'] = l1l2df['L1_variance']
    fig.data[3]['x'] = l1l2df['date']
    fig.data[3]['y'] = l1l2df['L2_variance']
    
button.observe(compute, 'value')

# Layout
left_box = HBox([start, end, window, button])

fig = go.FigureWidget()

l1l2df = compute_Lp_norms()
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1'], mode='lines', name='L1')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2'], mode='lines', name='L2')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1_variance'], mode='lines', name='L1_variance')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2_variance'], mode='lines', name='L2_variance')
fig.update_xaxes(dtick=\"M1\", tickformat=\"%b\\n%Y\")
fig.layout.title.text = 'Lp norms'

display(left_box)
fig" :execution_count 47) :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_529" :msg_type "error" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.529306Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_529" :msg_type "error" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata nil :content (:traceback ["[0;31m---------------------------------------------------------------------------[0m" "[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)" "Cell [0;32mIn[47], line 13[0m
[1;32m      9[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m
[1;32m     11[0m [38;5;66;03m# Some gudhi imports for TDA[39;00m
[0;32m---> 13[0m [38;5;28;01mimport[39;00m [38;5;21;01mtda_pipeline[39;00m
[1;32m     14[0m [38;5;28;01mfrom[39;00m [38;5;21;01mtda_pipeline[39;00m [38;5;28;01mimport[39;00m DataSelector, RipsPersistence, LPNorm
[1;32m     15[0m [38;5;28;01mfrom[39;00m [38;5;21;01mgudhi[39;00m[38;5;21;01m.[39;00m[38;5;21;01mrepresentations[39;00m [38;5;28;01mimport[39;00m Landscape
" "[0;31mModuleNotFoundError[0m: No module named 'tda_pipeline'"] :ename "ModuleNotFoundError" :evalue "No module named 'tda_pipeline'") :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_531" :msg_type "status" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.530475Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_531" :msg_type "status" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata nil :content (:execution_state "idle") :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_530" :msg_type "execute_reply" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.530238Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_530" :msg_type "execute_reply" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata (:started "2024-11-28T15:57:11.501467Z" :dependencies_met t :engine "09acb503-cf8f-4eef-b1b4-159ead369f19" :status "error") :content (:status "error" :traceback ["[0;31m---------------------------------------------------------------------------[0m" "[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)" "Cell [0;32mIn[47], line 13[0m
[1;32m      9[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m
[1;32m     11[0m [38;5;66;03m# Some gudhi imports for TDA[39;00m
[0;32m---> 13[0m [38;5;28;01mimport[39;00m [38;5;21;01mtda_pipeline[39;00m
[1;32m     14[0m [38;5;28;01mfrom[39;00m [38;5;21;01mtda_pipeline[39;00m [38;5;28;01mimport[39;00m DataSelector, RipsPersistence, LPNorm
[1;32m     15[0m [38;5;28;01mfrom[39;00m [38;5;21;01mgudhi[39;00m[38;5;21;01m.[39;00m[38;5;21;01mrepresentations[39;00m [38;5;28;01mimport[39;00m Landscape
" "[0;31mModuleNotFoundError[0m: No module named 'tda_pipeline'"] :ename "ModuleNotFoundError" :evalue "No module named 'tda_pipeline'" :engine_info (:engine_uuid "09acb503-cf8f-4eef-b1b4-159ead369f19" :engine_id -1 :method "execute") :execution_count 47 :user_expressions nil :payload []) :buffers [] :channel "shell")) #10 nil value ((:colname-names) (:rowname-names) (:result-params "replace") (:result-type . value) (:results . "replace") (:exports . "code") (:kernel . "python3") (:session . "py") (:async . "yes") (:tangle . "no") (:hlines . "no") (:noweb . "no") (:cache . "no")) nil nil nil t nil #<marker at 659 in tda_web_app.org> t #<overlay in no buffer>) cl-struct-jupyter-request-tags #[514 "\301!>\204 \302\303\304D\"\210\305I\210\301!>\204# \302\303\304D\"\210\306\306HC\244I\210\307!\204C \310!\311\230\204C \310!\312\230\203W \301!>\204R \302\303\304D\"\210\313\314I\210\315\316BB!\207" [cl-struct-jupyter-request-tags type-of signal wrong-type-argument jupyter-request 7 8 jupyter-message-status-idle-p jupyter-message-type "kernel_info_reply" "shutdown_reply" 6 t jupyter-content :parent-request] 6 "

(fn REQ MSG)"] jupyter-message-type jupyter-content type-of signal wrong-type-argument jupyter-request 6 "status" unsubscribe jupyter-message-parent-id] 7 "

(fn MSG)"] (subscribers #[257 "\211:\203L \211\242\211\301\267\202G \243\211:\203& \211\242\243\211\204  \300!\207\302\303\"\207\302\303\"\207\243\211:\203B \211\243\211\204= \304\305\306\"\207\302\303\"\207\302\303\"\207\302\303\"\207\302\303\"\207" [#[257 "\301!\205 \302\303\"\304\300#\262\207" [#5 jupyter-message-type plist-get :channel jupyter-handle-message] 6 "

(fn MSG)"] #s(hash-table test eq purecopy t data (content 13 subscribe 43)) error "Unhandled subscriber content: %s" signal jupyter-subscribed-subscriber nil] 8 "

(fn SUB-CONTENT)"]) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"]) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"] #[257 "\211:\203L \211\242\211\301\267\202G \243\211:\203& \211\242\243\211\204  \300!\207\302\303\"\207\302\303\"\207\243\211:\203B \211\243\211\204= \304\305\306\"\207\302\303\"\207\302\303\"\207\302\303\"\207\302\303\"\207" [#[257 "\211\303\267\202\" \304\302!\207\305\302!\210\301\306\240\210\307\300\242!\205H \310\300\242!\207\311\302!\207\211:\205H \211\242\211\312=\205F \243\211:\205D \211\242\243\211?\205B \302!\266\202\262\262\207" [(#s(websocket open (:id "6bf9469b-83c6-4b8d-8e54-385f791b796f" :session #s(jupyter-session nil "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" nil)) #[257 "\300\301\240\207" [(nil) nil] 3 "

(fn WS)"] #[514 "\303!
>\204 \304\305\306D\"\210\211\307H\211\310>\2036 \311\303!
>\204( \304\305\306D\"\210\312H!\313\300\242\314\315B!\"\207\313\301\314\316\303!
>\204K \304\305\306D\"\210\307HD!\"\207" [(#[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [#[257 "\211:\203y \211\242\211\303\267\210\202w \243\304!\207\243\211:\205v \211\242\243\211:\205t \211\242\243\211:\205r \211\242\243\211:\205p \211\242\243\211?\205n \302\242\203H \305\306!\210\307\3101Z \211\300
	%0\207\210\300\301\242 \240\210\211\300
	%\262\266\202\266\202\266\202\266\202\207\311\207\211\312\267\202\233 \302\242\203\210 \305\313!\210\314\300\242!?\205\234 \300\301\242 \240\207\315\300\242!\207\311\207" [#11 (#[0 "\305\304\303\306\307\304!\310\311\312\300\"\313\311\314\300\"\315\311\316\301\302#&
\207" [(nil) #15 #[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [jupyter-content (subscribers) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"] "6bf9469b-83c6-4b8d-8e54-385f791b796f" #s(jupyter-server "http://localhost:8888" "ws://localhost:8888" t (:default "python3" :kernelspecs (#s(jupyter-kernelspec "python3" (:argv ["python" "-m" "ipykernel_launcher" "-f" "{connection_file}"] :env nil :display_name "Python 3 (ipykernel)" :language "python" :interrupt_mode "signal" :metadata (:debugger t)) nil)))) jupyter-api-kernel-websocket :custom-header-alist jupyter-api-auth-headers :on-open make-closure #[257 "\300\301\240\207" [V0 nil] 3 "

(fn WS)"] :on-close #[257 "\300\242\203	 \301\302!\207\300\303\240\207" [V0 error "Kernel connection could not be established" t] 3 "

(fn WS)"] :on-message #[514 "\303!
>\204 \304\305\306D\"\210\211\307H\211\310>\2036 \311\303!
>\204( \304\305\306D\"\210\312H!\313\300\242\314\315B!\"\207\313\301\314\316\303!
>\204K \304\305\306D\"\210\307HD!\"\207" [V0 V1 cl-struct-websocket-frame-tags type-of signal wrong-type-argument websocket-frame 1 (binary text) jupyter-read-plist-from-string 2 jupyter-run-with-state jupyter-publish message error] 11 "

(fn WS FRAME)"]] 14]) (nil) #s(hash-table test eq purecopy t data (message 14 send 20)) jupyter-content error "Attempting to send message to shutdown kernel" #[1285 "\301\242\242\302!>\204 \303\304\305D\"\210\211\306H\262\307\310\"\311\312\313
\314&\266\202\"\207" [cl-struct-websocket-tags websocket-send-text type-of signal wrong-type-argument websocket 2 plist-get :session jupyter-encode-raw-message :channel :msg-id :content] 18 "

(fn WS CHANNEL MSG-TYPE CONTENT MSG-ID)"] (websocket-closed) nil #s(hash-table test eq purecopy t data (start 127 stop 150)) "Can't start I/O connection to shutdown kernel" websocket-openp websocket-close] 18 "

(fn EVENT)"] (subscribers #[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [#[257 "\303\304!\211\204 \305!\207\306\301!
>\204 \307\310\311\301D\"\210\301\312H\2037 \211\313\230\203* \314C\207\300\315!\230\205C \301\"\207\300\315!\230\205C \301\"\207" ["4b09f712-ee03-45d1-be9a-996919662b66" #s(jupyter-org-request "4b09f712-ee03-45d1-be9a-996919662b66" "execute_request" (:code "# Some basic data science imports
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.pipeline import Pipeline
import datetime

import time
import os

# Some gudhi imports for TDA

import tda_pipeline
from tda_pipeline import DataSelector, RipsPersistence, LPNorm
from gudhi.representations import Landscape

# Some graphical imports for the web app
import ipywidgets as widgets
import plotly.graph_objects as go

# Some imports for ipywidgets
from ipywidgets import DatePicker, BoundedIntText, ToggleButton, Text, HBox, VBox
from IPython.display import display

# cf. data_generation.py
df = pd.read_csv('latest.csv', index_col=0)

# min, max and default start values taken from the dataset - Python 3.7+
min_value = datetime.date.fromisoformat(df.index[0])
max_value = datetime.date.fromisoformat(df.index[-1])

last_year = max_value - datetime.timedelta(days=250)

# Widgets
start = DatePicker(description='start', value = last_year)
end   = DatePicker(description='end', value = max_value)
window = BoundedIntText(value=50, min=10, max=100, step=1, description='Windows size')

button = ToggleButton(description='Compute', icon='cogs')

def nearest_str_date(items, pivot):
    return min(items, key=lambda str_date: abs(datetime.date.fromisoformat(str_date) - pivot))

def compute_Lp_norms():
    w=int(window.value)
    start_idx = df.index.get_loc(str(nearest_str_date(df.index, start.value - datetime.timedelta(days=w))))
    end_idx = df.index.get_loc(str(nearest_str_date(df.index, end.value)))
    # Some error management
    if start_idx == end_idx:
        raise IndexError('Start date must be different from end date.')
    if end_idx < w:
        end_idx = w
    if end_idx < start_idx:
        start_idx, end_idx = end_idx, start_idx

    pipe = Pipeline(
        [
            (\"data_sel\", DataSelector(start=start_idx, end=end_idx, w=w)),
            (\"rips_pers\", RipsPersistence(max_rips_dimension=2, max_persistence_dimension=2, only_this_dim=1, n_jobs=-1)),
            (\"landscape\", Landscape(resolution=1000)),
            (\"lpnorm\", LPNorm(n_jobs=-1)),
            (\"mms\", MinMaxScaler()),
        ]
    )

    start_chrono = float(time.time())
    #os.write(1, bytes(str(start_chrono),'UTF-8') + b'\\r\\n')
    L1L2mms = pipe.fit_transform(df)
    stop_chrono = float(time.time())
    #os.write(1, bytes(str(stop_chrono),'UTF-8') + b'\\r\\n')
    os.write(1, bytes(str(stop_chrono - start_chrono),'UTF-8') + b' sec. \\r\\n')
    
    l1l2df = pd.DataFrame({'date': df[start_idx+w:end_idx].index, 'L1': L1L2mms.transpose()[0], 'L2': L1L2mms.transpose()[1]})
    # Calculate the variance for the L norms
    j = 0

    for i in l1l2df.index:
        if j < w:
            k = 0
        else:
            k = j - w
        l1l2df.loc[i, 'L1_variance'] = np.var(l1l2df.iloc[k:j].L1)
        l1l2df.loc[i, 'L2_variance'] = np.var(l1l2df.iloc[k:j].L2)
        j += 1
        
    return l1l2df

def compute(args):
    l1l2df = compute_Lp_norms()
    fig.data[0]['x'] = l1l2df['date']
    fig.data[0]['y'] = l1l2df['L1']
    fig.data[1]['x'] = l1l2df['date']
    fig.data[1]['y'] = l1l2df['L2']
    fig.data[2]['x'] = l1l2df['date']
    fig.data[2]['y'] = l1l2df['L1_variance']
    fig.data[3]['x'] = l1l2df['date']
    fig.data[3]['y'] = l1l2df['L2_variance']
    
button.observe(compute, 'value')

# Layout
left_box = HBox([start, end, window, button])

fig = go.FigureWidget()

l1l2df = compute_Lp_norms()
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1'], mode='lines', name='L1')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2'], mode='lines', name='L2')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1_variance'], mode='lines', name='L1_variance')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2_variance'], mode='lines', name='L2_variance')
fig.update_xaxes(dtick=\"M1\", tickformat=\"%b\\n%Y\")
fig.layout.title.text = 'Lp norms'

display(left_box)
fig" :silent :json-false :store_history t :user_expressions #s(hash-table) :allow_stdin t :stop_on_error :json-false) #5 (26440 37591 495486 292000) t (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_530" :msg_type "execute_reply" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.530238Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_530" :msg_type "execute_reply" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata (:started "2024-11-28T15:57:11.501467Z" :dependencies_met t :engine "09acb503-cf8f-4eef-b1b4-159ead369f19" :status "error") :content (:status "error" :traceback ["[0;31m---------------------------------------------------------------------------[0m" "[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)" "Cell [0;32mIn[47], line 13[0m
[1;32m      9[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m
[1;32m     11[0m [38;5;66;03m# Some gudhi imports for TDA[39;00m
[0;32m---> 13[0m [38;5;28;01mimport[39;00m [38;5;21;01mtda_pipeline[39;00m
[1;32m     14[0m [38;5;28;01mfrom[39;00m [38;5;21;01mtda_pipeline[39;00m [38;5;28;01mimport[39;00m DataSelector, RipsPersistence, LPNorm
[1;32m     15[0m [38;5;28;01mfrom[39;00m [38;5;21;01mgudhi[39;00m[38;5;21;01m.[39;00m[38;5;21;01mrepresentations[39;00m [38;5;28;01mimport[39;00m Landscape
" "[0;31mModuleNotFoundError[0m: No module named 'tda_pipeline'"] :ename "ModuleNotFoundError" :evalue "No module named 'tda_pipeline'" :engine_info (:engine_uuid "09acb503-cf8f-4eef-b1b4-159ead369f19" :engine_id -1 :method "execute") :execution_count 47 :user_expressions nil :payload []) :buffers [] :channel "shell") ((:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_527" :msg_type "status" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.501001Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_527" :msg_type "status" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata nil :content (:execution_state "busy") :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_528" :msg_type "execute_input" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.501494Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_528" :msg_type "execute_input" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata nil :content (:code "# Some basic data science imports
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.pipeline import Pipeline
import datetime

import time
import os

# Some gudhi imports for TDA

import tda_pipeline
from tda_pipeline import DataSelector, RipsPersistence, LPNorm
from gudhi.representations import Landscape

# Some graphical imports for the web app
import ipywidgets as widgets
import plotly.graph_objects as go

# Some imports for ipywidgets
from ipywidgets import DatePicker, BoundedIntText, ToggleButton, Text, HBox, VBox
from IPython.display import display

# cf. data_generation.py
df = pd.read_csv('latest.csv', index_col=0)

# min, max and default start values taken from the dataset - Python 3.7+
min_value = datetime.date.fromisoformat(df.index[0])
max_value = datetime.date.fromisoformat(df.index[-1])

last_year = max_value - datetime.timedelta(days=250)

# Widgets
start = DatePicker(description='start', value = last_year)
end   = DatePicker(description='end', value = max_value)
window = BoundedIntText(value=50, min=10, max=100, step=1, description='Windows size')

button = ToggleButton(description='Compute', icon='cogs')

def nearest_str_date(items, pivot):
    return min(items, key=lambda str_date: abs(datetime.date.fromisoformat(str_date) - pivot))

def compute_Lp_norms():
    w=int(window.value)
    start_idx = df.index.get_loc(str(nearest_str_date(df.index, start.value - datetime.timedelta(days=w))))
    end_idx = df.index.get_loc(str(nearest_str_date(df.index, end.value)))
    # Some error management
    if start_idx == end_idx:
        raise IndexError('Start date must be different from end date.')
    if end_idx < w:
        end_idx = w
    if end_idx < start_idx:
        start_idx, end_idx = end_idx, start_idx

    pipe = Pipeline(
        [
            (\"data_sel\", DataSelector(start=start_idx, end=end_idx, w=w)),
            (\"rips_pers\", RipsPersistence(max_rips_dimension=2, max_persistence_dimension=2, only_this_dim=1, n_jobs=-1)),
            (\"landscape\", Landscape(resolution=1000)),
            (\"lpnorm\", LPNorm(n_jobs=-1)),
            (\"mms\", MinMaxScaler()),
        ]
    )

    start_chrono = float(time.time())
    #os.write(1, bytes(str(start_chrono),'UTF-8') + b'\\r\\n')
    L1L2mms = pipe.fit_transform(df)
    stop_chrono = float(time.time())
    #os.write(1, bytes(str(stop_chrono),'UTF-8') + b'\\r\\n')
    os.write(1, bytes(str(stop_chrono - start_chrono),'UTF-8') + b' sec. \\r\\n')
    
    l1l2df = pd.DataFrame({'date': df[start_idx+w:end_idx].index, 'L1': L1L2mms.transpose()[0], 'L2': L1L2mms.transpose()[1]})
    # Calculate the variance for the L norms
    j = 0

    for i in l1l2df.index:
        if j < w:
            k = 0
        else:
            k = j - w
        l1l2df.loc[i, 'L1_variance'] = np.var(l1l2df.iloc[k:j].L1)
        l1l2df.loc[i, 'L2_variance'] = np.var(l1l2df.iloc[k:j].L2)
        j += 1
        
    return l1l2df

def compute(args):
    l1l2df = compute_Lp_norms()
    fig.data[0]['x'] = l1l2df['date']
    fig.data[0]['y'] = l1l2df['L1']
    fig.data[1]['x'] = l1l2df['date']
    fig.data[1]['y'] = l1l2df['L2']
    fig.data[2]['x'] = l1l2df['date']
    fig.data[2]['y'] = l1l2df['L1_variance']
    fig.data[3]['x'] = l1l2df['date']
    fig.data[3]['y'] = l1l2df['L2_variance']
    
button.observe(compute, 'value')

# Layout
left_box = HBox([start, end, window, button])

fig = go.FigureWidget()

l1l2df = compute_Lp_norms()
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1'], mode='lines', name='L1')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2'], mode='lines', name='L2')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1_variance'], mode='lines', name='L1_variance')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2_variance'], mode='lines', name='L2_variance')
fig.update_xaxes(dtick=\"M1\", tickformat=\"%b\\n%Y\")
fig.layout.title.text = 'Lp norms'

display(left_box)
fig" :execution_count 47) :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_529" :msg_type "error" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.529306Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_529" :msg_type "error" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata nil :content (:traceback ["[0;31m---------------------------------------------------------------------------[0m" "[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)" "Cell [0;32mIn[47], line 13[0m
[1;32m      9[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m
[1;32m     11[0m [38;5;66;03m# Some gudhi imports for TDA[39;00m
[0;32m---> 13[0m [38;5;28;01mimport[39;00m [38;5;21;01mtda_pipeline[39;00m
[1;32m     14[0m [38;5;28;01mfrom[39;00m [38;5;21;01mtda_pipeline[39;00m [38;5;28;01mimport[39;00m DataSelector, RipsPersistence, LPNorm
[1;32m     15[0m [38;5;28;01mfrom[39;00m [38;5;21;01mgudhi[39;00m[38;5;21;01m.[39;00m[38;5;21;01mrepresentations[39;00m [38;5;28;01mimport[39;00m Landscape
" "[0;31mModuleNotFoundError[0m: No module named 'tda_pipeline'"] :ename "ModuleNotFoundError" :evalue "No module named 'tda_pipeline'") :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_531" :msg_type "status" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.530475Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_531" :msg_type "status" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata nil :content (:execution_state "idle") :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_530" :msg_type "execute_reply" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.530238Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_530" :msg_type "execute_reply" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata (:started "2024-11-28T15:57:11.501467Z" :dependencies_met t :engine "09acb503-cf8f-4eef-b1b4-159ead369f19" :status "error") :content (:status "error" :traceback ["[0;31m---------------------------------------------------------------------------[0m" "[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)" "Cell [0;32mIn[47], line 13[0m
[1;32m      9[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m
[1;32m     11[0m [38;5;66;03m# Some gudhi imports for TDA[39;00m
[0;32m---> 13[0m [38;5;28;01mimport[39;00m [38;5;21;01mtda_pipeline[39;00m
[1;32m     14[0m [38;5;28;01mfrom[39;00m [38;5;21;01mtda_pipeline[39;00m [38;5;28;01mimport[39;00m DataSelector, RipsPersistence, LPNorm
[1;32m     15[0m [38;5;28;01mfrom[39;00m [38;5;21;01mgudhi[39;00m[38;5;21;01m.[39;00m[38;5;21;01mrepresentations[39;00m [38;5;28;01mimport[39;00m Landscape
" "[0;31mModuleNotFoundError[0m: No module named 'tda_pipeline'"] :ename "ModuleNotFoundError" :evalue "No module named 'tda_pipeline'" :engine_info (:engine_uuid "09acb503-cf8f-4eef-b1b4-159ead369f19" :engine_id -1 :method "execute") :execution_count 47 :user_expressions nil :payload []) :buffers [] :channel "shell")) #19 nil value ((:colname-names) (:rowname-names) (:result-params "replace") (:result-type . value) (:results . "replace") (:exports . "code") (:kernel . "python3") (:session . "py") (:async . "yes") (:tangle . "no") (:hlines . "no") (:noweb . "no") (:cache . "no")) nil nil nil t nil #<marker at 659 in tda_web_app.org> t #<overlay in no buffer>) cl-struct-jupyter-request-tags #[514 "\301!>\204 \302\303\304D\"\210\305I\210\301!>\204# \302\303\304D\"\210\306\306HC\244I\210\307!\204C \310!\311\230\204C \310!\312\230\203W \301!>\204R \302\303\304D\"\210\313\314I\210\315\316BB!\207" [cl-struct-jupyter-request-tags type-of signal wrong-type-argument jupyter-request 7 8 jupyter-message-status-idle-p jupyter-message-type "kernel_info_reply" "shutdown_reply" 6 t jupyter-content :parent-request] 6 "

(fn REQ MSG)"] jupyter-message-type jupyter-content type-of signal wrong-type-argument jupyter-request 6 "status" unsubscribe jupyter-message-parent-id] 7 "

(fn MSG)"] (subscribers #[257 "\211:\203L \211\242\211\301\267\202G \243\211:\203& \211\242\243\211\204  \300!\207\302\303\"\207\302\303\"\207\243\211:\203B \211\243\211\204= \304\305\306\"\207\302\303\"\207\302\303\"\207\302\303\"\207\302\303\"\207" [#[257 "\301!\205 \302\303\"\304\300#\262\207" [#5 jupyter-message-type plist-get :channel jupyter-handle-message] 6 "

(fn MSG)"] #s(hash-table test eq purecopy t data (content 13 subscribe 43)) error "Unhandled subscriber content: %s" signal jupyter-subscribed-subscriber nil] 8 "

(fn SUB-CONTENT)"]) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"]) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"]) #[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [jupyter-content (subscribers) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"] cl-struct-websocket-frame-tags type-of signal wrong-type-argument websocket-frame 1 (binary text) jupyter-read-plist-from-string 2 jupyter-run-with-state jupyter-publish message error] 11 "

(fn WS FRAME)"] #[257 "\300\242\203	 \301\302!\207\300\303\240\207" [(nil) error "Kernel connection could not be established" t] 3 "

(fn WS)"] websocket-default-error-handler nil nil nil "ws://localhost:8888/api/kernels/6bf9469b-83c6-4b8d-8e54-385f791b796f/channels?session_id=f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" nil nil #<process websocket to ws://localhost:8888/api/kernels/6bf9469b-83c6-4b8d-8e54-385f791b796f/channels?session_id=f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0> nil nil "wlYv8zPJwfSVI4dSA1dXwtQQaB4=" nil)) (nil) #s(jupyter-server-kernel #s(jupyter-kernelspec "python3" (:argv ["python" "-m" "ipykernel_launcher" "-f" "{connection_file}"] :env nil :display_name "Python 3 (ipykernel)" :language "python" :interrupt_mode "signal" :metadata (:debugger t)) nil) #s(jupyter-session nil "6a8d255a-2f17-46fd-8af1-0c55b94d0c7b" nil) #s(jupyter-server "http://localhost:8888" "ws://localhost:8888" t (:default "python3" :kernelspecs (#s(jupyter-kernelspec "python3" (:argv ["python" "-m" "ipykernel_launcher" "-f" "{connection_file}"] :env nil :display_name "Python 3 (ipykernel)" :language "python" :interrupt_mode "signal" :metadata (:debugger t)) nil)))) "6bf9469b-83c6-4b8d-8e54-385f791b796f") #s(hash-table test eq purecopy t data (interrupt 6 shutdown 10 restart 30)) jupyter-interrupt jupyter-shutdown t websocket-openp websocket-close jupyter-restart action] 7 "

(fn ACTION)"] #s(hash-table test eq purecopy t data (content 13 subscribe 43)) error "Unhandled subscriber content: %s" signal jupyter-subscribed-subscriber nil] 8 "

(fn SUB-CONTENT)"]) #<buffer  *jupyter-kernel-client*> nil "null" nil #<buffer *jupyter-repl[python 3.12.3]-py*> nil nil nil) (26440 37564 664251 513000) t (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_525" :msg_type "execute_reply" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:56:44.699974Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_525" :msg_type "execute_reply" :parent_header (:msg_id "7a53c0b4-a4ec-41a5-aef0-b482f478ac66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:56:44.665357Z") :metadata (:started "2024-11-28T15:56:44.670406Z" :dependencies_met t :engine "09acb503-cf8f-4eef-b1b4-159ead369f19" :status "error") :content (:status "error" :traceback ["[0;31m---------------------------------------------------------------------------[0m" "[0;31mImportError[0m                               Traceback (most recent call last)" "Cell [0;32mIn[46], line 12[0m
[1;32m      9[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m
[1;32m     11[0m [38;5;66;03m# Some gudhi imports for TDA[39;00m
[0;32m---> 12[0m [38;5;28;01mfrom[39;00m [38;5;21;01m.[39;00m [38;5;28;01mimport[39;00m tda_pipeline
[1;32m     13[0m [38;5;28;01mfrom[39;00m [38;5;21;01mtda_pipeline[39;00m [38;5;28;01mimport[39;00m DataSelector, RipsPersistence, LPNorm
[1;32m     14[0m [38;5;28;01mfrom[39;00m [38;5;21;01mgudhi[39;00m[38;5;21;01m.[39;00m[38;5;21;01mrepresentations[39;00m [38;5;28;01mimport[39;00m Landscape
" "[0;31mImportError[0m: attempted relative import with no known parent package"] :ename "ImportError" :evalue "attempted relative import with no known parent package" :engine_info (:engine_uuid "09acb503-cf8f-4eef-b1b4-159ead369f19" :engine_id -1 :method "execute") :execution_count 46 :user_expressions nil :payload []) :buffers [] :channel "shell") ((:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_522" :msg_type "status" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:56:44.670080Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_522" :msg_type "status" :parent_header (:msg_id "7a53c0b4-a4ec-41a5-aef0-b482f478ac66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:56:44.665357Z") :metadata nil :content (:execution_state "busy") :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_523" :msg_type "execute_input" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:56:44.670433Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_523" :msg_type "execute_input" :parent_header (:msg_id "7a53c0b4-a4ec-41a5-aef0-b482f478ac66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:56:44.665357Z") :metadata nil :content (:code "# Some basic data science imports
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.pipeline import Pipeline
import datetime

import time
import os

# Some gudhi imports for TDA
from . import tda_pipeline
from tda_pipeline import DataSelector, RipsPersistence, LPNorm
from gudhi.representations import Landscape

# Some graphical imports for the web app
import ipywidgets as widgets
import plotly.graph_objects as go

# Some imports for ipywidgets
from ipywidgets import DatePicker, BoundedIntText, ToggleButton, Text, HBox, VBox
from IPython.display import display

# cf. data_generation.py
df = pd.read_csv('latest.csv', index_col=0)

# min, max and default start values taken from the dataset - Python 3.7+
min_value = datetime.date.fromisoformat(df.index[0])
max_value = datetime.date.fromisoformat(df.index[-1])

last_year = max_value - datetime.timedelta(days=250)

# Widgets
start = DatePicker(description='start', value = last_year)
end   = DatePicker(description='end', value = max_value)
window = BoundedIntText(value=50, min=10, max=100, step=1, description='Windows size')

button = ToggleButton(description='Compute', icon='cogs')

def nearest_str_date(items, pivot):
    return min(items, key=lambda str_date: abs(datetime.date.fromisoformat(str_date) - pivot))

def compute_Lp_norms():
    w=int(window.value)
    start_idx = df.index.get_loc(str(nearest_str_date(df.index, start.value - datetime.timedelta(days=w))))
    end_idx = df.index.get_loc(str(nearest_str_date(df.index, end.value)))
    # Some error management
    if start_idx == end_idx:
        raise IndexError('Start date must be different from end date.')
    if end_idx < w:
        end_idx = w
    if end_idx < start_idx:
        start_idx, end_idx = end_idx, start_idx

    pipe = Pipeline(
        [
            (\"data_sel\", DataSelector(start=start_idx, end=end_idx, w=w)),
            (\"rips_pers\", RipsPersistence(max_rips_dimension=2, max_persistence_dimension=2, only_this_dim=1, n_jobs=-1)),
            (\"landscape\", Landscape(resolution=1000)),
            (\"lpnorm\", LPNorm(n_jobs=-1)),
            (\"mms\", MinMaxScaler()),
        ]
    )

    start_chrono = float(time.time())
    #os.write(1, bytes(str(start_chrono),'UTF-8') + b'\\r\\n')
    L1L2mms = pipe.fit_transform(df)
    stop_chrono = float(time.time())
    #os.write(1, bytes(str(stop_chrono),'UTF-8') + b'\\r\\n')
    os.write(1, bytes(str(stop_chrono - start_chrono),'UTF-8') + b' sec. \\r\\n')
    
    l1l2df = pd.DataFrame({'date': df[start_idx+w:end_idx].index, 'L1': L1L2mms.transpose()[0], 'L2': L1L2mms.transpose()[1]})
    # Calculate the variance for the L norms
    j = 0

    for i in l1l2df.index:
        if j < w:
            k = 0
        else:
            k = j - w
        l1l2df.loc[i, 'L1_variance'] = np.var(l1l2df.iloc[k:j].L1)
        l1l2df.loc[i, 'L2_variance'] = np.var(l1l2df.iloc[k:j].L2)
        j += 1
        
    return l1l2df

def compute(args):
    l1l2df = compute_Lp_norms()
    fig.data[0]['x'] = l1l2df['date']
    fig.data[0]['y'] = l1l2df['L1']
    fig.data[1]['x'] = l1l2df['date']
    fig.data[1]['y'] = l1l2df['L2']
    fig.data[2]['x'] = l1l2df['date']
    fig.data[2]['y'] = l1l2df['L1_variance']
    fig.data[3]['x'] = l1l2df['date']
    fig.data[3]['y'] = l1l2df['L2_variance']
    
button.observe(compute, 'value')

# Layout
left_box = HBox([start, end, window, button])

fig = go.FigureWidget()

l1l2df = compute_Lp_norms()
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1'], mode='lines', name='L1')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2'], mode='lines', name='L2')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1_variance'], mode='lines', name='L1_variance')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2_variance'], mode='lines', name='L2_variance')
fig.update_xaxes(dtick=\"M1\", tickformat=\"%b\\n%Y\")
fig.layout.title.text = 'Lp norms'

display(left_box)
fig" :execution_count 46) :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_524" :msg_type "error" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:56:44.699018Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_524" :msg_type "error" :parent_header (:msg_id "7a53c0b4-a4ec-41a5-aef0-b482f478ac66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:56:44.665357Z") :metadata nil :content (:traceback ["[0;31m---------------------------------------------------------------------------[0m" "[0;31mImportError[0m                               Traceback (most recent call last)" "Cell [0;32mIn[46], line 12[0m
[1;32m      9[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m
[1;32m     11[0m [38;5;66;03m# Some gudhi imports for TDA[39;00m
[0;32m---> 12[0m [38;5;28;01mfrom[39;00m [38;5;21;01m.[39;00m [38;5;28;01mimport[39;00m tda_pipeline
[1;32m     13[0m [38;5;28;01mfrom[39;00m [38;5;21;01mtda_pipeline[39;00m [38;5;28;01mimport[39;00m DataSelector, RipsPersistence, LPNorm
[1;32m     14[0m [38;5;28;01mfrom[39;00m [38;5;21;01mgudhi[39;00m[38;5;21;01m.[39;00m[38;5;21;01mrepresentations[39;00m [38;5;28;01mimport[39;00m Landscape
" "[0;31mImportError[0m: attempted relative import with no known parent package"] :ename "ImportError" :evalue "attempted relative import with no known parent package") :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_526" :msg_type "status" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:56:44.700270Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_526" :msg_type "status" :parent_header (:msg_id "7a53c0b4-a4ec-41a5-aef0-b482f478ac66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:56:44.665357Z") :metadata nil :content (:execution_state "idle") :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_525" :msg_type "execute_reply" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:56:44.699974Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_525" :msg_type "execute_reply" :parent_header (:msg_id "7a53c0b4-a4ec-41a5-aef0-b482f478ac66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:56:44.665357Z") :metadata (:started "2024-11-28T15:56:44.670406Z" :dependencies_met t :engine "09acb503-cf8f-4eef-b1b4-159ead369f19" :status "error") :content (:status "error" :traceback ["[0;31m---------------------------------------------------------------------------[0m" "[0;31mImportError[0m                               Traceback (most recent call last)" "Cell [0;32mIn[46], line 12[0m
[1;32m      9[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m
[1;32m     11[0m [38;5;66;03m# Some gudhi imports for TDA[39;00m
[0;32m---> 12[0m [38;5;28;01mfrom[39;00m [38;5;21;01m.[39;00m [38;5;28;01mimport[39;00m tda_pipeline
[1;32m     13[0m [38;5;28;01mfrom[39;00m [38;5;21;01mtda_pipeline[39;00m [38;5;28;01mimport[39;00m DataSelector, RipsPersistence, LPNorm
[1;32m     14[0m [38;5;28;01mfrom[39;00m [38;5;21;01mgudhi[39;00m[38;5;21;01m.[39;00m[38;5;21;01mrepresentations[39;00m [38;5;28;01mimport[39;00m Landscape
" "[0;31mImportError[0m: attempted relative import with no known parent package"] :ename "ImportError" :evalue "attempted relative import with no known parent package" :engine_info (:engine_uuid "09acb503-cf8f-4eef-b1b4-159ead369f19" :engine_id -1 :method "execute") :execution_count 46 :user_expressions nil :payload []) :buffers [] :channel "shell")) #[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [#[257 "\303\304!\211\204 \305!\207\306\301!
>\204 \307\310\311\301D\"\210\301\312H\2037 \211\313\230\203* \314C\207\300\315!\230\205C \301\"\207\300\315!\230\205C \301\"\207" ["7a53c0b4-a4ec-41a5-aef0-b482f478ac66" #4 cl-struct-jupyter-request-tags #[514 "\301!>\204 \302\303\304D\"\210\305I\210\301!>\204# \302\303\304D\"\210\306\306HC\244I\210\307!\204C \310!\311\230\204C \310!\312\230\203W \301!>\204R \302\303\304D\"\210\313\314I\210\315\316BB!\207" [cl-struct-jupyter-request-tags type-of signal wrong-type-argument jupyter-request 7 8 jupyter-message-status-idle-p jupyter-message-type "kernel_info_reply" "shutdown_reply" 6 t jupyter-content :parent-request] 6 "

(fn REQ MSG)"] jupyter-message-type jupyter-content type-of signal wrong-type-argument jupyter-request 6 "status" unsubscribe jupyter-message-parent-id] 7 "

(fn MSG)"] (subscribers #[257 "\211:\203L \211\242\211\301\267\202G \243\211:\203& \211\242\243\211\204  \300!\207\302\303\"\207\302\303\"\207\243\211:\203B \211\243\211\204= \304\305\306\"\207\302\303\"\207\302\303\"\207\302\303\"\207\302\303\"\207" [#[257 "\301!\205 \302\303\"\304\300#\262\207" [#s(jupyter-org-client jupyter--clients (#<finalizer>) "idle" 48 (:status "ok" :protocol_version "5.3" :implementation "ipython" :implementation_version "8.29.0" :language_info (:name python :version "3.12.3" :mimetype "text/x-python" :codemirror_mode (:name "ipython" :version 3) :pygments_lexer "ipython3" :nbconvert_exporter "python" :file_extension ".py") :banner "Python 3.12.3 (main, Nov  6 2024, 18:32:19) [GCC 13.2.0]
Type 'copyright', 'credits' or 'license' for more information
IPython 8.29.0 -- An enhanced Interactive Python. Type '?' for help.
" :help_links [(:text "Python Reference" :url "https://docs.python.org/3.12") (:text "IPython Reference" :url "https://ipython.org/documentation.html") (:text "NumPy Reference" :url "https://docs.scipy.org/doc/numpy/reference/") (:text "SciPy Reference" :url "https://docs.scipy.org/doc/scipy/reference/") (:text "Matplotlib Reference" :url "https://matplotlib.org/contents.html") (:text "SymPy Reference" :url "http://docs.sympy.org/latest/index.html") (:text "pandas Reference" :url "https://pandas.pydata.org/pandas-docs/stable/")]) #s(hash-table test equal) (#[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [#[257 "\211:\203y \211\242\211\303\267\210\202w \243\304!\207\243\211:\205v \211\242\243\211:\205t \211\242\243\211:\205r \211\242\243\211:\205p \211\242\243\211?\205n \302\242\203H \305\306!\210\307\3101Z \211\300
	%0\207\210\300\301\242 \240\210\211\300
	%\262\266\202\266\202\266\202\266\202\207\311\207\211\312\267\202\233 \302\242\203\210 \305\313!\210\314\300\242!?\205\234 \300\301\242 \240\207\315\300\242!\207\311\207" [(#s(websocket open (:id "6bf9469b-83c6-4b8d-8e54-385f791b796f" :session #s(jupyter-session nil "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" nil)) #[257 "\300\301\240\207" [(nil) nil] 3 "

(fn WS)"] #[514 "\303!
>\204 \304\305\306D\"\210\211\307H\211\310>\2036 \311\303!
>\204( \304\305\306D\"\210\312H!\313\300\242\314\315B!\"\207\313\301\314\316\303!
>\204K \304\305\306D\"\210\307HD!\"\207" [(#14) #[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [jupyter-content (subscribers) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"] cl-struct-websocket-frame-tags type-of signal wrong-type-argument websocket-frame 1 (binary text) jupyter-read-plist-from-string 2 jupyter-run-with-state jupyter-publish message error] 11 "

(fn WS FRAME)"] #[257 "\300\242\203	 \301\302!\207\300\303\240\207" [(nil) error "Kernel connection could not be established" t] 3 "

(fn WS)"] websocket-default-error-handler nil nil nil "ws://localhost:8888/api/kernels/6bf9469b-83c6-4b8d-8e54-385f791b796f/channels?session_id=f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" nil nil #<process websocket to ws://localhost:8888/api/kernels/6bf9469b-83c6-4b8d-8e54-385f791b796f/channels?session_id=f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0> nil nil "wlYv8zPJwfSVI4dSA1dXwtQQaB4=" nil)) (#[0 "\305\304\303\306\307\304!\310\311\312\300\"\313\311\314\300\"\315\311\316\301\302#&
\207" [(nil) (#14) #[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [jupyter-content (subscribers) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"] "6bf9469b-83c6-4b8d-8e54-385f791b796f" #s(jupyter-server "http://localhost:8888" "ws://localhost:8888" t (:default "python3" :kernelspecs (#s(jupyter-kernelspec "python3" (:argv ["python" "-m" "ipykernel_launcher" "-f" "{connection_file}"] :env nil :display_name "Python 3 (ipykernel)" :language "python" :interrupt_mode "signal" :metadata (:debugger t)) nil)))) jupyter-api-kernel-websocket :custom-header-alist jupyter-api-auth-headers :on-open make-closure #[257 "\300\301\240\207" [V0 nil] 3 "

(fn WS)"] :on-close #[257 "\300\242\203	 \301\302!\207\300\303\240\207" [V0 error "Kernel connection could not be established" t] 3 "

(fn WS)"] :on-message #[514 "\303!
>\204 \304\305\306D\"\210\211\307H\211\310>\2036 \311\303!
>\204( \304\305\306D\"\210\312H!\313\300\242\314\315B!\"\207\313\301\314\316\303!
>\204K \304\305\306D\"\210\307HD!\"\207" [V0 V1 cl-struct-websocket-frame-tags type-of signal wrong-type-argument websocket-frame 1 (binary text) jupyter-read-plist-from-string 2 jupyter-run-with-state jupyter-publish message error] 11 "

(fn WS FRAME)"]] 14]) (nil) #s(hash-table test eq purecopy t data (message 14 send 20)) jupyter-content error "Attempting to send message to shutdown kernel" #[1285 "\301\242\242\302!>\204 \303\304\305D\"\210\211\306H\262\307\310\"\311\312\313
\314&\266\202\"\207" [cl-struct-websocket-tags websocket-send-text type-of signal wrong-type-argument websocket 2 plist-get :session jupyter-encode-raw-message :channel :msg-id :content] 18 "

(fn WS CHANNEL MSG-TYPE CONTENT MSG-ID)"] (websocket-closed) nil #s(hash-table test eq purecopy t data (start 127 stop 150)) "Can't start I/O connection to shutdown kernel" websocket-openp websocket-close] 18 "

(fn EVENT)"] (subscribers #[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [#[257 "\303\304!\211\204 \305!\207\306\301!
>\204 \307\310\311\301D\"\210\301\312H\2037 \211\313\230\203* \314C\207\300\315!\230\205C \301\"\207\300\315!\230\205C \301\"\207" ["4b09f712-ee03-45d1-be9a-996919662b66" #s(jupyter-org-request "4b09f712-ee03-45d1-be9a-996919662b66" "execute_request" (:code "# Some basic data science imports
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.pipeline import Pipeline
import datetime

import time
import os

# Some gudhi imports for TDA

import tda_pipeline
from tda_pipeline import DataSelector, RipsPersistence, LPNorm
from gudhi.representations import Landscape

# Some graphical imports for the web app
import ipywidgets as widgets
import plotly.graph_objects as go

# Some imports for ipywidgets
from ipywidgets import DatePicker, BoundedIntText, ToggleButton, Text, HBox, VBox
from IPython.display import display

# cf. data_generation.py
df = pd.read_csv('latest.csv', index_col=0)

# min, max and default start values taken from the dataset - Python 3.7+
min_value = datetime.date.fromisoformat(df.index[0])
max_value = datetime.date.fromisoformat(df.index[-1])

last_year = max_value - datetime.timedelta(days=250)

# Widgets
start = DatePicker(description='start', value = last_year)
end   = DatePicker(description='end', value = max_value)
window = BoundedIntText(value=50, min=10, max=100, step=1, description='Windows size')

button = ToggleButton(description='Compute', icon='cogs')

def nearest_str_date(items, pivot):
    return min(items, key=lambda str_date: abs(datetime.date.fromisoformat(str_date) - pivot))

def compute_Lp_norms():
    w=int(window.value)
    start_idx = df.index.get_loc(str(nearest_str_date(df.index, start.value - datetime.timedelta(days=w))))
    end_idx = df.index.get_loc(str(nearest_str_date(df.index, end.value)))
    # Some error management
    if start_idx == end_idx:
        raise IndexError('Start date must be different from end date.')
    if end_idx < w:
        end_idx = w
    if end_idx < start_idx:
        start_idx, end_idx = end_idx, start_idx

    pipe = Pipeline(
        [
            (\"data_sel\", DataSelector(start=start_idx, end=end_idx, w=w)),
            (\"rips_pers\", RipsPersistence(max_rips_dimension=2, max_persistence_dimension=2, only_this_dim=1, n_jobs=-1)),
            (\"landscape\", Landscape(resolution=1000)),
            (\"lpnorm\", LPNorm(n_jobs=-1)),
            (\"mms\", MinMaxScaler()),
        ]
    )

    start_chrono = float(time.time())
    #os.write(1, bytes(str(start_chrono),'UTF-8') + b'\\r\\n')
    L1L2mms = pipe.fit_transform(df)
    stop_chrono = float(time.time())
    #os.write(1, bytes(str(stop_chrono),'UTF-8') + b'\\r\\n')
    os.write(1, bytes(str(stop_chrono - start_chrono),'UTF-8') + b' sec. \\r\\n')
    
    l1l2df = pd.DataFrame({'date': df[start_idx+w:end_idx].index, 'L1': L1L2mms.transpose()[0], 'L2': L1L2mms.transpose()[1]})
    # Calculate the variance for the L norms
    j = 0

    for i in l1l2df.index:
        if j < w:
            k = 0
        else:
            k = j - w
        l1l2df.loc[i, 'L1_variance'] = np.var(l1l2df.iloc[k:j].L1)
        l1l2df.loc[i, 'L2_variance'] = np.var(l1l2df.iloc[k:j].L2)
        j += 1
        
    return l1l2df

def compute(args):
    l1l2df = compute_Lp_norms()
    fig.data[0]['x'] = l1l2df['date']
    fig.data[0]['y'] = l1l2df['L1']
    fig.data[1]['x'] = l1l2df['date']
    fig.data[1]['y'] = l1l2df['L2']
    fig.data[2]['x'] = l1l2df['date']
    fig.data[2]['y'] = l1l2df['L1_variance']
    fig.data[3]['x'] = l1l2df['date']
    fig.data[3]['y'] = l1l2df['L2_variance']
    
button.observe(compute, 'value')

# Layout
left_box = HBox([start, end, window, button])

fig = go.FigureWidget()

l1l2df = compute_Lp_norms()
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1'], mode='lines', name='L1')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2'], mode='lines', name='L2')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1_variance'], mode='lines', name='L1_variance')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2_variance'], mode='lines', name='L2_variance')
fig.update_xaxes(dtick=\"M1\", tickformat=\"%b\\n%Y\")
fig.layout.title.text = 'Lp norms'

display(left_box)
fig" :silent :json-false :store_history t :user_expressions #s(hash-table) :allow_stdin t :stop_on_error :json-false) #12 (26440 37591 495486 292000) t (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_530" :msg_type "execute_reply" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.530238Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_530" :msg_type "execute_reply" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata (:started "2024-11-28T15:57:11.501467Z" :dependencies_met t :engine "09acb503-cf8f-4eef-b1b4-159ead369f19" :status "error") :content (:status "error" :traceback ["[0;31m---------------------------------------------------------------------------[0m" "[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)" "Cell [0;32mIn[47], line 13[0m
[1;32m      9[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m
[1;32m     11[0m [38;5;66;03m# Some gudhi imports for TDA[39;00m
[0;32m---> 13[0m [38;5;28;01mimport[39;00m [38;5;21;01mtda_pipeline[39;00m
[1;32m     14[0m [38;5;28;01mfrom[39;00m [38;5;21;01mtda_pipeline[39;00m [38;5;28;01mimport[39;00m DataSelector, RipsPersistence, LPNorm
[1;32m     15[0m [38;5;28;01mfrom[39;00m [38;5;21;01mgudhi[39;00m[38;5;21;01m.[39;00m[38;5;21;01mrepresentations[39;00m [38;5;28;01mimport[39;00m Landscape
" "[0;31mModuleNotFoundError[0m: No module named 'tda_pipeline'"] :ename "ModuleNotFoundError" :evalue "No module named 'tda_pipeline'" :engine_info (:engine_uuid "09acb503-cf8f-4eef-b1b4-159ead369f19" :engine_id -1 :method "execute") :execution_count 47 :user_expressions nil :payload []) :buffers [] :channel "shell") ((:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_527" :msg_type "status" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.501001Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_527" :msg_type "status" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata nil :content (:execution_state "busy") :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_528" :msg_type "execute_input" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.501494Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_528" :msg_type "execute_input" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata nil :content (:code "# Some basic data science imports
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.pipeline import Pipeline
import datetime

import time
import os

# Some gudhi imports for TDA

import tda_pipeline
from tda_pipeline import DataSelector, RipsPersistence, LPNorm
from gudhi.representations import Landscape

# Some graphical imports for the web app
import ipywidgets as widgets
import plotly.graph_objects as go

# Some imports for ipywidgets
from ipywidgets import DatePicker, BoundedIntText, ToggleButton, Text, HBox, VBox
from IPython.display import display

# cf. data_generation.py
df = pd.read_csv('latest.csv', index_col=0)

# min, max and default start values taken from the dataset - Python 3.7+
min_value = datetime.date.fromisoformat(df.index[0])
max_value = datetime.date.fromisoformat(df.index[-1])

last_year = max_value - datetime.timedelta(days=250)

# Widgets
start = DatePicker(description='start', value = last_year)
end   = DatePicker(description='end', value = max_value)
window = BoundedIntText(value=50, min=10, max=100, step=1, description='Windows size')

button = ToggleButton(description='Compute', icon='cogs')

def nearest_str_date(items, pivot):
    return min(items, key=lambda str_date: abs(datetime.date.fromisoformat(str_date) - pivot))

def compute_Lp_norms():
    w=int(window.value)
    start_idx = df.index.get_loc(str(nearest_str_date(df.index, start.value - datetime.timedelta(days=w))))
    end_idx = df.index.get_loc(str(nearest_str_date(df.index, end.value)))
    # Some error management
    if start_idx == end_idx:
        raise IndexError('Start date must be different from end date.')
    if end_idx < w:
        end_idx = w
    if end_idx < start_idx:
        start_idx, end_idx = end_idx, start_idx

    pipe = Pipeline(
        [
            (\"data_sel\", DataSelector(start=start_idx, end=end_idx, w=w)),
            (\"rips_pers\", RipsPersistence(max_rips_dimension=2, max_persistence_dimension=2, only_this_dim=1, n_jobs=-1)),
            (\"landscape\", Landscape(resolution=1000)),
            (\"lpnorm\", LPNorm(n_jobs=-1)),
            (\"mms\", MinMaxScaler()),
        ]
    )

    start_chrono = float(time.time())
    #os.write(1, bytes(str(start_chrono),'UTF-8') + b'\\r\\n')
    L1L2mms = pipe.fit_transform(df)
    stop_chrono = float(time.time())
    #os.write(1, bytes(str(stop_chrono),'UTF-8') + b'\\r\\n')
    os.write(1, bytes(str(stop_chrono - start_chrono),'UTF-8') + b' sec. \\r\\n')
    
    l1l2df = pd.DataFrame({'date': df[start_idx+w:end_idx].index, 'L1': L1L2mms.transpose()[0], 'L2': L1L2mms.transpose()[1]})
    # Calculate the variance for the L norms
    j = 0

    for i in l1l2df.index:
        if j < w:
            k = 0
        else:
            k = j - w
        l1l2df.loc[i, 'L1_variance'] = np.var(l1l2df.iloc[k:j].L1)
        l1l2df.loc[i, 'L2_variance'] = np.var(l1l2df.iloc[k:j].L2)
        j += 1
        
    return l1l2df

def compute(args):
    l1l2df = compute_Lp_norms()
    fig.data[0]['x'] = l1l2df['date']
    fig.data[0]['y'] = l1l2df['L1']
    fig.data[1]['x'] = l1l2df['date']
    fig.data[1]['y'] = l1l2df['L2']
    fig.data[2]['x'] = l1l2df['date']
    fig.data[2]['y'] = l1l2df['L1_variance']
    fig.data[3]['x'] = l1l2df['date']
    fig.data[3]['y'] = l1l2df['L2_variance']
    
button.observe(compute, 'value')

# Layout
left_box = HBox([start, end, window, button])

fig = go.FigureWidget()

l1l2df = compute_Lp_norms()
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1'], mode='lines', name='L1')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2'], mode='lines', name='L2')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1_variance'], mode='lines', name='L1_variance')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2_variance'], mode='lines', name='L2_variance')
fig.update_xaxes(dtick=\"M1\", tickformat=\"%b\\n%Y\")
fig.layout.title.text = 'Lp norms'

display(left_box)
fig" :execution_count 47) :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_529" :msg_type "error" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.529306Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_529" :msg_type "error" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata nil :content (:traceback ["[0;31m---------------------------------------------------------------------------[0m" "[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)" "Cell [0;32mIn[47], line 13[0m
[1;32m      9[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m
[1;32m     11[0m [38;5;66;03m# Some gudhi imports for TDA[39;00m
[0;32m---> 13[0m [38;5;28;01mimport[39;00m [38;5;21;01mtda_pipeline[39;00m
[1;32m     14[0m [38;5;28;01mfrom[39;00m [38;5;21;01mtda_pipeline[39;00m [38;5;28;01mimport[39;00m DataSelector, RipsPersistence, LPNorm
[1;32m     15[0m [38;5;28;01mfrom[39;00m [38;5;21;01mgudhi[39;00m[38;5;21;01m.[39;00m[38;5;21;01mrepresentations[39;00m [38;5;28;01mimport[39;00m Landscape
" "[0;31mModuleNotFoundError[0m: No module named 'tda_pipeline'"] :ename "ModuleNotFoundError" :evalue "No module named 'tda_pipeline'") :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_531" :msg_type "status" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.530475Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_531" :msg_type "status" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata nil :content (:execution_state "idle") :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_530" :msg_type "execute_reply" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.530238Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_530" :msg_type "execute_reply" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata (:started "2024-11-28T15:57:11.501467Z" :dependencies_met t :engine "09acb503-cf8f-4eef-b1b4-159ead369f19" :status "error") :content (:status "error" :traceback ["[0;31m---------------------------------------------------------------------------[0m" "[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)" "Cell [0;32mIn[47], line 13[0m
[1;32m      9[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m
[1;32m     11[0m [38;5;66;03m# Some gudhi imports for TDA[39;00m
[0;32m---> 13[0m [38;5;28;01mimport[39;00m [38;5;21;01mtda_pipeline[39;00m
[1;32m     14[0m [38;5;28;01mfrom[39;00m [38;5;21;01mtda_pipeline[39;00m [38;5;28;01mimport[39;00m DataSelector, RipsPersistence, LPNorm
[1;32m     15[0m [38;5;28;01mfrom[39;00m [38;5;21;01mgudhi[39;00m[38;5;21;01m.[39;00m[38;5;21;01mrepresentations[39;00m [38;5;28;01mimport[39;00m Landscape
" "[0;31mModuleNotFoundError[0m: No module named 'tda_pipeline'"] :ename "ModuleNotFoundError" :evalue "No module named 'tda_pipeline'" :engine_info (:engine_uuid "09acb503-cf8f-4eef-b1b4-159ead369f19" :engine_id -1 :method "execute") :execution_count 47 :user_expressions nil :payload []) :buffers [] :channel "shell")) #17 nil value ((:colname-names) (:rowname-names) (:result-params "replace") (:result-type . value) (:results . "replace") (:exports . "code") (:kernel . "python3") (:session . "py") (:async . "yes") (:tangle . "no") (:hlines . "no") (:noweb . "no") (:cache . "no")) nil nil nil t nil #<marker at 659 in tda_web_app.org> t #<overlay in no buffer>) cl-struct-jupyter-request-tags #[514 "\301!>\204 \302\303\304D\"\210\305I\210\301!>\204# \302\303\304D\"\210\306\306HC\244I\210\307!\204C \310!\311\230\204C \310!\312\230\203W \301!>\204R \302\303\304D\"\210\313\314I\210\315\316BB!\207" [cl-struct-jupyter-request-tags type-of signal wrong-type-argument jupyter-request 7 8 jupyter-message-status-idle-p jupyter-message-type "kernel_info_reply" "shutdown_reply" 6 t jupyter-content :parent-request] 6 "

(fn REQ MSG)"] jupyter-message-type jupyter-content type-of signal wrong-type-argument jupyter-request 6 "status" unsubscribe jupyter-message-parent-id] 7 "

(fn MSG)"] (subscribers #[257 "\211:\203L \211\242\211\301\267\202G \243\211:\203& \211\242\243\211\204  \300!\207\302\303\"\207\302\303\"\207\243\211:\203B \211\243\211\204= \304\305\306\"\207\302\303\"\207\302\303\"\207\302\303\"\207\302\303\"\207" [#[257 "\301!\205 \302\303\"\304\300#\262\207" [#12 jupyter-message-type plist-get :channel jupyter-handle-message] 6 "

(fn MSG)"] #s(hash-table test eq purecopy t data (content 13 subscribe 43)) error "Unhandled subscriber content: %s" signal jupyter-subscribed-subscriber nil] 8 "

(fn SUB-CONTENT)"]) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"]) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"] #[257 "\211:\203L \211\242\211\301\267\202G \243\211:\203& \211\242\243\211\204  \300!\207\302\303\"\207\302\303\"\207\243\211:\203B \211\243\211\204= \304\305\306\"\207\302\303\"\207\302\303\"\207\302\303\"\207\302\303\"\207" [#[257 "\211\303\267\202\" \304\302!\207\305\302!\210\301\306\240\210\307\300\242!\205H \310\300\242!\207\311\302!\207\211:\205H \211\242\211\312=\205F \243\211:\205D \211\242\243\211?\205B \302!\266\202\262\262\207" [(#s(websocket open (:id "6bf9469b-83c6-4b8d-8e54-385f791b796f" :session #s(jupyter-session nil "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" nil)) #[257 "\300\301\240\207" [(nil) nil] 3 "

(fn WS)"] #[514 "\303!
>\204 \304\305\306D\"\210\211\307H\211\310>\2036 \311\303!
>\204( \304\305\306D\"\210\312H!\313\300\242\314\315B!\"\207\313\301\314\316\303!
>\204K \304\305\306D\"\210\307HD!\"\207" [(#[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [#[257 "\211:\203y \211\242\211\303\267\210\202w \243\304!\207\243\211:\205v \211\242\243\211:\205t \211\242\243\211:\205r \211\242\243\211:\205p \211\242\243\211?\205n \302\242\203H \305\306!\210\307\3101Z \211\300
	%0\207\210\300\301\242 \240\210\211\300
	%\262\266\202\266\202\266\202\266\202\207\311\207\211\312\267\202\233 \302\242\203\210 \305\313!\210\314\300\242!?\205\234 \300\301\242 \240\207\315\300\242!\207\311\207" [#18 (#[0 "\305\304\303\306\307\304!\310\311\312\300\"\313\311\314\300\"\315\311\316\301\302#&
\207" [(nil) #22 #[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [jupyter-content (subscribers) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"] "6bf9469b-83c6-4b8d-8e54-385f791b796f" #s(jupyter-server "http://localhost:8888" "ws://localhost:8888" t (:default "python3" :kernelspecs (#s(jupyter-kernelspec "python3" (:argv ["python" "-m" "ipykernel_launcher" "-f" "{connection_file}"] :env nil :display_name "Python 3 (ipykernel)" :language "python" :interrupt_mode "signal" :metadata (:debugger t)) nil)))) jupyter-api-kernel-websocket :custom-header-alist jupyter-api-auth-headers :on-open make-closure #[257 "\300\301\240\207" [V0 nil] 3 "

(fn WS)"] :on-close #[257 "\300\242\203	 \301\302!\207\300\303\240\207" [V0 error "Kernel connection could not be established" t] 3 "

(fn WS)"] :on-message #[514 "\303!
>\204 \304\305\306D\"\210\211\307H\211\310>\2036 \311\303!
>\204( \304\305\306D\"\210\312H!\313\300\242\314\315B!\"\207\313\301\314\316\303!
>\204K \304\305\306D\"\210\307HD!\"\207" [V0 V1 cl-struct-websocket-frame-tags type-of signal wrong-type-argument websocket-frame 1 (binary text) jupyter-read-plist-from-string 2 jupyter-run-with-state jupyter-publish message error] 11 "

(fn WS FRAME)"]] 14]) (nil) #s(hash-table test eq purecopy t data (message 14 send 20)) jupyter-content error "Attempting to send message to shutdown kernel" #[1285 "\301\242\242\302!>\204 \303\304\305D\"\210\211\306H\262\307\310\"\311\312\313
\314&\266\202\"\207" [cl-struct-websocket-tags websocket-send-text type-of signal wrong-type-argument websocket 2 plist-get :session jupyter-encode-raw-message :channel :msg-id :content] 18 "

(fn WS CHANNEL MSG-TYPE CONTENT MSG-ID)"] (websocket-closed) nil #s(hash-table test eq purecopy t data (start 127 stop 150)) "Can't start I/O connection to shutdown kernel" websocket-openp websocket-close] 18 "

(fn EVENT)"] (subscribers #[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [#[257 "\303\304!\211\204 \305!\207\306\301!
>\204 \307\310\311\301D\"\210\301\312H\2037 \211\313\230\203* \314C\207\300\315!\230\205C \301\"\207\300\315!\230\205C \301\"\207" ["4b09f712-ee03-45d1-be9a-996919662b66" #s(jupyter-org-request "4b09f712-ee03-45d1-be9a-996919662b66" "execute_request" (:code "# Some basic data science imports
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.pipeline import Pipeline
import datetime

import time
import os

# Some gudhi imports for TDA

import tda_pipeline
from tda_pipeline import DataSelector, RipsPersistence, LPNorm
from gudhi.representations import Landscape

# Some graphical imports for the web app
import ipywidgets as widgets
import plotly.graph_objects as go

# Some imports for ipywidgets
from ipywidgets import DatePicker, BoundedIntText, ToggleButton, Text, HBox, VBox
from IPython.display import display

# cf. data_generation.py
df = pd.read_csv('latest.csv', index_col=0)

# min, max and default start values taken from the dataset - Python 3.7+
min_value = datetime.date.fromisoformat(df.index[0])
max_value = datetime.date.fromisoformat(df.index[-1])

last_year = max_value - datetime.timedelta(days=250)

# Widgets
start = DatePicker(description='start', value = last_year)
end   = DatePicker(description='end', value = max_value)
window = BoundedIntText(value=50, min=10, max=100, step=1, description='Windows size')

button = ToggleButton(description='Compute', icon='cogs')

def nearest_str_date(items, pivot):
    return min(items, key=lambda str_date: abs(datetime.date.fromisoformat(str_date) - pivot))

def compute_Lp_norms():
    w=int(window.value)
    start_idx = df.index.get_loc(str(nearest_str_date(df.index, start.value - datetime.timedelta(days=w))))
    end_idx = df.index.get_loc(str(nearest_str_date(df.index, end.value)))
    # Some error management
    if start_idx == end_idx:
        raise IndexError('Start date must be different from end date.')
    if end_idx < w:
        end_idx = w
    if end_idx < start_idx:
        start_idx, end_idx = end_idx, start_idx

    pipe = Pipeline(
        [
            (\"data_sel\", DataSelector(start=start_idx, end=end_idx, w=w)),
            (\"rips_pers\", RipsPersistence(max_rips_dimension=2, max_persistence_dimension=2, only_this_dim=1, n_jobs=-1)),
            (\"landscape\", Landscape(resolution=1000)),
            (\"lpnorm\", LPNorm(n_jobs=-1)),
            (\"mms\", MinMaxScaler()),
        ]
    )

    start_chrono = float(time.time())
    #os.write(1, bytes(str(start_chrono),'UTF-8') + b'\\r\\n')
    L1L2mms = pipe.fit_transform(df)
    stop_chrono = float(time.time())
    #os.write(1, bytes(str(stop_chrono),'UTF-8') + b'\\r\\n')
    os.write(1, bytes(str(stop_chrono - start_chrono),'UTF-8') + b' sec. \\r\\n')
    
    l1l2df = pd.DataFrame({'date': df[start_idx+w:end_idx].index, 'L1': L1L2mms.transpose()[0], 'L2': L1L2mms.transpose()[1]})
    # Calculate the variance for the L norms
    j = 0

    for i in l1l2df.index:
        if j < w:
            k = 0
        else:
            k = j - w
        l1l2df.loc[i, 'L1_variance'] = np.var(l1l2df.iloc[k:j].L1)
        l1l2df.loc[i, 'L2_variance'] = np.var(l1l2df.iloc[k:j].L2)
        j += 1
        
    return l1l2df

def compute(args):
    l1l2df = compute_Lp_norms()
    fig.data[0]['x'] = l1l2df['date']
    fig.data[0]['y'] = l1l2df['L1']
    fig.data[1]['x'] = l1l2df['date']
    fig.data[1]['y'] = l1l2df['L2']
    fig.data[2]['x'] = l1l2df['date']
    fig.data[2]['y'] = l1l2df['L1_variance']
    fig.data[3]['x'] = l1l2df['date']
    fig.data[3]['y'] = l1l2df['L2_variance']
    
button.observe(compute, 'value')

# Layout
left_box = HBox([start, end, window, button])

fig = go.FigureWidget()

l1l2df = compute_Lp_norms()
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1'], mode='lines', name='L1')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2'], mode='lines', name='L2')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1_variance'], mode='lines', name='L1_variance')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2_variance'], mode='lines', name='L2_variance')
fig.update_xaxes(dtick=\"M1\", tickformat=\"%b\\n%Y\")
fig.layout.title.text = 'Lp norms'

display(left_box)
fig" :silent :json-false :store_history t :user_expressions #s(hash-table) :allow_stdin t :stop_on_error :json-false) #12 (26440 37591 495486 292000) t (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_530" :msg_type "execute_reply" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.530238Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_530" :msg_type "execute_reply" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata (:started "2024-11-28T15:57:11.501467Z" :dependencies_met t :engine "09acb503-cf8f-4eef-b1b4-159ead369f19" :status "error") :content (:status "error" :traceback ["[0;31m---------------------------------------------------------------------------[0m" "[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)" "Cell [0;32mIn[47], line 13[0m
[1;32m      9[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m
[1;32m     11[0m [38;5;66;03m# Some gudhi imports for TDA[39;00m
[0;32m---> 13[0m [38;5;28;01mimport[39;00m [38;5;21;01mtda_pipeline[39;00m
[1;32m     14[0m [38;5;28;01mfrom[39;00m [38;5;21;01mtda_pipeline[39;00m [38;5;28;01mimport[39;00m DataSelector, RipsPersistence, LPNorm
[1;32m     15[0m [38;5;28;01mfrom[39;00m [38;5;21;01mgudhi[39;00m[38;5;21;01m.[39;00m[38;5;21;01mrepresentations[39;00m [38;5;28;01mimport[39;00m Landscape
" "[0;31mModuleNotFoundError[0m: No module named 'tda_pipeline'"] :ename "ModuleNotFoundError" :evalue "No module named 'tda_pipeline'" :engine_info (:engine_uuid "09acb503-cf8f-4eef-b1b4-159ead369f19" :engine_id -1 :method "execute") :execution_count 47 :user_expressions nil :payload []) :buffers [] :channel "shell") ((:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_527" :msg_type "status" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.501001Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_527" :msg_type "status" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata nil :content (:execution_state "busy") :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_528" :msg_type "execute_input" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.501494Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_528" :msg_type "execute_input" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata nil :content (:code "# Some basic data science imports
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.pipeline import Pipeline
import datetime

import time
import os

# Some gudhi imports for TDA

import tda_pipeline
from tda_pipeline import DataSelector, RipsPersistence, LPNorm
from gudhi.representations import Landscape

# Some graphical imports for the web app
import ipywidgets as widgets
import plotly.graph_objects as go

# Some imports for ipywidgets
from ipywidgets import DatePicker, BoundedIntText, ToggleButton, Text, HBox, VBox
from IPython.display import display

# cf. data_generation.py
df = pd.read_csv('latest.csv', index_col=0)

# min, max and default start values taken from the dataset - Python 3.7+
min_value = datetime.date.fromisoformat(df.index[0])
max_value = datetime.date.fromisoformat(df.index[-1])

last_year = max_value - datetime.timedelta(days=250)

# Widgets
start = DatePicker(description='start', value = last_year)
end   = DatePicker(description='end', value = max_value)
window = BoundedIntText(value=50, min=10, max=100, step=1, description='Windows size')

button = ToggleButton(description='Compute', icon='cogs')

def nearest_str_date(items, pivot):
    return min(items, key=lambda str_date: abs(datetime.date.fromisoformat(str_date) - pivot))

def compute_Lp_norms():
    w=int(window.value)
    start_idx = df.index.get_loc(str(nearest_str_date(df.index, start.value - datetime.timedelta(days=w))))
    end_idx = df.index.get_loc(str(nearest_str_date(df.index, end.value)))
    # Some error management
    if start_idx == end_idx:
        raise IndexError('Start date must be different from end date.')
    if end_idx < w:
        end_idx = w
    if end_idx < start_idx:
        start_idx, end_idx = end_idx, start_idx

    pipe = Pipeline(
        [
            (\"data_sel\", DataSelector(start=start_idx, end=end_idx, w=w)),
            (\"rips_pers\", RipsPersistence(max_rips_dimension=2, max_persistence_dimension=2, only_this_dim=1, n_jobs=-1)),
            (\"landscape\", Landscape(resolution=1000)),
            (\"lpnorm\", LPNorm(n_jobs=-1)),
            (\"mms\", MinMaxScaler()),
        ]
    )

    start_chrono = float(time.time())
    #os.write(1, bytes(str(start_chrono),'UTF-8') + b'\\r\\n')
    L1L2mms = pipe.fit_transform(df)
    stop_chrono = float(time.time())
    #os.write(1, bytes(str(stop_chrono),'UTF-8') + b'\\r\\n')
    os.write(1, bytes(str(stop_chrono - start_chrono),'UTF-8') + b' sec. \\r\\n')
    
    l1l2df = pd.DataFrame({'date': df[start_idx+w:end_idx].index, 'L1': L1L2mms.transpose()[0], 'L2': L1L2mms.transpose()[1]})
    # Calculate the variance for the L norms
    j = 0

    for i in l1l2df.index:
        if j < w:
            k = 0
        else:
            k = j - w
        l1l2df.loc[i, 'L1_variance'] = np.var(l1l2df.iloc[k:j].L1)
        l1l2df.loc[i, 'L2_variance'] = np.var(l1l2df.iloc[k:j].L2)
        j += 1
        
    return l1l2df

def compute(args):
    l1l2df = compute_Lp_norms()
    fig.data[0]['x'] = l1l2df['date']
    fig.data[0]['y'] = l1l2df['L1']
    fig.data[1]['x'] = l1l2df['date']
    fig.data[1]['y'] = l1l2df['L2']
    fig.data[2]['x'] = l1l2df['date']
    fig.data[2]['y'] = l1l2df['L1_variance']
    fig.data[3]['x'] = l1l2df['date']
    fig.data[3]['y'] = l1l2df['L2_variance']
    
button.observe(compute, 'value')

# Layout
left_box = HBox([start, end, window, button])

fig = go.FigureWidget()

l1l2df = compute_Lp_norms()
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1'], mode='lines', name='L1')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2'], mode='lines', name='L2')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L1_variance'], mode='lines', name='L1_variance')
fig.add_scatter(x=l1l2df['date'], y=l1l2df['L2_variance'], mode='lines', name='L2_variance')
fig.update_xaxes(dtick=\"M1\", tickformat=\"%b\\n%Y\")
fig.layout.title.text = 'Lp norms'

display(left_box)
fig" :execution_count 47) :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_529" :msg_type "error" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.529306Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_529" :msg_type "error" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata nil :content (:traceback ["[0;31m---------------------------------------------------------------------------[0m" "[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)" "Cell [0;32mIn[47], line 13[0m
[1;32m      9[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m
[1;32m     11[0m [38;5;66;03m# Some gudhi imports for TDA[39;00m
[0;32m---> 13[0m [38;5;28;01mimport[39;00m [38;5;21;01mtda_pipeline[39;00m
[1;32m     14[0m [38;5;28;01mfrom[39;00m [38;5;21;01mtda_pipeline[39;00m [38;5;28;01mimport[39;00m DataSelector, RipsPersistence, LPNorm
[1;32m     15[0m [38;5;28;01mfrom[39;00m [38;5;21;01mgudhi[39;00m[38;5;21;01m.[39;00m[38;5;21;01mrepresentations[39;00m [38;5;28;01mimport[39;00m Landscape
" "[0;31mModuleNotFoundError[0m: No module named 'tda_pipeline'"] :ename "ModuleNotFoundError" :evalue "No module named 'tda_pipeline'") :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_531" :msg_type "status" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.530475Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_531" :msg_type "status" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata nil :content (:execution_state "idle") :buffers [] :channel "iopub") (:header (:msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_530" :msg_type "execute_reply" :username "dquiccione" :session "a65b1cee-d2e431a84266b9e417a60360" :date "2024-11-28T15:57:11.530238Z" :version "5.3") :msg_id "a65b1cee-d2e431a84266b9e417a60360_104510_530" :msg_type "execute_reply" :parent_header (:msg_id "4b09f712-ee03-45d1-be9a-996919662b66" :msg_type "execute_request" :version "5.3" :username "dquiccione" :session "f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" :date "2024-11-28T15:57:11.496418Z") :metadata (:started "2024-11-28T15:57:11.501467Z" :dependencies_met t :engine "09acb503-cf8f-4eef-b1b4-159ead369f19" :status "error") :content (:status "error" :traceback ["[0;31m---------------------------------------------------------------------------[0m" "[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)" "Cell [0;32mIn[47], line 13[0m
[1;32m      9[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m
[1;32m     11[0m [38;5;66;03m# Some gudhi imports for TDA[39;00m
[0;32m---> 13[0m [38;5;28;01mimport[39;00m [38;5;21;01mtda_pipeline[39;00m
[1;32m     14[0m [38;5;28;01mfrom[39;00m [38;5;21;01mtda_pipeline[39;00m [38;5;28;01mimport[39;00m DataSelector, RipsPersistence, LPNorm
[1;32m     15[0m [38;5;28;01mfrom[39;00m [38;5;21;01mgudhi[39;00m[38;5;21;01m.[39;00m[38;5;21;01mrepresentations[39;00m [38;5;28;01mimport[39;00m Landscape
" "[0;31mModuleNotFoundError[0m: No module named 'tda_pipeline'"] :ename "ModuleNotFoundError" :evalue "No module named 'tda_pipeline'" :engine_info (:engine_uuid "09acb503-cf8f-4eef-b1b4-159ead369f19" :engine_id -1 :method "execute") :execution_count 47 :user_expressions nil :payload []) :buffers [] :channel "shell")) #26 nil value ((:colname-names) (:rowname-names) (:result-params "replace") (:result-type . value) (:results . "replace") (:exports . "code") (:kernel . "python3") (:session . "py") (:async . "yes") (:tangle . "no") (:hlines . "no") (:noweb . "no") (:cache . "no")) nil nil nil t nil #<marker at 659 in tda_web_app.org> t #<overlay in no buffer>) cl-struct-jupyter-request-tags #[514 "\301!>\204 \302\303\304D\"\210\305I\210\301!>\204# \302\303\304D\"\210\306\306HC\244I\210\307!\204C \310!\311\230\204C \310!\312\230\203W \301!>\204R \302\303\304D\"\210\313\314I\210\315\316BB!\207" [cl-struct-jupyter-request-tags type-of signal wrong-type-argument jupyter-request 7 8 jupyter-message-status-idle-p jupyter-message-type "kernel_info_reply" "shutdown_reply" 6 t jupyter-content :parent-request] 6 "

(fn REQ MSG)"] jupyter-message-type jupyter-content type-of signal wrong-type-argument jupyter-request 6 "status" unsubscribe jupyter-message-parent-id] 7 "

(fn MSG)"] (subscribers #[257 "\211:\203L \211\242\211\301\267\202G \243\211:\203& \211\242\243\211\204  \300!\207\302\303\"\207\302\303\"\207\243\211:\203B \211\243\211\204= \304\305\306\"\207\302\303\"\207\302\303\"\207\302\303\"\207\302\303\"\207" [#[257 "\301!\205 \302\303\"\304\300#\262\207" [#12 jupyter-message-type plist-get :channel jupyter-handle-message] 6 "

(fn MSG)"] #s(hash-table test eq purecopy t data (content 13 subscribe 43)) error "Unhandled subscriber content: %s" signal jupyter-subscribed-subscriber nil] 8 "

(fn SUB-CONTENT)"]) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"]) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"]) #[257 "\211\242\211\302\267\202$ \303\300A@\301#\207A@\301\211A\304\"\204\" B\262\241\207\305\306\"\207" [jupyter-content (subscribers) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"] cl-struct-websocket-frame-tags type-of signal wrong-type-argument websocket-frame 1 (binary text) jupyter-read-plist-from-string 2 jupyter-run-with-state jupyter-publish message error] 11 "

(fn WS FRAME)"] #[257 "\300\242\203	 \301\302!\207\300\303\240\207" [(nil) error "Kernel connection could not be established" t] 3 "

(fn WS)"] websocket-default-error-handler nil nil nil "ws://localhost:8888/api/kernels/6bf9469b-83c6-4b8d-8e54-385f791b796f/channels?session_id=f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0" nil nil #<process websocket to ws://localhost:8888/api/kernels/6bf9469b-83c6-4b8d-8e54-385f791b796f/channels?session_id=f109ff8e-41b9-44c3-bc95-5b3b3c8c96d0> nil nil "wlYv8zPJwfSVI4dSA1dXwtQQaB4=" nil)) (nil) #s(jupyter-server-kernel #s(jupyter-kernelspec "python3" (:argv ["python" "-m" "ipykernel_launcher" "-f" "{connection_file}"] :env nil :display_name "Python 3 (ipykernel)" :language "python" :interrupt_mode "signal" :metadata (:debugger t)) nil) #s(jupyter-session nil "6a8d255a-2f17-46fd-8af1-0c55b94d0c7b" nil) #s(jupyter-server "http://localhost:8888" "ws://localhost:8888" t (:default "python3" :kernelspecs (#s(jupyter-kernelspec "python3" (:argv ["python" "-m" "ipykernel_launcher" "-f" "{connection_file}"] :env nil :display_name "Python 3 (ipykernel)" :language "python" :interrupt_mode "signal" :metadata (:debugger t)) nil)))) "6bf9469b-83c6-4b8d-8e54-385f791b796f") #s(hash-table test eq purecopy t data (interrupt 6 shutdown 10 restart 30)) jupyter-interrupt jupyter-shutdown t websocket-openp websocket-close jupyter-restart action] 7 "

(fn ACTION)"] #s(hash-table test eq purecopy t data (content 13 subscribe 43)) error "Unhandled subscriber content: %s" signal jupyter-subscribed-subscriber nil] 8 "

(fn SUB-CONTENT)"]) #<buffer  *jupyter-kernel-client*> nil "null" nil #<buffer *jupyter-repl[python 3.12.3]-py*> nil nil nil) jupyter-message-type plist-get :channel jupyter-handle-message] 6 "

(fn MSG)"] #s(hash-table test eq purecopy t data (content 13 subscribe 43)) error "Unhandled subscriber content: %s" signal jupyter-subscribed-subscriber nil] 8 "

(fn SUB-CONTENT)"]) #s(hash-table test eq purecopy t data (content 8 subscribe 16)) jupyter-distribute-content memql error "Unhandled publisher content: %s"] 8 "

(fn PUB-VALUE)"] nil value ((:colname-names) (:rowname-names) (:result-params "replace") (:result-type . value) (:results . "replace") (:exports . "code") (:kernel . "python3") (:session . "py") (:async . "yes") (:tangle . "no") (:hlines . "no") (:noweb . "no") (:cache . "no")) nil nil nil t nil #<marker at 659 in tda_web_app.org> t #<overlay in no buffer>) 659 . 660)) nil (26440 37604 121057 521000) 0 nil])
([nil nil ((#("import tda_pipeline
" 0 1 (face (font-lock-keyword-face org-block) font-lock-multiline t ws-butler-chg delete wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t) 1 6 (face (font-lock-keyword-face org-block) font-lock-multiline t ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t) 6 19 (face (org-block) font-lock-multiline t ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t font-lock-fontified t src-block t) 19 20 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t ws-butler-chg delete wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 914) (undo-tree-id110 . -19) (undo-tree-id111 . -19) (undo-tree-id112 . -19) (undo-tree-id113 . -19) (undo-tree-id114 . -19) (undo-tree-id115 . -19) (undo-tree-id116 . -19) (undo-tree-id117 . -19) (undo-tree-id118 . -19) (undo-tree-id119 . -18) (undo-tree-id120 . -19) (undo-tree-id121 . -18) (undo-tree-id122 . -19) (undo-tree-id123 . -18) (undo-tree-id124 . -18) (undo-tree-id125 . -18) (undo-tree-id126 . -18) (undo-tree-id127 . -18) (undo-tree-id128 . -18) (undo-tree-id129 . -18) (undo-tree-id130 . -18) (undo-tree-id131 . -18) (undo-tree-id132 . -18) (undo-tree-id133 . -18) (undo-tree-id134 . -18) (undo-tree-id135 . -18) (undo-tree-id136 . -18) (undo-tree-id137 . -18) (undo-tree-id138 . -18) (undo-tree-id139 . -18) (undo-tree-id140 . -18) (undo-tree-id141 . -18) (undo-tree-id142 . -18) (undo-tree-id143 . -18) (undo-tree-id144 . -18) (undo-tree-id145 . -18) (undo-tree-id146 . -18) (undo-tree-id147 . -20) (undo-tree-id148 . -20) 932) nil (26440 37604 121055 573000) 0 nil])
([nil nil ((#("
" 0 1 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t rear-nonsticky t ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 913) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1)) nil (26440 37604 120944 225000) 0 nil])
([nil current ((#(" " 0 1 (jupyter-ansi t face (org-code) ws-butler-chg chg wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) . 5381) 913) nil (26440 37604 120902 413000) 0 nil])
nil
